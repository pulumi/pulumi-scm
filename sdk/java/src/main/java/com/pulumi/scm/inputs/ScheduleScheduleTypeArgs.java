// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.scm.inputs.ScheduleScheduleTypeRecurringArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScheduleScheduleTypeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScheduleScheduleTypeArgs Empty = new ScheduleScheduleTypeArgs();

    /**
     * The NonRecurringList param. Individual elements in this list are subject to additional validation. String length must be between 33 and 33 characters. String validation regex: `[0-9][0-9][0-9][0-9]\/([0][1-9]|[1][0-2])\/([0-2][0-9]|[3][0-1]){@literal @}([01][0-9]|[2][0-3]):([0-5][0-9])-[0-9][0-9][0-9][0-9]\/([0][1-9]|[1][0-2])\/([0-2][0-9]|[3][0-1]){@literal @}([01][0-9]|[2][0-3]):([0-5][0-9])`. Ensure that only one of the following is specified: `non_recurring`, `recurring`
     * 
     */
    @Import(name="nonRecurringLists")
    private @Nullable Output<List<String>> nonRecurringLists;

    /**
     * @return The NonRecurringList param. Individual elements in this list are subject to additional validation. String length must be between 33 and 33 characters. String validation regex: `[0-9][0-9][0-9][0-9]\/([0][1-9]|[1][0-2])\/([0-2][0-9]|[3][0-1]){@literal @}([01][0-9]|[2][0-3]):([0-5][0-9])-[0-9][0-9][0-9][0-9]\/([0][1-9]|[1][0-2])\/([0-2][0-9]|[3][0-1]){@literal @}([01][0-9]|[2][0-3]):([0-5][0-9])`. Ensure that only one of the following is specified: `non_recurring`, `recurring`
     * 
     */
    public Optional<Output<List<String>>> nonRecurringLists() {
        return Optional.ofNullable(this.nonRecurringLists);
    }

    /**
     * The Recurring param. Ensure that only one of the following is specified: `non_recurring`, `recurring`
     * 
     */
    @Import(name="recurring")
    private @Nullable Output<ScheduleScheduleTypeRecurringArgs> recurring;

    /**
     * @return The Recurring param. Ensure that only one of the following is specified: `non_recurring`, `recurring`
     * 
     */
    public Optional<Output<ScheduleScheduleTypeRecurringArgs>> recurring() {
        return Optional.ofNullable(this.recurring);
    }

    private ScheduleScheduleTypeArgs() {}

    private ScheduleScheduleTypeArgs(ScheduleScheduleTypeArgs $) {
        this.nonRecurringLists = $.nonRecurringLists;
        this.recurring = $.recurring;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScheduleScheduleTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScheduleScheduleTypeArgs $;

        public Builder() {
            $ = new ScheduleScheduleTypeArgs();
        }

        public Builder(ScheduleScheduleTypeArgs defaults) {
            $ = new ScheduleScheduleTypeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param nonRecurringLists The NonRecurringList param. Individual elements in this list are subject to additional validation. String length must be between 33 and 33 characters. String validation regex: `[0-9][0-9][0-9][0-9]\/([0][1-9]|[1][0-2])\/([0-2][0-9]|[3][0-1]){@literal @}([01][0-9]|[2][0-3]):([0-5][0-9])-[0-9][0-9][0-9][0-9]\/([0][1-9]|[1][0-2])\/([0-2][0-9]|[3][0-1]){@literal @}([01][0-9]|[2][0-3]):([0-5][0-9])`. Ensure that only one of the following is specified: `non_recurring`, `recurring`
         * 
         * @return builder
         * 
         */
        public Builder nonRecurringLists(@Nullable Output<List<String>> nonRecurringLists) {
            $.nonRecurringLists = nonRecurringLists;
            return this;
        }

        /**
         * @param nonRecurringLists The NonRecurringList param. Individual elements in this list are subject to additional validation. String length must be between 33 and 33 characters. String validation regex: `[0-9][0-9][0-9][0-9]\/([0][1-9]|[1][0-2])\/([0-2][0-9]|[3][0-1]){@literal @}([01][0-9]|[2][0-3]):([0-5][0-9])-[0-9][0-9][0-9][0-9]\/([0][1-9]|[1][0-2])\/([0-2][0-9]|[3][0-1]){@literal @}([01][0-9]|[2][0-3]):([0-5][0-9])`. Ensure that only one of the following is specified: `non_recurring`, `recurring`
         * 
         * @return builder
         * 
         */
        public Builder nonRecurringLists(List<String> nonRecurringLists) {
            return nonRecurringLists(Output.of(nonRecurringLists));
        }

        /**
         * @param nonRecurringLists The NonRecurringList param. Individual elements in this list are subject to additional validation. String length must be between 33 and 33 characters. String validation regex: `[0-9][0-9][0-9][0-9]\/([0][1-9]|[1][0-2])\/([0-2][0-9]|[3][0-1]){@literal @}([01][0-9]|[2][0-3]):([0-5][0-9])-[0-9][0-9][0-9][0-9]\/([0][1-9]|[1][0-2])\/([0-2][0-9]|[3][0-1]){@literal @}([01][0-9]|[2][0-3]):([0-5][0-9])`. Ensure that only one of the following is specified: `non_recurring`, `recurring`
         * 
         * @return builder
         * 
         */
        public Builder nonRecurringLists(String... nonRecurringLists) {
            return nonRecurringLists(List.of(nonRecurringLists));
        }

        /**
         * @param recurring The Recurring param. Ensure that only one of the following is specified: `non_recurring`, `recurring`
         * 
         * @return builder
         * 
         */
        public Builder recurring(@Nullable Output<ScheduleScheduleTypeRecurringArgs> recurring) {
            $.recurring = recurring;
            return this;
        }

        /**
         * @param recurring The Recurring param. Ensure that only one of the following is specified: `non_recurring`, `recurring`
         * 
         * @return builder
         * 
         */
        public Builder recurring(ScheduleScheduleTypeRecurringArgs recurring) {
            return recurring(Output.of(recurring));
        }

        public ScheduleScheduleTypeArgs build() {
            return $;
        }
    }

}
