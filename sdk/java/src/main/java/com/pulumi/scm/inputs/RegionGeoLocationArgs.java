// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.util.Objects;


public final class RegionGeoLocationArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegionGeoLocationArgs Empty = new RegionGeoLocationArgs();

    /**
     * latitude coordinate. Value must be between -90 and 90.
     * 
     */
    @Import(name="latitude", required=true)
    private Output<Double> latitude;

    /**
     * @return latitude coordinate. Value must be between -90 and 90.
     * 
     */
    public Output<Double> latitude() {
        return this.latitude;
    }

    /**
     * longitude coordinate. Value must be between -180 and 180.
     * 
     */
    @Import(name="longitude", required=true)
    private Output<Double> longitude;

    /**
     * @return longitude coordinate. Value must be between -180 and 180.
     * 
     */
    public Output<Double> longitude() {
        return this.longitude;
    }

    private RegionGeoLocationArgs() {}

    private RegionGeoLocationArgs(RegionGeoLocationArgs $) {
        this.latitude = $.latitude;
        this.longitude = $.longitude;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegionGeoLocationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegionGeoLocationArgs $;

        public Builder() {
            $ = new RegionGeoLocationArgs();
        }

        public Builder(RegionGeoLocationArgs defaults) {
            $ = new RegionGeoLocationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param latitude latitude coordinate. Value must be between -90 and 90.
         * 
         * @return builder
         * 
         */
        public Builder latitude(Output<Double> latitude) {
            $.latitude = latitude;
            return this;
        }

        /**
         * @param latitude latitude coordinate. Value must be between -90 and 90.
         * 
         * @return builder
         * 
         */
        public Builder latitude(Double latitude) {
            return latitude(Output.of(latitude));
        }

        /**
         * @param longitude longitude coordinate. Value must be between -180 and 180.
         * 
         * @return builder
         * 
         */
        public Builder longitude(Output<Double> longitude) {
            $.longitude = longitude;
            return this;
        }

        /**
         * @param longitude longitude coordinate. Value must be between -180 and 180.
         * 
         * @return builder
         * 
         */
        public Builder longitude(Double longitude) {
            return longitude(Output.of(longitude));
        }

        public RegionGeoLocationArgs build() {
            if ($.latitude == null) {
                throw new MissingRequiredPropertyException("RegionGeoLocationArgs", "latitude");
            }
            if ($.longitude == null) {
                throw new MissingRequiredPropertyException("RegionGeoLocationArgs", "longitude");
            }
            return $;
        }
    }

}
