// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationFilterTaggingArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationFilterTaggingArgs Empty = new ApplicationFilterTaggingArgs();

    /**
     * The NoTag param. Ensure that only one of the following is specified: `no_tag`, `tag`
     * 
     */
    @Import(name="noTag")
    private @Nullable Output<Boolean> noTag;

    /**
     * @return The NoTag param. Ensure that only one of the following is specified: `no_tag`, `tag`
     * 
     */
    public Optional<Output<Boolean>> noTag() {
        return Optional.ofNullable(this.noTag);
    }

    /**
     * The Tags param. Individual elements in this list are subject to additional validation. String length must not exceed 127 characters. Ensure that only one of the following is specified: `no_tag`, `tag`
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return The Tags param. Individual elements in this list are subject to additional validation. String length must not exceed 127 characters. Ensure that only one of the following is specified: `no_tag`, `tag`
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ApplicationFilterTaggingArgs() {}

    private ApplicationFilterTaggingArgs(ApplicationFilterTaggingArgs $) {
        this.noTag = $.noTag;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationFilterTaggingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationFilterTaggingArgs $;

        public Builder() {
            $ = new ApplicationFilterTaggingArgs();
        }

        public Builder(ApplicationFilterTaggingArgs defaults) {
            $ = new ApplicationFilterTaggingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param noTag The NoTag param. Ensure that only one of the following is specified: `no_tag`, `tag`
         * 
         * @return builder
         * 
         */
        public Builder noTag(@Nullable Output<Boolean> noTag) {
            $.noTag = noTag;
            return this;
        }

        /**
         * @param noTag The NoTag param. Ensure that only one of the following is specified: `no_tag`, `tag`
         * 
         * @return builder
         * 
         */
        public Builder noTag(Boolean noTag) {
            return noTag(Output.of(noTag));
        }

        /**
         * @param tags The Tags param. Individual elements in this list are subject to additional validation. String length must not exceed 127 characters. Ensure that only one of the following is specified: `no_tag`, `tag`
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The Tags param. Individual elements in this list are subject to additional validation. String length must not exceed 127 characters. Ensure that only one of the following is specified: `no_tag`, `tag`
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The Tags param. Individual elements in this list are subject to additional validation. String length must not exceed 127 characters. Ensure that only one of the following is specified: `no_tag`, `tag`
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public ApplicationFilterTaggingArgs build() {
            return $;
        }
    }

}
