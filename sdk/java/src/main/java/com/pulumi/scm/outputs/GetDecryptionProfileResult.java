// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.scm.outputs.GetDecryptionProfileSslForwardProxy;
import com.pulumi.scm.outputs.GetDecryptionProfileSslInboundProxy;
import com.pulumi.scm.outputs.GetDecryptionProfileSslNoProxy;
import com.pulumi.scm.outputs.GetDecryptionProfileSslProtocolSettings;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDecryptionProfileResult {
    /**
     * @return The Id param.
     * 
     */
    private String id;
    /**
     * @return Must start with alphanumeric char and should contain only alphanemeric, underscore, hyphen, dot or space. String validation regex: `^[A-Za-z0-9]{1}[A-Za-z0-9_\-\.\s]{0,}$`.
     * 
     */
    private String name;
    /**
     * @return The SslForwardProxy param.
     * 
     */
    private GetDecryptionProfileSslForwardProxy sslForwardProxy;
    /**
     * @return The SslInboundProxy param.
     * 
     */
    private GetDecryptionProfileSslInboundProxy sslInboundProxy;
    /**
     * @return The SslNoProxy param.
     * 
     */
    private GetDecryptionProfileSslNoProxy sslNoProxy;
    /**
     * @return The SslProtocolSettings param.
     * 
     */
    private GetDecryptionProfileSslProtocolSettings sslProtocolSettings;
    private String tfid;

    private GetDecryptionProfileResult() {}
    /**
     * @return The Id param.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Must start with alphanumeric char and should contain only alphanemeric, underscore, hyphen, dot or space. String validation regex: `^[A-Za-z0-9]{1}[A-Za-z0-9_\-\.\s]{0,}$`.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The SslForwardProxy param.
     * 
     */
    public GetDecryptionProfileSslForwardProxy sslForwardProxy() {
        return this.sslForwardProxy;
    }
    /**
     * @return The SslInboundProxy param.
     * 
     */
    public GetDecryptionProfileSslInboundProxy sslInboundProxy() {
        return this.sslInboundProxy;
    }
    /**
     * @return The SslNoProxy param.
     * 
     */
    public GetDecryptionProfileSslNoProxy sslNoProxy() {
        return this.sslNoProxy;
    }
    /**
     * @return The SslProtocolSettings param.
     * 
     */
    public GetDecryptionProfileSslProtocolSettings sslProtocolSettings() {
        return this.sslProtocolSettings;
    }
    public String tfid() {
        return this.tfid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDecryptionProfileResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private String name;
        private GetDecryptionProfileSslForwardProxy sslForwardProxy;
        private GetDecryptionProfileSslInboundProxy sslInboundProxy;
        private GetDecryptionProfileSslNoProxy sslNoProxy;
        private GetDecryptionProfileSslProtocolSettings sslProtocolSettings;
        private String tfid;
        public Builder() {}
        public Builder(GetDecryptionProfileResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.sslForwardProxy = defaults.sslForwardProxy;
    	      this.sslInboundProxy = defaults.sslInboundProxy;
    	      this.sslNoProxy = defaults.sslNoProxy;
    	      this.sslProtocolSettings = defaults.sslProtocolSettings;
    	      this.tfid = defaults.tfid;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDecryptionProfileResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDecryptionProfileResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder sslForwardProxy(GetDecryptionProfileSslForwardProxy sslForwardProxy) {
            if (sslForwardProxy == null) {
              throw new MissingRequiredPropertyException("GetDecryptionProfileResult", "sslForwardProxy");
            }
            this.sslForwardProxy = sslForwardProxy;
            return this;
        }
        @CustomType.Setter
        public Builder sslInboundProxy(GetDecryptionProfileSslInboundProxy sslInboundProxy) {
            if (sslInboundProxy == null) {
              throw new MissingRequiredPropertyException("GetDecryptionProfileResult", "sslInboundProxy");
            }
            this.sslInboundProxy = sslInboundProxy;
            return this;
        }
        @CustomType.Setter
        public Builder sslNoProxy(GetDecryptionProfileSslNoProxy sslNoProxy) {
            if (sslNoProxy == null) {
              throw new MissingRequiredPropertyException("GetDecryptionProfileResult", "sslNoProxy");
            }
            this.sslNoProxy = sslNoProxy;
            return this;
        }
        @CustomType.Setter
        public Builder sslProtocolSettings(GetDecryptionProfileSslProtocolSettings sslProtocolSettings) {
            if (sslProtocolSettings == null) {
              throw new MissingRequiredPropertyException("GetDecryptionProfileResult", "sslProtocolSettings");
            }
            this.sslProtocolSettings = sslProtocolSettings;
            return this;
        }
        @CustomType.Setter
        public Builder tfid(String tfid) {
            if (tfid == null) {
              throw new MissingRequiredPropertyException("GetDecryptionProfileResult", "tfid");
            }
            this.tfid = tfid;
            return this;
        }
        public GetDecryptionProfileResult build() {
            final var _resultValue = new GetDecryptionProfileResult();
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.sslForwardProxy = sslForwardProxy;
            _resultValue.sslInboundProxy = sslInboundProxy;
            _resultValue.sslNoProxy = sslNoProxy;
            _resultValue.sslProtocolSettings = sslProtocolSettings;
            _resultValue.tfid = tfid;
            return _resultValue;
        }
    }
}
