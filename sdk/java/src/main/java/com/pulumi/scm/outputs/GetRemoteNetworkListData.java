// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.scm.outputs.GetRemoteNetworkListDataEcmpTunnel;
import com.pulumi.scm.outputs.GetRemoteNetworkListDataProtocol;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRemoteNetworkListData {
    /**
     * @return The EcmpLoadBalancing param. String must be one of these: `&#34;enable&#34;`, `&#34;disable&#34;`. Default: `&#34;disable&#34;`.
     * 
     */
    private String ecmpLoadBalancing;
    /**
     * @return ecmp*tunnels is required when ecmp*load*balancing is enable.
     * 
     */
    private List<GetRemoteNetworkListDataEcmpTunnel> ecmpTunnels;
    /**
     * @return UUID of the resource.
     * 
     */
    private String id;
    /**
     * @return ipsec*tunnel is required when ecmp*load_balancing is disable.
     * 
     */
    private String ipsecTunnel;
    /**
     * @return New customer will only be on aggregate bandwidth licensing. String length must exceed 1 characters. Default: `&#34;FWAAS-AGGREGATE&#34;`.
     * 
     */
    private String licenseType;
    /**
     * @return Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
     * 
     */
    private String name;
    /**
     * @return setup the protocol when ecmp*load*balancing is disable.
     * 
     */
    private GetRemoteNetworkListDataProtocol protocol;
    /**
     * @return The Region param. String length must exceed 1 characters.
     * 
     */
    private String region;
    /**
     * @return specify secondary ipsec_tunnel if needed.
     * 
     */
    private String secondaryIpsecTunnel;
    /**
     * @return spn-name is needed when license_type is FWAAS-AGGREGATE.
     * 
     */
    private String spnName;
    /**
     * @return The Subnets param.
     * 
     */
    private List<String> subnets;

    private GetRemoteNetworkListData() {}
    /**
     * @return The EcmpLoadBalancing param. String must be one of these: `&#34;enable&#34;`, `&#34;disable&#34;`. Default: `&#34;disable&#34;`.
     * 
     */
    public String ecmpLoadBalancing() {
        return this.ecmpLoadBalancing;
    }
    /**
     * @return ecmp*tunnels is required when ecmp*load*balancing is enable.
     * 
     */
    public List<GetRemoteNetworkListDataEcmpTunnel> ecmpTunnels() {
        return this.ecmpTunnels;
    }
    /**
     * @return UUID of the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return ipsec*tunnel is required when ecmp*load_balancing is disable.
     * 
     */
    public String ipsecTunnel() {
        return this.ipsecTunnel;
    }
    /**
     * @return New customer will only be on aggregate bandwidth licensing. String length must exceed 1 characters. Default: `&#34;FWAAS-AGGREGATE&#34;`.
     * 
     */
    public String licenseType() {
        return this.licenseType;
    }
    /**
     * @return Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return setup the protocol when ecmp*load*balancing is disable.
     * 
     */
    public GetRemoteNetworkListDataProtocol protocol() {
        return this.protocol;
    }
    /**
     * @return The Region param. String length must exceed 1 characters.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return specify secondary ipsec_tunnel if needed.
     * 
     */
    public String secondaryIpsecTunnel() {
        return this.secondaryIpsecTunnel;
    }
    /**
     * @return spn-name is needed when license_type is FWAAS-AGGREGATE.
     * 
     */
    public String spnName() {
        return this.spnName;
    }
    /**
     * @return The Subnets param.
     * 
     */
    public List<String> subnets() {
        return this.subnets;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRemoteNetworkListData defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String ecmpLoadBalancing;
        private List<GetRemoteNetworkListDataEcmpTunnel> ecmpTunnels;
        private String id;
        private String ipsecTunnel;
        private String licenseType;
        private String name;
        private GetRemoteNetworkListDataProtocol protocol;
        private String region;
        private String secondaryIpsecTunnel;
        private String spnName;
        private List<String> subnets;
        public Builder() {}
        public Builder(GetRemoteNetworkListData defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ecmpLoadBalancing = defaults.ecmpLoadBalancing;
    	      this.ecmpTunnels = defaults.ecmpTunnels;
    	      this.id = defaults.id;
    	      this.ipsecTunnel = defaults.ipsecTunnel;
    	      this.licenseType = defaults.licenseType;
    	      this.name = defaults.name;
    	      this.protocol = defaults.protocol;
    	      this.region = defaults.region;
    	      this.secondaryIpsecTunnel = defaults.secondaryIpsecTunnel;
    	      this.spnName = defaults.spnName;
    	      this.subnets = defaults.subnets;
        }

        @CustomType.Setter
        public Builder ecmpLoadBalancing(String ecmpLoadBalancing) {
            if (ecmpLoadBalancing == null) {
              throw new MissingRequiredPropertyException("GetRemoteNetworkListData", "ecmpLoadBalancing");
            }
            this.ecmpLoadBalancing = ecmpLoadBalancing;
            return this;
        }
        @CustomType.Setter
        public Builder ecmpTunnels(List<GetRemoteNetworkListDataEcmpTunnel> ecmpTunnels) {
            if (ecmpTunnels == null) {
              throw new MissingRequiredPropertyException("GetRemoteNetworkListData", "ecmpTunnels");
            }
            this.ecmpTunnels = ecmpTunnels;
            return this;
        }
        public Builder ecmpTunnels(GetRemoteNetworkListDataEcmpTunnel... ecmpTunnels) {
            return ecmpTunnels(List.of(ecmpTunnels));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRemoteNetworkListData", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecTunnel(String ipsecTunnel) {
            if (ipsecTunnel == null) {
              throw new MissingRequiredPropertyException("GetRemoteNetworkListData", "ipsecTunnel");
            }
            this.ipsecTunnel = ipsecTunnel;
            return this;
        }
        @CustomType.Setter
        public Builder licenseType(String licenseType) {
            if (licenseType == null) {
              throw new MissingRequiredPropertyException("GetRemoteNetworkListData", "licenseType");
            }
            this.licenseType = licenseType;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetRemoteNetworkListData", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(GetRemoteNetworkListDataProtocol protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetRemoteNetworkListData", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetRemoteNetworkListData", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryIpsecTunnel(String secondaryIpsecTunnel) {
            if (secondaryIpsecTunnel == null) {
              throw new MissingRequiredPropertyException("GetRemoteNetworkListData", "secondaryIpsecTunnel");
            }
            this.secondaryIpsecTunnel = secondaryIpsecTunnel;
            return this;
        }
        @CustomType.Setter
        public Builder spnName(String spnName) {
            if (spnName == null) {
              throw new MissingRequiredPropertyException("GetRemoteNetworkListData", "spnName");
            }
            this.spnName = spnName;
            return this;
        }
        @CustomType.Setter
        public Builder subnets(List<String> subnets) {
            if (subnets == null) {
              throw new MissingRequiredPropertyException("GetRemoteNetworkListData", "subnets");
            }
            this.subnets = subnets;
            return this;
        }
        public Builder subnets(String... subnets) {
            return subnets(List.of(subnets));
        }
        public GetRemoteNetworkListData build() {
            final var _resultValue = new GetRemoteNetworkListData();
            _resultValue.ecmpLoadBalancing = ecmpLoadBalancing;
            _resultValue.ecmpTunnels = ecmpTunnels;
            _resultValue.id = id;
            _resultValue.ipsecTunnel = ipsecTunnel;
            _resultValue.licenseType = licenseType;
            _resultValue.name = name;
            _resultValue.protocol = protocol;
            _resultValue.region = region;
            _resultValue.secondaryIpsecTunnel = secondaryIpsecTunnel;
            _resultValue.spnName = spnName;
            _resultValue.subnets = subnets;
            return _resultValue;
        }
    }
}
