// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSharedInfrastructureSettingsListData {
    /**
     * @return The ApiKey param.
     * 
     */
    private String apiKey;
    /**
     * @return The CaptivePortalRedirectIpAddress param.
     * 
     */
    private String captivePortalRedirectIpAddress;
    /**
     * @return The EgressIpNotificationUrl param.
     * 
     */
    private String egressIpNotificationUrl;
    /**
     * @return The InfraBgpAs param.
     * 
     */
    private String infraBgpAs;
    /**
     * @return The InfrastructureSubnet param.
     * 
     */
    private String infrastructureSubnet;
    /**
     * @return The InfrastructureSubnetIpv6 param.
     * 
     */
    private String infrastructureSubnetIpv6;
    /**
     * @return The Ipv6 param.
     * 
     */
    private Boolean ipv6;
    /**
     * @return The LoopbackIps param.
     * 
     */
    private List<String> loopbackIps;
    /**
     * @return The TunnelMonitorIpAddress param.
     * 
     */
    private String tunnelMonitorIpAddress;

    private GetSharedInfrastructureSettingsListData() {}
    /**
     * @return The ApiKey param.
     * 
     */
    public String apiKey() {
        return this.apiKey;
    }
    /**
     * @return The CaptivePortalRedirectIpAddress param.
     * 
     */
    public String captivePortalRedirectIpAddress() {
        return this.captivePortalRedirectIpAddress;
    }
    /**
     * @return The EgressIpNotificationUrl param.
     * 
     */
    public String egressIpNotificationUrl() {
        return this.egressIpNotificationUrl;
    }
    /**
     * @return The InfraBgpAs param.
     * 
     */
    public String infraBgpAs() {
        return this.infraBgpAs;
    }
    /**
     * @return The InfrastructureSubnet param.
     * 
     */
    public String infrastructureSubnet() {
        return this.infrastructureSubnet;
    }
    /**
     * @return The InfrastructureSubnetIpv6 param.
     * 
     */
    public String infrastructureSubnetIpv6() {
        return this.infrastructureSubnetIpv6;
    }
    /**
     * @return The Ipv6 param.
     * 
     */
    public Boolean ipv6() {
        return this.ipv6;
    }
    /**
     * @return The LoopbackIps param.
     * 
     */
    public List<String> loopbackIps() {
        return this.loopbackIps;
    }
    /**
     * @return The TunnelMonitorIpAddress param.
     * 
     */
    public String tunnelMonitorIpAddress() {
        return this.tunnelMonitorIpAddress;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSharedInfrastructureSettingsListData defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String apiKey;
        private String captivePortalRedirectIpAddress;
        private String egressIpNotificationUrl;
        private String infraBgpAs;
        private String infrastructureSubnet;
        private String infrastructureSubnetIpv6;
        private Boolean ipv6;
        private List<String> loopbackIps;
        private String tunnelMonitorIpAddress;
        public Builder() {}
        public Builder(GetSharedInfrastructureSettingsListData defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiKey = defaults.apiKey;
    	      this.captivePortalRedirectIpAddress = defaults.captivePortalRedirectIpAddress;
    	      this.egressIpNotificationUrl = defaults.egressIpNotificationUrl;
    	      this.infraBgpAs = defaults.infraBgpAs;
    	      this.infrastructureSubnet = defaults.infrastructureSubnet;
    	      this.infrastructureSubnetIpv6 = defaults.infrastructureSubnetIpv6;
    	      this.ipv6 = defaults.ipv6;
    	      this.loopbackIps = defaults.loopbackIps;
    	      this.tunnelMonitorIpAddress = defaults.tunnelMonitorIpAddress;
        }

        @CustomType.Setter
        public Builder apiKey(String apiKey) {
            if (apiKey == null) {
              throw new MissingRequiredPropertyException("GetSharedInfrastructureSettingsListData", "apiKey");
            }
            this.apiKey = apiKey;
            return this;
        }
        @CustomType.Setter
        public Builder captivePortalRedirectIpAddress(String captivePortalRedirectIpAddress) {
            if (captivePortalRedirectIpAddress == null) {
              throw new MissingRequiredPropertyException("GetSharedInfrastructureSettingsListData", "captivePortalRedirectIpAddress");
            }
            this.captivePortalRedirectIpAddress = captivePortalRedirectIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder egressIpNotificationUrl(String egressIpNotificationUrl) {
            if (egressIpNotificationUrl == null) {
              throw new MissingRequiredPropertyException("GetSharedInfrastructureSettingsListData", "egressIpNotificationUrl");
            }
            this.egressIpNotificationUrl = egressIpNotificationUrl;
            return this;
        }
        @CustomType.Setter
        public Builder infraBgpAs(String infraBgpAs) {
            if (infraBgpAs == null) {
              throw new MissingRequiredPropertyException("GetSharedInfrastructureSettingsListData", "infraBgpAs");
            }
            this.infraBgpAs = infraBgpAs;
            return this;
        }
        @CustomType.Setter
        public Builder infrastructureSubnet(String infrastructureSubnet) {
            if (infrastructureSubnet == null) {
              throw new MissingRequiredPropertyException("GetSharedInfrastructureSettingsListData", "infrastructureSubnet");
            }
            this.infrastructureSubnet = infrastructureSubnet;
            return this;
        }
        @CustomType.Setter
        public Builder infrastructureSubnetIpv6(String infrastructureSubnetIpv6) {
            if (infrastructureSubnetIpv6 == null) {
              throw new MissingRequiredPropertyException("GetSharedInfrastructureSettingsListData", "infrastructureSubnetIpv6");
            }
            this.infrastructureSubnetIpv6 = infrastructureSubnetIpv6;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6(Boolean ipv6) {
            if (ipv6 == null) {
              throw new MissingRequiredPropertyException("GetSharedInfrastructureSettingsListData", "ipv6");
            }
            this.ipv6 = ipv6;
            return this;
        }
        @CustomType.Setter
        public Builder loopbackIps(List<String> loopbackIps) {
            if (loopbackIps == null) {
              throw new MissingRequiredPropertyException("GetSharedInfrastructureSettingsListData", "loopbackIps");
            }
            this.loopbackIps = loopbackIps;
            return this;
        }
        public Builder loopbackIps(String... loopbackIps) {
            return loopbackIps(List.of(loopbackIps));
        }
        @CustomType.Setter
        public Builder tunnelMonitorIpAddress(String tunnelMonitorIpAddress) {
            if (tunnelMonitorIpAddress == null) {
              throw new MissingRequiredPropertyException("GetSharedInfrastructureSettingsListData", "tunnelMonitorIpAddress");
            }
            this.tunnelMonitorIpAddress = tunnelMonitorIpAddress;
            return this;
        }
        public GetSharedInfrastructureSettingsListData build() {
            final var _resultValue = new GetSharedInfrastructureSettingsListData();
            _resultValue.apiKey = apiKey;
            _resultValue.captivePortalRedirectIpAddress = captivePortalRedirectIpAddress;
            _resultValue.egressIpNotificationUrl = egressIpNotificationUrl;
            _resultValue.infraBgpAs = infraBgpAs;
            _resultValue.infrastructureSubnet = infrastructureSubnet;
            _resultValue.infrastructureSubnetIpv6 = infrastructureSubnetIpv6;
            _resultValue.ipv6 = ipv6;
            _resultValue.loopbackIps = loopbackIps;
            _resultValue.tunnelMonitorIpAddress = tunnelMonitorIpAddress;
            return _resultValue;
        }
    }
}
