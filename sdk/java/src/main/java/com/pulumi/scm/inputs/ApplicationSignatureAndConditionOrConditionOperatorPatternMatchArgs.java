// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.scm.inputs.ApplicationSignatureAndConditionOrConditionOperatorPatternMatchQualifierArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationSignatureAndConditionOrConditionOperatorPatternMatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationSignatureAndConditionOrConditionOperatorPatternMatchArgs Empty = new ApplicationSignatureAndConditionOrConditionOperatorPatternMatchArgs();

    /**
     * The Context param. String length must not exceed 127 characters.
     * 
     */
    @Import(name="context", required=true)
    private Output<String> context;

    /**
     * @return The Context param. String length must not exceed 127 characters.
     * 
     */
    public Output<String> context() {
        return this.context;
    }

    /**
     * The Pattern param. String length must not exceed 127 characters.
     * 
     */
    @Import(name="pattern", required=true)
    private Output<String> pattern;

    /**
     * @return The Pattern param. String length must not exceed 127 characters.
     * 
     */
    public Output<String> pattern() {
        return this.pattern;
    }

    /**
     * The Qualifiers param.
     * 
     */
    @Import(name="qualifiers")
    private @Nullable Output<List<ApplicationSignatureAndConditionOrConditionOperatorPatternMatchQualifierArgs>> qualifiers;

    /**
     * @return The Qualifiers param.
     * 
     */
    public Optional<Output<List<ApplicationSignatureAndConditionOrConditionOperatorPatternMatchQualifierArgs>>> qualifiers() {
        return Optional.ofNullable(this.qualifiers);
    }

    private ApplicationSignatureAndConditionOrConditionOperatorPatternMatchArgs() {}

    private ApplicationSignatureAndConditionOrConditionOperatorPatternMatchArgs(ApplicationSignatureAndConditionOrConditionOperatorPatternMatchArgs $) {
        this.context = $.context;
        this.pattern = $.pattern;
        this.qualifiers = $.qualifiers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationSignatureAndConditionOrConditionOperatorPatternMatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationSignatureAndConditionOrConditionOperatorPatternMatchArgs $;

        public Builder() {
            $ = new ApplicationSignatureAndConditionOrConditionOperatorPatternMatchArgs();
        }

        public Builder(ApplicationSignatureAndConditionOrConditionOperatorPatternMatchArgs defaults) {
            $ = new ApplicationSignatureAndConditionOrConditionOperatorPatternMatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param context The Context param. String length must not exceed 127 characters.
         * 
         * @return builder
         * 
         */
        public Builder context(Output<String> context) {
            $.context = context;
            return this;
        }

        /**
         * @param context The Context param. String length must not exceed 127 characters.
         * 
         * @return builder
         * 
         */
        public Builder context(String context) {
            return context(Output.of(context));
        }

        /**
         * @param pattern The Pattern param. String length must not exceed 127 characters.
         * 
         * @return builder
         * 
         */
        public Builder pattern(Output<String> pattern) {
            $.pattern = pattern;
            return this;
        }

        /**
         * @param pattern The Pattern param. String length must not exceed 127 characters.
         * 
         * @return builder
         * 
         */
        public Builder pattern(String pattern) {
            return pattern(Output.of(pattern));
        }

        /**
         * @param qualifiers The Qualifiers param.
         * 
         * @return builder
         * 
         */
        public Builder qualifiers(@Nullable Output<List<ApplicationSignatureAndConditionOrConditionOperatorPatternMatchQualifierArgs>> qualifiers) {
            $.qualifiers = qualifiers;
            return this;
        }

        /**
         * @param qualifiers The Qualifiers param.
         * 
         * @return builder
         * 
         */
        public Builder qualifiers(List<ApplicationSignatureAndConditionOrConditionOperatorPatternMatchQualifierArgs> qualifiers) {
            return qualifiers(Output.of(qualifiers));
        }

        /**
         * @param qualifiers The Qualifiers param.
         * 
         * @return builder
         * 
         */
        public Builder qualifiers(ApplicationSignatureAndConditionOrConditionOperatorPatternMatchQualifierArgs... qualifiers) {
            return qualifiers(List.of(qualifiers));
        }

        public ApplicationSignatureAndConditionOrConditionOperatorPatternMatchArgs build() {
            if ($.context == null) {
                throw new MissingRequiredPropertyException("ApplicationSignatureAndConditionOrConditionOperatorPatternMatchArgs", "context");
            }
            if ($.pattern == null) {
                throw new MissingRequiredPropertyException("ApplicationSignatureAndConditionOrConditionOperatorPatternMatchArgs", "pattern");
            }
            return $;
        }
    }

}
