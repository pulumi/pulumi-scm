// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.scm.inputs.IkeGatewayAuthenticationCertificateArgs;
import com.pulumi.scm.inputs.IkeGatewayAuthenticationPreSharedKeyArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IkeGatewayAuthenticationArgs extends com.pulumi.resources.ResourceArgs {

    public static final IkeGatewayAuthenticationArgs Empty = new IkeGatewayAuthenticationArgs();

    /**
     * The Certificate param. Ensure that only one of the following is specified: `certificate`, `pre_shared_key`
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<IkeGatewayAuthenticationCertificateArgs> certificate;

    /**
     * @return The Certificate param. Ensure that only one of the following is specified: `certificate`, `pre_shared_key`
     * 
     */
    public Optional<Output<IkeGatewayAuthenticationCertificateArgs>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * The PreSharedKey param. Ensure that only one of the following is specified: `certificate`, `pre_shared_key`
     * 
     */
    @Import(name="preSharedKey")
    private @Nullable Output<IkeGatewayAuthenticationPreSharedKeyArgs> preSharedKey;

    /**
     * @return The PreSharedKey param. Ensure that only one of the following is specified: `certificate`, `pre_shared_key`
     * 
     */
    public Optional<Output<IkeGatewayAuthenticationPreSharedKeyArgs>> preSharedKey() {
        return Optional.ofNullable(this.preSharedKey);
    }

    private IkeGatewayAuthenticationArgs() {}

    private IkeGatewayAuthenticationArgs(IkeGatewayAuthenticationArgs $) {
        this.certificate = $.certificate;
        this.preSharedKey = $.preSharedKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IkeGatewayAuthenticationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IkeGatewayAuthenticationArgs $;

        public Builder() {
            $ = new IkeGatewayAuthenticationArgs();
        }

        public Builder(IkeGatewayAuthenticationArgs defaults) {
            $ = new IkeGatewayAuthenticationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificate The Certificate param. Ensure that only one of the following is specified: `certificate`, `pre_shared_key`
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable Output<IkeGatewayAuthenticationCertificateArgs> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate The Certificate param. Ensure that only one of the following is specified: `certificate`, `pre_shared_key`
         * 
         * @return builder
         * 
         */
        public Builder certificate(IkeGatewayAuthenticationCertificateArgs certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param preSharedKey The PreSharedKey param. Ensure that only one of the following is specified: `certificate`, `pre_shared_key`
         * 
         * @return builder
         * 
         */
        public Builder preSharedKey(@Nullable Output<IkeGatewayAuthenticationPreSharedKeyArgs> preSharedKey) {
            $.preSharedKey = preSharedKey;
            return this;
        }

        /**
         * @param preSharedKey The PreSharedKey param. Ensure that only one of the following is specified: `certificate`, `pre_shared_key`
         * 
         * @return builder
         * 
         */
        public Builder preSharedKey(IkeGatewayAuthenticationPreSharedKeyArgs preSharedKey) {
            return preSharedKey(Output.of(preSharedKey));
        }

        public IkeGatewayAuthenticationArgs build() {
            return $;
        }
    }

}
