// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IpsecTunnelTunnelMonitorArgs extends com.pulumi.resources.ResourceArgs {

    public static final IpsecTunnelTunnelMonitorArgs Empty = new IpsecTunnelTunnelMonitorArgs();

    /**
     * Destination IP to send ICMP probe.
     * 
     */
    @Import(name="destinationIp", required=true)
    private Output<String> destinationIp;

    /**
     * @return Destination IP to send ICMP probe.
     * 
     */
    public Output<String> destinationIp() {
        return this.destinationIp;
    }

    /**
     * Enable tunnel monitoring on this tunnel. Default: `true`.
     * 
     */
    @Import(name="enable")
    private @Nullable Output<Boolean> enable;

    /**
     * @return Enable tunnel monitoring on this tunnel. Default: `true`.
     * 
     */
    public Optional<Output<Boolean>> enable() {
        return Optional.ofNullable(this.enable);
    }

    /**
     * Which proxy-id (or proxy-id-v6) the monitoring traffic will use.
     * 
     */
    @Import(name="proxyId")
    private @Nullable Output<String> proxyId;

    /**
     * @return Which proxy-id (or proxy-id-v6) the monitoring traffic will use.
     * 
     */
    public Optional<Output<String>> proxyId() {
        return Optional.ofNullable(this.proxyId);
    }

    private IpsecTunnelTunnelMonitorArgs() {}

    private IpsecTunnelTunnelMonitorArgs(IpsecTunnelTunnelMonitorArgs $) {
        this.destinationIp = $.destinationIp;
        this.enable = $.enable;
        this.proxyId = $.proxyId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IpsecTunnelTunnelMonitorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IpsecTunnelTunnelMonitorArgs $;

        public Builder() {
            $ = new IpsecTunnelTunnelMonitorArgs();
        }

        public Builder(IpsecTunnelTunnelMonitorArgs defaults) {
            $ = new IpsecTunnelTunnelMonitorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinationIp Destination IP to send ICMP probe.
         * 
         * @return builder
         * 
         */
        public Builder destinationIp(Output<String> destinationIp) {
            $.destinationIp = destinationIp;
            return this;
        }

        /**
         * @param destinationIp Destination IP to send ICMP probe.
         * 
         * @return builder
         * 
         */
        public Builder destinationIp(String destinationIp) {
            return destinationIp(Output.of(destinationIp));
        }

        /**
         * @param enable Enable tunnel monitoring on this tunnel. Default: `true`.
         * 
         * @return builder
         * 
         */
        public Builder enable(@Nullable Output<Boolean> enable) {
            $.enable = enable;
            return this;
        }

        /**
         * @param enable Enable tunnel monitoring on this tunnel. Default: `true`.
         * 
         * @return builder
         * 
         */
        public Builder enable(Boolean enable) {
            return enable(Output.of(enable));
        }

        /**
         * @param proxyId Which proxy-id (or proxy-id-v6) the monitoring traffic will use.
         * 
         * @return builder
         * 
         */
        public Builder proxyId(@Nullable Output<String> proxyId) {
            $.proxyId = proxyId;
            return this;
        }

        /**
         * @param proxyId Which proxy-id (or proxy-id-v6) the monitoring traffic will use.
         * 
         * @return builder
         * 
         */
        public Builder proxyId(String proxyId) {
            return proxyId(Output.of(proxyId));
        }

        public IpsecTunnelTunnelMonitorArgs build() {
            if ($.destinationIp == null) {
                throw new MissingRequiredPropertyException("IpsecTunnelTunnelMonitorArgs", "destinationIp");
            }
            return $;
        }
    }

}
