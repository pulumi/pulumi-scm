// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetAuthenticationRuleListData {
    /**
     * @return the authentication profile name to apply to authentication rule.
     * 
     */
    private String authenticationEnforcement;
    /**
     * @return The Categories param.
     * 
     */
    private List<String> categories;
    /**
     * @return The Description param.
     * 
     */
    private String description;
    /**
     * @return The DestinationHips param.
     * 
     */
    private List<String> destinationHips;
    /**
     * @return The Destinations param.
     * 
     */
    private List<String> destinations;
    /**
     * @return The Disabled param. Default: `false`.
     * 
     */
    private Boolean disabled;
    /**
     * @return The Froms param.
     * 
     */
    private List<String> froms;
    /**
     * @return The GroupTag param.
     * 
     */
    private String groupTag;
    /**
     * @return The HipProfiles param.
     * 
     */
    private List<String> hipProfiles;
    /**
     * @return UUID of the resource.
     * 
     */
    private String id;
    /**
     * @return The LogAuthenticationTimeout param. Default: `false`.
     * 
     */
    private Boolean logAuthenticationTimeout;
    /**
     * @return The LogSetting param.
     * 
     */
    private String logSetting;
    /**
     * @return The Name param.
     * 
     */
    private String name;
    /**
     * @return The NegateDestination param. Default: `false`.
     * 
     */
    private Boolean negateDestination;
    /**
     * @return The NegateSource param. Default: `false`.
     * 
     */
    private Boolean negateSource;
    /**
     * @return The Services param.
     * 
     */
    private List<String> services;
    /**
     * @return The SourceHips param.
     * 
     */
    private List<String> sourceHips;
    /**
     * @return The SourceUsers param.
     * 
     */
    private List<String> sourceUsers;
    /**
     * @return The Sources param.
     * 
     */
    private List<String> sources;
    /**
     * @return The Tags param.
     * 
     */
    private List<String> tags;
    /**
     * @return The Timeout param. Value must be between 1 and 1440.
     * 
     */
    private Integer timeout;
    /**
     * @return The Tos param.
     * 
     */
    private List<String> tos;

    private GetAuthenticationRuleListData() {}
    /**
     * @return the authentication profile name to apply to authentication rule.
     * 
     */
    public String authenticationEnforcement() {
        return this.authenticationEnforcement;
    }
    /**
     * @return The Categories param.
     * 
     */
    public List<String> categories() {
        return this.categories;
    }
    /**
     * @return The Description param.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The DestinationHips param.
     * 
     */
    public List<String> destinationHips() {
        return this.destinationHips;
    }
    /**
     * @return The Destinations param.
     * 
     */
    public List<String> destinations() {
        return this.destinations;
    }
    /**
     * @return The Disabled param. Default: `false`.
     * 
     */
    public Boolean disabled() {
        return this.disabled;
    }
    /**
     * @return The Froms param.
     * 
     */
    public List<String> froms() {
        return this.froms;
    }
    /**
     * @return The GroupTag param.
     * 
     */
    public String groupTag() {
        return this.groupTag;
    }
    /**
     * @return The HipProfiles param.
     * 
     */
    public List<String> hipProfiles() {
        return this.hipProfiles;
    }
    /**
     * @return UUID of the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The LogAuthenticationTimeout param. Default: `false`.
     * 
     */
    public Boolean logAuthenticationTimeout() {
        return this.logAuthenticationTimeout;
    }
    /**
     * @return The LogSetting param.
     * 
     */
    public String logSetting() {
        return this.logSetting;
    }
    /**
     * @return The Name param.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The NegateDestination param. Default: `false`.
     * 
     */
    public Boolean negateDestination() {
        return this.negateDestination;
    }
    /**
     * @return The NegateSource param. Default: `false`.
     * 
     */
    public Boolean negateSource() {
        return this.negateSource;
    }
    /**
     * @return The Services param.
     * 
     */
    public List<String> services() {
        return this.services;
    }
    /**
     * @return The SourceHips param.
     * 
     */
    public List<String> sourceHips() {
        return this.sourceHips;
    }
    /**
     * @return The SourceUsers param.
     * 
     */
    public List<String> sourceUsers() {
        return this.sourceUsers;
    }
    /**
     * @return The Sources param.
     * 
     */
    public List<String> sources() {
        return this.sources;
    }
    /**
     * @return The Tags param.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return The Timeout param. Value must be between 1 and 1440.
     * 
     */
    public Integer timeout() {
        return this.timeout;
    }
    /**
     * @return The Tos param.
     * 
     */
    public List<String> tos() {
        return this.tos;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAuthenticationRuleListData defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String authenticationEnforcement;
        private List<String> categories;
        private String description;
        private List<String> destinationHips;
        private List<String> destinations;
        private Boolean disabled;
        private List<String> froms;
        private String groupTag;
        private List<String> hipProfiles;
        private String id;
        private Boolean logAuthenticationTimeout;
        private String logSetting;
        private String name;
        private Boolean negateDestination;
        private Boolean negateSource;
        private List<String> services;
        private List<String> sourceHips;
        private List<String> sourceUsers;
        private List<String> sources;
        private List<String> tags;
        private Integer timeout;
        private List<String> tos;
        public Builder() {}
        public Builder(GetAuthenticationRuleListData defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authenticationEnforcement = defaults.authenticationEnforcement;
    	      this.categories = defaults.categories;
    	      this.description = defaults.description;
    	      this.destinationHips = defaults.destinationHips;
    	      this.destinations = defaults.destinations;
    	      this.disabled = defaults.disabled;
    	      this.froms = defaults.froms;
    	      this.groupTag = defaults.groupTag;
    	      this.hipProfiles = defaults.hipProfiles;
    	      this.id = defaults.id;
    	      this.logAuthenticationTimeout = defaults.logAuthenticationTimeout;
    	      this.logSetting = defaults.logSetting;
    	      this.name = defaults.name;
    	      this.negateDestination = defaults.negateDestination;
    	      this.negateSource = defaults.negateSource;
    	      this.services = defaults.services;
    	      this.sourceHips = defaults.sourceHips;
    	      this.sourceUsers = defaults.sourceUsers;
    	      this.sources = defaults.sources;
    	      this.tags = defaults.tags;
    	      this.timeout = defaults.timeout;
    	      this.tos = defaults.tos;
        }

        @CustomType.Setter
        public Builder authenticationEnforcement(String authenticationEnforcement) {
            if (authenticationEnforcement == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationRuleListData", "authenticationEnforcement");
            }
            this.authenticationEnforcement = authenticationEnforcement;
            return this;
        }
        @CustomType.Setter
        public Builder categories(List<String> categories) {
            if (categories == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationRuleListData", "categories");
            }
            this.categories = categories;
            return this;
        }
        public Builder categories(String... categories) {
            return categories(List.of(categories));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationRuleListData", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder destinationHips(List<String> destinationHips) {
            if (destinationHips == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationRuleListData", "destinationHips");
            }
            this.destinationHips = destinationHips;
            return this;
        }
        public Builder destinationHips(String... destinationHips) {
            return destinationHips(List.of(destinationHips));
        }
        @CustomType.Setter
        public Builder destinations(List<String> destinations) {
            if (destinations == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationRuleListData", "destinations");
            }
            this.destinations = destinations;
            return this;
        }
        public Builder destinations(String... destinations) {
            return destinations(List.of(destinations));
        }
        @CustomType.Setter
        public Builder disabled(Boolean disabled) {
            if (disabled == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationRuleListData", "disabled");
            }
            this.disabled = disabled;
            return this;
        }
        @CustomType.Setter
        public Builder froms(List<String> froms) {
            if (froms == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationRuleListData", "froms");
            }
            this.froms = froms;
            return this;
        }
        public Builder froms(String... froms) {
            return froms(List.of(froms));
        }
        @CustomType.Setter
        public Builder groupTag(String groupTag) {
            if (groupTag == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationRuleListData", "groupTag");
            }
            this.groupTag = groupTag;
            return this;
        }
        @CustomType.Setter
        public Builder hipProfiles(List<String> hipProfiles) {
            if (hipProfiles == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationRuleListData", "hipProfiles");
            }
            this.hipProfiles = hipProfiles;
            return this;
        }
        public Builder hipProfiles(String... hipProfiles) {
            return hipProfiles(List.of(hipProfiles));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationRuleListData", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder logAuthenticationTimeout(Boolean logAuthenticationTimeout) {
            if (logAuthenticationTimeout == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationRuleListData", "logAuthenticationTimeout");
            }
            this.logAuthenticationTimeout = logAuthenticationTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder logSetting(String logSetting) {
            if (logSetting == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationRuleListData", "logSetting");
            }
            this.logSetting = logSetting;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationRuleListData", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder negateDestination(Boolean negateDestination) {
            if (negateDestination == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationRuleListData", "negateDestination");
            }
            this.negateDestination = negateDestination;
            return this;
        }
        @CustomType.Setter
        public Builder negateSource(Boolean negateSource) {
            if (negateSource == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationRuleListData", "negateSource");
            }
            this.negateSource = negateSource;
            return this;
        }
        @CustomType.Setter
        public Builder services(List<String> services) {
            if (services == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationRuleListData", "services");
            }
            this.services = services;
            return this;
        }
        public Builder services(String... services) {
            return services(List.of(services));
        }
        @CustomType.Setter
        public Builder sourceHips(List<String> sourceHips) {
            if (sourceHips == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationRuleListData", "sourceHips");
            }
            this.sourceHips = sourceHips;
            return this;
        }
        public Builder sourceHips(String... sourceHips) {
            return sourceHips(List.of(sourceHips));
        }
        @CustomType.Setter
        public Builder sourceUsers(List<String> sourceUsers) {
            if (sourceUsers == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationRuleListData", "sourceUsers");
            }
            this.sourceUsers = sourceUsers;
            return this;
        }
        public Builder sourceUsers(String... sourceUsers) {
            return sourceUsers(List.of(sourceUsers));
        }
        @CustomType.Setter
        public Builder sources(List<String> sources) {
            if (sources == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationRuleListData", "sources");
            }
            this.sources = sources;
            return this;
        }
        public Builder sources(String... sources) {
            return sources(List.of(sources));
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationRuleListData", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder timeout(Integer timeout) {
            if (timeout == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationRuleListData", "timeout");
            }
            this.timeout = timeout;
            return this;
        }
        @CustomType.Setter
        public Builder tos(List<String> tos) {
            if (tos == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationRuleListData", "tos");
            }
            this.tos = tos;
            return this;
        }
        public Builder tos(String... tos) {
            return tos(List.of(tos));
        }
        public GetAuthenticationRuleListData build() {
            final var _resultValue = new GetAuthenticationRuleListData();
            _resultValue.authenticationEnforcement = authenticationEnforcement;
            _resultValue.categories = categories;
            _resultValue.description = description;
            _resultValue.destinationHips = destinationHips;
            _resultValue.destinations = destinations;
            _resultValue.disabled = disabled;
            _resultValue.froms = froms;
            _resultValue.groupTag = groupTag;
            _resultValue.hipProfiles = hipProfiles;
            _resultValue.id = id;
            _resultValue.logAuthenticationTimeout = logAuthenticationTimeout;
            _resultValue.logSetting = logSetting;
            _resultValue.name = name;
            _resultValue.negateDestination = negateDestination;
            _resultValue.negateSource = negateSource;
            _resultValue.services = services;
            _resultValue.sourceHips = sourceHips;
            _resultValue.sourceUsers = sourceUsers;
            _resultValue.sources = sources;
            _resultValue.tags = tags;
            _resultValue.timeout = timeout;
            _resultValue.tos = tos;
            return _resultValue;
        }
    }
}
