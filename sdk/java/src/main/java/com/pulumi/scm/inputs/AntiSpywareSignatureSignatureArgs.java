// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.scm.inputs.AntiSpywareSignatureSignatureCombinationArgs;
import com.pulumi.scm.inputs.AntiSpywareSignatureSignatureStandardArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AntiSpywareSignatureSignatureArgs extends com.pulumi.resources.ResourceArgs {

    public static final AntiSpywareSignatureSignatureArgs Empty = new AntiSpywareSignatureSignatureArgs();

    /**
     * The Combination param. Ensure that only one of the following is specified: `combination`, `standard`
     * 
     */
    @Import(name="combination")
    private @Nullable Output<AntiSpywareSignatureSignatureCombinationArgs> combination;

    /**
     * @return The Combination param. Ensure that only one of the following is specified: `combination`, `standard`
     * 
     */
    public Optional<Output<AntiSpywareSignatureSignatureCombinationArgs>> combination() {
        return Optional.ofNullable(this.combination);
    }

    /**
     * The Standards param. Ensure that only one of the following is specified: `combination`, `standard`
     * 
     */
    @Import(name="standards")
    private @Nullable Output<List<AntiSpywareSignatureSignatureStandardArgs>> standards;

    /**
     * @return The Standards param. Ensure that only one of the following is specified: `combination`, `standard`
     * 
     */
    public Optional<Output<List<AntiSpywareSignatureSignatureStandardArgs>>> standards() {
        return Optional.ofNullable(this.standards);
    }

    private AntiSpywareSignatureSignatureArgs() {}

    private AntiSpywareSignatureSignatureArgs(AntiSpywareSignatureSignatureArgs $) {
        this.combination = $.combination;
        this.standards = $.standards;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AntiSpywareSignatureSignatureArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AntiSpywareSignatureSignatureArgs $;

        public Builder() {
            $ = new AntiSpywareSignatureSignatureArgs();
        }

        public Builder(AntiSpywareSignatureSignatureArgs defaults) {
            $ = new AntiSpywareSignatureSignatureArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param combination The Combination param. Ensure that only one of the following is specified: `combination`, `standard`
         * 
         * @return builder
         * 
         */
        public Builder combination(@Nullable Output<AntiSpywareSignatureSignatureCombinationArgs> combination) {
            $.combination = combination;
            return this;
        }

        /**
         * @param combination The Combination param. Ensure that only one of the following is specified: `combination`, `standard`
         * 
         * @return builder
         * 
         */
        public Builder combination(AntiSpywareSignatureSignatureCombinationArgs combination) {
            return combination(Output.of(combination));
        }

        /**
         * @param standards The Standards param. Ensure that only one of the following is specified: `combination`, `standard`
         * 
         * @return builder
         * 
         */
        public Builder standards(@Nullable Output<List<AntiSpywareSignatureSignatureStandardArgs>> standards) {
            $.standards = standards;
            return this;
        }

        /**
         * @param standards The Standards param. Ensure that only one of the following is specified: `combination`, `standard`
         * 
         * @return builder
         * 
         */
        public Builder standards(List<AntiSpywareSignatureSignatureStandardArgs> standards) {
            return standards(Output.of(standards));
        }

        /**
         * @param standards The Standards param. Ensure that only one of the following is specified: `combination`, `standard`
         * 
         * @return builder
         * 
         */
        public Builder standards(AntiSpywareSignatureSignatureStandardArgs... standards) {
            return standards(List.of(standards));
        }

        public AntiSpywareSignatureSignatureArgs build() {
            return $;
        }
    }

}
