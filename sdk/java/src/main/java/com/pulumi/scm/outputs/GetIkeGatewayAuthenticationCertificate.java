// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.scm.outputs.GetIkeGatewayAuthenticationCertificateLocalCertificate;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetIkeGatewayAuthenticationCertificate {
    /**
     * @return The AllowIdPayloadMismatch param.
     * 
     */
    private Boolean allowIdPayloadMismatch;
    /**
     * @return The CertificateProfile param.
     * 
     */
    private String certificateProfile;
    /**
     * @return The LocalCertificate param.
     * 
     */
    private GetIkeGatewayAuthenticationCertificateLocalCertificate localCertificate;
    /**
     * @return The StrictValidationRevocation param.
     * 
     */
    private Boolean strictValidationRevocation;
    /**
     * @return The UseManagementAsSource param.
     * 
     */
    private Boolean useManagementAsSource;

    private GetIkeGatewayAuthenticationCertificate() {}
    /**
     * @return The AllowIdPayloadMismatch param.
     * 
     */
    public Boolean allowIdPayloadMismatch() {
        return this.allowIdPayloadMismatch;
    }
    /**
     * @return The CertificateProfile param.
     * 
     */
    public String certificateProfile() {
        return this.certificateProfile;
    }
    /**
     * @return The LocalCertificate param.
     * 
     */
    public GetIkeGatewayAuthenticationCertificateLocalCertificate localCertificate() {
        return this.localCertificate;
    }
    /**
     * @return The StrictValidationRevocation param.
     * 
     */
    public Boolean strictValidationRevocation() {
        return this.strictValidationRevocation;
    }
    /**
     * @return The UseManagementAsSource param.
     * 
     */
    public Boolean useManagementAsSource() {
        return this.useManagementAsSource;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIkeGatewayAuthenticationCertificate defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean allowIdPayloadMismatch;
        private String certificateProfile;
        private GetIkeGatewayAuthenticationCertificateLocalCertificate localCertificate;
        private Boolean strictValidationRevocation;
        private Boolean useManagementAsSource;
        public Builder() {}
        public Builder(GetIkeGatewayAuthenticationCertificate defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowIdPayloadMismatch = defaults.allowIdPayloadMismatch;
    	      this.certificateProfile = defaults.certificateProfile;
    	      this.localCertificate = defaults.localCertificate;
    	      this.strictValidationRevocation = defaults.strictValidationRevocation;
    	      this.useManagementAsSource = defaults.useManagementAsSource;
        }

        @CustomType.Setter
        public Builder allowIdPayloadMismatch(Boolean allowIdPayloadMismatch) {
            if (allowIdPayloadMismatch == null) {
              throw new MissingRequiredPropertyException("GetIkeGatewayAuthenticationCertificate", "allowIdPayloadMismatch");
            }
            this.allowIdPayloadMismatch = allowIdPayloadMismatch;
            return this;
        }
        @CustomType.Setter
        public Builder certificateProfile(String certificateProfile) {
            if (certificateProfile == null) {
              throw new MissingRequiredPropertyException("GetIkeGatewayAuthenticationCertificate", "certificateProfile");
            }
            this.certificateProfile = certificateProfile;
            return this;
        }
        @CustomType.Setter
        public Builder localCertificate(GetIkeGatewayAuthenticationCertificateLocalCertificate localCertificate) {
            if (localCertificate == null) {
              throw new MissingRequiredPropertyException("GetIkeGatewayAuthenticationCertificate", "localCertificate");
            }
            this.localCertificate = localCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder strictValidationRevocation(Boolean strictValidationRevocation) {
            if (strictValidationRevocation == null) {
              throw new MissingRequiredPropertyException("GetIkeGatewayAuthenticationCertificate", "strictValidationRevocation");
            }
            this.strictValidationRevocation = strictValidationRevocation;
            return this;
        }
        @CustomType.Setter
        public Builder useManagementAsSource(Boolean useManagementAsSource) {
            if (useManagementAsSource == null) {
              throw new MissingRequiredPropertyException("GetIkeGatewayAuthenticationCertificate", "useManagementAsSource");
            }
            this.useManagementAsSource = useManagementAsSource;
            return this;
        }
        public GetIkeGatewayAuthenticationCertificate build() {
            final var _resultValue = new GetIkeGatewayAuthenticationCertificate();
            _resultValue.allowIdPayloadMismatch = allowIdPayloadMismatch;
            _resultValue.certificateProfile = certificateProfile;
            _resultValue.localCertificate = localCertificate;
            _resultValue.strictValidationRevocation = strictValidationRevocation;
            _resultValue.useManagementAsSource = useManagementAsSource;
            return _resultValue;
        }
    }
}
