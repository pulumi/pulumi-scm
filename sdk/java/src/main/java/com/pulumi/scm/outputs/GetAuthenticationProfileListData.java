// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.scm.outputs.GetAuthenticationProfileListDataLockout;
import com.pulumi.scm.outputs.GetAuthenticationProfileListDataMethod;
import com.pulumi.scm.outputs.GetAuthenticationProfileListDataMultiFactorAuth;
import com.pulumi.scm.outputs.GetAuthenticationProfileListDataSingleSignOn;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetAuthenticationProfileListData {
    /**
     * @return The AllowList param.
     * 
     */
    private List<String> allowLists;
    /**
     * @return UUID of the resource.
     * 
     */
    private String id;
    /**
     * @return The Lockout param.
     * 
     */
    private GetAuthenticationProfileListDataLockout lockout;
    /**
     * @return The Method param.
     * 
     */
    private GetAuthenticationProfileListDataMethod method;
    /**
     * @return The MultiFactorAuth param.
     * 
     */
    private GetAuthenticationProfileListDataMultiFactorAuth multiFactorAuth;
    /**
     * @return The Name param.
     * 
     */
    private String name;
    /**
     * @return The SingleSignOn param.
     * 
     */
    private GetAuthenticationProfileListDataSingleSignOn singleSignOn;
    /**
     * @return The UserDomain param. String length must not exceed 63 characters.
     * 
     */
    private String userDomain;
    /**
     * @return The UsernameModifier param. String must be one of these: `&#34;%USERINPUT%&#34;`, `&#34;%USERINPUT%{@literal @}%USERDOMAIN%&#34;`, `&#34;%USERDOMAIN%\\%USERINPUT%&#34;`.
     * 
     */
    private String usernameModifier;

    private GetAuthenticationProfileListData() {}
    /**
     * @return The AllowList param.
     * 
     */
    public List<String> allowLists() {
        return this.allowLists;
    }
    /**
     * @return UUID of the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The Lockout param.
     * 
     */
    public GetAuthenticationProfileListDataLockout lockout() {
        return this.lockout;
    }
    /**
     * @return The Method param.
     * 
     */
    public GetAuthenticationProfileListDataMethod method() {
        return this.method;
    }
    /**
     * @return The MultiFactorAuth param.
     * 
     */
    public GetAuthenticationProfileListDataMultiFactorAuth multiFactorAuth() {
        return this.multiFactorAuth;
    }
    /**
     * @return The Name param.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The SingleSignOn param.
     * 
     */
    public GetAuthenticationProfileListDataSingleSignOn singleSignOn() {
        return this.singleSignOn;
    }
    /**
     * @return The UserDomain param. String length must not exceed 63 characters.
     * 
     */
    public String userDomain() {
        return this.userDomain;
    }
    /**
     * @return The UsernameModifier param. String must be one of these: `&#34;%USERINPUT%&#34;`, `&#34;%USERINPUT%{@literal @}%USERDOMAIN%&#34;`, `&#34;%USERDOMAIN%\\%USERINPUT%&#34;`.
     * 
     */
    public String usernameModifier() {
        return this.usernameModifier;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAuthenticationProfileListData defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> allowLists;
        private String id;
        private GetAuthenticationProfileListDataLockout lockout;
        private GetAuthenticationProfileListDataMethod method;
        private GetAuthenticationProfileListDataMultiFactorAuth multiFactorAuth;
        private String name;
        private GetAuthenticationProfileListDataSingleSignOn singleSignOn;
        private String userDomain;
        private String usernameModifier;
        public Builder() {}
        public Builder(GetAuthenticationProfileListData defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowLists = defaults.allowLists;
    	      this.id = defaults.id;
    	      this.lockout = defaults.lockout;
    	      this.method = defaults.method;
    	      this.multiFactorAuth = defaults.multiFactorAuth;
    	      this.name = defaults.name;
    	      this.singleSignOn = defaults.singleSignOn;
    	      this.userDomain = defaults.userDomain;
    	      this.usernameModifier = defaults.usernameModifier;
        }

        @CustomType.Setter
        public Builder allowLists(List<String> allowLists) {
            if (allowLists == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationProfileListData", "allowLists");
            }
            this.allowLists = allowLists;
            return this;
        }
        public Builder allowLists(String... allowLists) {
            return allowLists(List.of(allowLists));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationProfileListData", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lockout(GetAuthenticationProfileListDataLockout lockout) {
            if (lockout == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationProfileListData", "lockout");
            }
            this.lockout = lockout;
            return this;
        }
        @CustomType.Setter
        public Builder method(GetAuthenticationProfileListDataMethod method) {
            if (method == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationProfileListData", "method");
            }
            this.method = method;
            return this;
        }
        @CustomType.Setter
        public Builder multiFactorAuth(GetAuthenticationProfileListDataMultiFactorAuth multiFactorAuth) {
            if (multiFactorAuth == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationProfileListData", "multiFactorAuth");
            }
            this.multiFactorAuth = multiFactorAuth;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationProfileListData", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder singleSignOn(GetAuthenticationProfileListDataSingleSignOn singleSignOn) {
            if (singleSignOn == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationProfileListData", "singleSignOn");
            }
            this.singleSignOn = singleSignOn;
            return this;
        }
        @CustomType.Setter
        public Builder userDomain(String userDomain) {
            if (userDomain == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationProfileListData", "userDomain");
            }
            this.userDomain = userDomain;
            return this;
        }
        @CustomType.Setter
        public Builder usernameModifier(String usernameModifier) {
            if (usernameModifier == null) {
              throw new MissingRequiredPropertyException("GetAuthenticationProfileListData", "usernameModifier");
            }
            this.usernameModifier = usernameModifier;
            return this;
        }
        public GetAuthenticationProfileListData build() {
            final var _resultValue = new GetAuthenticationProfileListData();
            _resultValue.allowLists = allowLists;
            _resultValue.id = id;
            _resultValue.lockout = lockout;
            _resultValue.method = method;
            _resultValue.multiFactorAuth = multiFactorAuth;
            _resultValue.name = name;
            _resultValue.singleSignOn = singleSignOn;
            _resultValue.userDomain = userDomain;
            _resultValue.usernameModifier = usernameModifier;
            return _resultValue;
        }
    }
}
