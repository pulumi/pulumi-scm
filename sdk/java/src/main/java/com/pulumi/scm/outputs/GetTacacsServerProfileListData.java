// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.scm.outputs.GetTacacsServerProfileListDataServer;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTacacsServerProfileListData {
    /**
     * @return UUID of the resource.
     * 
     */
    private String id;
    /**
     * @return The Protocol param. String must be one of these: `&#34;CHAP&#34;`, `&#34;PAP&#34;`.
     * 
     */
    private String protocol;
    /**
     * @return The Servers param.
     * 
     */
    private List<GetTacacsServerProfileListDataServer> servers;
    /**
     * @return The Timeout param. Value must be between 1 and 30.
     * 
     */
    private Integer timeout;
    /**
     * @return The UseSingleConnection param.
     * 
     */
    private Boolean useSingleConnection;

    private GetTacacsServerProfileListData() {}
    /**
     * @return UUID of the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The Protocol param. String must be one of these: `&#34;CHAP&#34;`, `&#34;PAP&#34;`.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return The Servers param.
     * 
     */
    public List<GetTacacsServerProfileListDataServer> servers() {
        return this.servers;
    }
    /**
     * @return The Timeout param. Value must be between 1 and 30.
     * 
     */
    public Integer timeout() {
        return this.timeout;
    }
    /**
     * @return The UseSingleConnection param.
     * 
     */
    public Boolean useSingleConnection() {
        return this.useSingleConnection;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTacacsServerProfileListData defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private String protocol;
        private List<GetTacacsServerProfileListDataServer> servers;
        private Integer timeout;
        private Boolean useSingleConnection;
        public Builder() {}
        public Builder(GetTacacsServerProfileListData defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.protocol = defaults.protocol;
    	      this.servers = defaults.servers;
    	      this.timeout = defaults.timeout;
    	      this.useSingleConnection = defaults.useSingleConnection;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetTacacsServerProfileListData", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetTacacsServerProfileListData", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder servers(List<GetTacacsServerProfileListDataServer> servers) {
            if (servers == null) {
              throw new MissingRequiredPropertyException("GetTacacsServerProfileListData", "servers");
            }
            this.servers = servers;
            return this;
        }
        public Builder servers(GetTacacsServerProfileListDataServer... servers) {
            return servers(List.of(servers));
        }
        @CustomType.Setter
        public Builder timeout(Integer timeout) {
            if (timeout == null) {
              throw new MissingRequiredPropertyException("GetTacacsServerProfileListData", "timeout");
            }
            this.timeout = timeout;
            return this;
        }
        @CustomType.Setter
        public Builder useSingleConnection(Boolean useSingleConnection) {
            if (useSingleConnection == null) {
              throw new MissingRequiredPropertyException("GetTacacsServerProfileListData", "useSingleConnection");
            }
            this.useSingleConnection = useSingleConnection;
            return this;
        }
        public GetTacacsServerProfileListData build() {
            final var _resultValue = new GetTacacsServerProfileListData();
            _resultValue.id = id;
            _resultValue.protocol = protocol;
            _resultValue.servers = servers;
            _resultValue.timeout = timeout;
            _resultValue.useSingleConnection = useSingleConnection;
            return _resultValue;
        }
    }
}
