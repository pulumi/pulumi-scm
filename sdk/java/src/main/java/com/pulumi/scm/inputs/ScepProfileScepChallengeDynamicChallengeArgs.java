// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScepProfileScepChallengeDynamicChallengeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScepProfileScepChallengeDynamicChallengeArgs Empty = new ScepProfileScepChallengeDynamicChallengeArgs();

    /**
     * The OtpServerUrl param. String length must not exceed 255 characters.
     * 
     */
    @Import(name="otpServerUrl")
    private @Nullable Output<String> otpServerUrl;

    /**
     * @return The OtpServerUrl param. String length must not exceed 255 characters.
     * 
     */
    public Optional<Output<String>> otpServerUrl() {
        return Optional.ofNullable(this.otpServerUrl);
    }

    /**
     * The Password param. String length must not exceed 255 characters.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The Password param. String length must not exceed 255 characters.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The Username param. String length must not exceed 255 characters.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The Username param. String length must not exceed 255 characters.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private ScepProfileScepChallengeDynamicChallengeArgs() {}

    private ScepProfileScepChallengeDynamicChallengeArgs(ScepProfileScepChallengeDynamicChallengeArgs $) {
        this.otpServerUrl = $.otpServerUrl;
        this.password = $.password;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScepProfileScepChallengeDynamicChallengeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScepProfileScepChallengeDynamicChallengeArgs $;

        public Builder() {
            $ = new ScepProfileScepChallengeDynamicChallengeArgs();
        }

        public Builder(ScepProfileScepChallengeDynamicChallengeArgs defaults) {
            $ = new ScepProfileScepChallengeDynamicChallengeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param otpServerUrl The OtpServerUrl param. String length must not exceed 255 characters.
         * 
         * @return builder
         * 
         */
        public Builder otpServerUrl(@Nullable Output<String> otpServerUrl) {
            $.otpServerUrl = otpServerUrl;
            return this;
        }

        /**
         * @param otpServerUrl The OtpServerUrl param. String length must not exceed 255 characters.
         * 
         * @return builder
         * 
         */
        public Builder otpServerUrl(String otpServerUrl) {
            return otpServerUrl(Output.of(otpServerUrl));
        }

        /**
         * @param password The Password param. String length must not exceed 255 characters.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The Password param. String length must not exceed 255 characters.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param username The Username param. String length must not exceed 255 characters.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The Username param. String length must not exceed 255 characters.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ScepProfileScepChallengeDynamicChallengeArgs build() {
            return $;
        }
    }

}
