// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.scm.inputs.RemoteNetworkEcmpTunnelProtocolArgs;
import java.lang.String;
import java.util.Objects;


public final class RemoteNetworkEcmpTunnelArgs extends com.pulumi.resources.ResourceArgs {

    public static final RemoteNetworkEcmpTunnelArgs Empty = new RemoteNetworkEcmpTunnelArgs();

    /**
     * The IpsecTunnel param.
     * 
     */
    @Import(name="ipsecTunnel", required=true)
    private Output<String> ipsecTunnel;

    /**
     * @return The IpsecTunnel param.
     * 
     */
    public Output<String> ipsecTunnel() {
        return this.ipsecTunnel;
    }

    /**
     * The Name param.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The Name param.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The Protocol param.
     * 
     */
    @Import(name="protocol", required=true)
    private Output<RemoteNetworkEcmpTunnelProtocolArgs> protocol;

    /**
     * @return The Protocol param.
     * 
     */
    public Output<RemoteNetworkEcmpTunnelProtocolArgs> protocol() {
        return this.protocol;
    }

    private RemoteNetworkEcmpTunnelArgs() {}

    private RemoteNetworkEcmpTunnelArgs(RemoteNetworkEcmpTunnelArgs $) {
        this.ipsecTunnel = $.ipsecTunnel;
        this.name = $.name;
        this.protocol = $.protocol;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RemoteNetworkEcmpTunnelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RemoteNetworkEcmpTunnelArgs $;

        public Builder() {
            $ = new RemoteNetworkEcmpTunnelArgs();
        }

        public Builder(RemoteNetworkEcmpTunnelArgs defaults) {
            $ = new RemoteNetworkEcmpTunnelArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ipsecTunnel The IpsecTunnel param.
         * 
         * @return builder
         * 
         */
        public Builder ipsecTunnel(Output<String> ipsecTunnel) {
            $.ipsecTunnel = ipsecTunnel;
            return this;
        }

        /**
         * @param ipsecTunnel The IpsecTunnel param.
         * 
         * @return builder
         * 
         */
        public Builder ipsecTunnel(String ipsecTunnel) {
            return ipsecTunnel(Output.of(ipsecTunnel));
        }

        /**
         * @param name The Name param.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The Name param.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param protocol The Protocol param.
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<RemoteNetworkEcmpTunnelProtocolArgs> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The Protocol param.
         * 
         * @return builder
         * 
         */
        public Builder protocol(RemoteNetworkEcmpTunnelProtocolArgs protocol) {
            return protocol(Output.of(protocol));
        }

        public RemoteNetworkEcmpTunnelArgs build() {
            if ($.ipsecTunnel == null) {
                throw new MissingRequiredPropertyException("RemoteNetworkEcmpTunnelArgs", "ipsecTunnel");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("RemoteNetworkEcmpTunnelArgs", "name");
            }
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("RemoteNetworkEcmpTunnelArgs", "protocol");
            }
            return $;
        }
    }

}
