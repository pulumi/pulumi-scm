// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.scm.outputs.GetIkeGatewayAuthentication;
import com.pulumi.scm.outputs.GetIkeGatewayLocalId;
import com.pulumi.scm.outputs.GetIkeGatewayPeerAddress;
import com.pulumi.scm.outputs.GetIkeGatewayPeerId;
import com.pulumi.scm.outputs.GetIkeGatewayProtocol;
import com.pulumi.scm.outputs.GetIkeGatewayProtocolCommon;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetIkeGatewayResult {
    /**
     * @return The Authentication param.
     * 
     */
    private GetIkeGatewayAuthentication authentication;
    /**
     * @return The Device param.
     * 
     */
    private @Nullable String device;
    /**
     * @return The Folder param.
     * 
     */
    private @Nullable String folder;
    /**
     * @return The Id param.
     * 
     */
    private String id;
    /**
     * @return The LocalId param.
     * 
     */
    private GetIkeGatewayLocalId localId;
    /**
     * @return Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
     * 
     */
    private String name;
    /**
     * @return The PeerAddress param.
     * 
     */
    private GetIkeGatewayPeerAddress peerAddress;
    /**
     * @return The PeerId param.
     * 
     */
    private GetIkeGatewayPeerId peerId;
    /**
     * @return The Protocol param.
     * 
     */
    private GetIkeGatewayProtocol protocol;
    /**
     * @return The ProtocolCommon param.
     * 
     */
    private GetIkeGatewayProtocolCommon protocolCommon;
    /**
     * @return The Snippet param.
     * 
     */
    private @Nullable String snippet;
    private String tfid;

    private GetIkeGatewayResult() {}
    /**
     * @return The Authentication param.
     * 
     */
    public GetIkeGatewayAuthentication authentication() {
        return this.authentication;
    }
    /**
     * @return The Device param.
     * 
     */
    public Optional<String> device() {
        return Optional.ofNullable(this.device);
    }
    /**
     * @return The Folder param.
     * 
     */
    public Optional<String> folder() {
        return Optional.ofNullable(this.folder);
    }
    /**
     * @return The Id param.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The LocalId param.
     * 
     */
    public GetIkeGatewayLocalId localId() {
        return this.localId;
    }
    /**
     * @return Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The PeerAddress param.
     * 
     */
    public GetIkeGatewayPeerAddress peerAddress() {
        return this.peerAddress;
    }
    /**
     * @return The PeerId param.
     * 
     */
    public GetIkeGatewayPeerId peerId() {
        return this.peerId;
    }
    /**
     * @return The Protocol param.
     * 
     */
    public GetIkeGatewayProtocol protocol() {
        return this.protocol;
    }
    /**
     * @return The ProtocolCommon param.
     * 
     */
    public GetIkeGatewayProtocolCommon protocolCommon() {
        return this.protocolCommon;
    }
    /**
     * @return The Snippet param.
     * 
     */
    public Optional<String> snippet() {
        return Optional.ofNullable(this.snippet);
    }
    public String tfid() {
        return this.tfid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIkeGatewayResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetIkeGatewayAuthentication authentication;
        private @Nullable String device;
        private @Nullable String folder;
        private String id;
        private GetIkeGatewayLocalId localId;
        private String name;
        private GetIkeGatewayPeerAddress peerAddress;
        private GetIkeGatewayPeerId peerId;
        private GetIkeGatewayProtocol protocol;
        private GetIkeGatewayProtocolCommon protocolCommon;
        private @Nullable String snippet;
        private String tfid;
        public Builder() {}
        public Builder(GetIkeGatewayResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authentication = defaults.authentication;
    	      this.device = defaults.device;
    	      this.folder = defaults.folder;
    	      this.id = defaults.id;
    	      this.localId = defaults.localId;
    	      this.name = defaults.name;
    	      this.peerAddress = defaults.peerAddress;
    	      this.peerId = defaults.peerId;
    	      this.protocol = defaults.protocol;
    	      this.protocolCommon = defaults.protocolCommon;
    	      this.snippet = defaults.snippet;
    	      this.tfid = defaults.tfid;
        }

        @CustomType.Setter
        public Builder authentication(GetIkeGatewayAuthentication authentication) {
            if (authentication == null) {
              throw new MissingRequiredPropertyException("GetIkeGatewayResult", "authentication");
            }
            this.authentication = authentication;
            return this;
        }
        @CustomType.Setter
        public Builder device(@Nullable String device) {

            this.device = device;
            return this;
        }
        @CustomType.Setter
        public Builder folder(@Nullable String folder) {

            this.folder = folder;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetIkeGatewayResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder localId(GetIkeGatewayLocalId localId) {
            if (localId == null) {
              throw new MissingRequiredPropertyException("GetIkeGatewayResult", "localId");
            }
            this.localId = localId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetIkeGatewayResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder peerAddress(GetIkeGatewayPeerAddress peerAddress) {
            if (peerAddress == null) {
              throw new MissingRequiredPropertyException("GetIkeGatewayResult", "peerAddress");
            }
            this.peerAddress = peerAddress;
            return this;
        }
        @CustomType.Setter
        public Builder peerId(GetIkeGatewayPeerId peerId) {
            if (peerId == null) {
              throw new MissingRequiredPropertyException("GetIkeGatewayResult", "peerId");
            }
            this.peerId = peerId;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(GetIkeGatewayProtocol protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetIkeGatewayResult", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder protocolCommon(GetIkeGatewayProtocolCommon protocolCommon) {
            if (protocolCommon == null) {
              throw new MissingRequiredPropertyException("GetIkeGatewayResult", "protocolCommon");
            }
            this.protocolCommon = protocolCommon;
            return this;
        }
        @CustomType.Setter
        public Builder snippet(@Nullable String snippet) {

            this.snippet = snippet;
            return this;
        }
        @CustomType.Setter
        public Builder tfid(String tfid) {
            if (tfid == null) {
              throw new MissingRequiredPropertyException("GetIkeGatewayResult", "tfid");
            }
            this.tfid = tfid;
            return this;
        }
        public GetIkeGatewayResult build() {
            final var _resultValue = new GetIkeGatewayResult();
            _resultValue.authentication = authentication;
            _resultValue.device = device;
            _resultValue.folder = folder;
            _resultValue.id = id;
            _resultValue.localId = localId;
            _resultValue.name = name;
            _resultValue.peerAddress = peerAddress;
            _resultValue.peerId = peerId;
            _resultValue.protocol = protocol;
            _resultValue.protocolCommon = protocolCommon;
            _resultValue.snippet = snippet;
            _resultValue.tfid = tfid;
            return _resultValue;
        }
    }
}
