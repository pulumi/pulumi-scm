// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationSignatureAndConditionOrConditionOperatorEqualToArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationSignatureAndConditionOrConditionOperatorEqualToArgs Empty = new ApplicationSignatureAndConditionOrConditionOperatorEqualToArgs();

    /**
     * The Context param.
     * 
     */
    @Import(name="context", required=true)
    private Output<String> context;

    /**
     * @return The Context param.
     * 
     */
    public Output<String> context() {
        return this.context;
    }

    /**
     * 4-byte hex value. String length must not exceed 10 characters. String validation regex: `^[0][xX][0-9A-Fa-f]{8}$`.
     * 
     */
    @Import(name="mask")
    private @Nullable Output<String> mask;

    /**
     * @return 4-byte hex value. String length must not exceed 10 characters. String validation regex: `^[0][xX][0-9A-Fa-f]{8}$`.
     * 
     */
    public Optional<Output<String>> mask() {
        return Optional.ofNullable(this.mask);
    }

    /**
     * The Position param. String length must not exceed 127 characters.
     * 
     */
    @Import(name="position")
    private @Nullable Output<String> position;

    /**
     * @return The Position param. String length must not exceed 127 characters.
     * 
     */
    public Optional<Output<String>> position() {
        return Optional.ofNullable(this.position);
    }

    /**
     * The Value param. String length must not exceed 10 characters.
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    /**
     * @return The Value param. String length must not exceed 10 characters.
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    private ApplicationSignatureAndConditionOrConditionOperatorEqualToArgs() {}

    private ApplicationSignatureAndConditionOrConditionOperatorEqualToArgs(ApplicationSignatureAndConditionOrConditionOperatorEqualToArgs $) {
        this.context = $.context;
        this.mask = $.mask;
        this.position = $.position;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationSignatureAndConditionOrConditionOperatorEqualToArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationSignatureAndConditionOrConditionOperatorEqualToArgs $;

        public Builder() {
            $ = new ApplicationSignatureAndConditionOrConditionOperatorEqualToArgs();
        }

        public Builder(ApplicationSignatureAndConditionOrConditionOperatorEqualToArgs defaults) {
            $ = new ApplicationSignatureAndConditionOrConditionOperatorEqualToArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param context The Context param.
         * 
         * @return builder
         * 
         */
        public Builder context(Output<String> context) {
            $.context = context;
            return this;
        }

        /**
         * @param context The Context param.
         * 
         * @return builder
         * 
         */
        public Builder context(String context) {
            return context(Output.of(context));
        }

        /**
         * @param mask 4-byte hex value. String length must not exceed 10 characters. String validation regex: `^[0][xX][0-9A-Fa-f]{8}$`.
         * 
         * @return builder
         * 
         */
        public Builder mask(@Nullable Output<String> mask) {
            $.mask = mask;
            return this;
        }

        /**
         * @param mask 4-byte hex value. String length must not exceed 10 characters. String validation regex: `^[0][xX][0-9A-Fa-f]{8}$`.
         * 
         * @return builder
         * 
         */
        public Builder mask(String mask) {
            return mask(Output.of(mask));
        }

        /**
         * @param position The Position param. String length must not exceed 127 characters.
         * 
         * @return builder
         * 
         */
        public Builder position(@Nullable Output<String> position) {
            $.position = position;
            return this;
        }

        /**
         * @param position The Position param. String length must not exceed 127 characters.
         * 
         * @return builder
         * 
         */
        public Builder position(String position) {
            return position(Output.of(position));
        }

        /**
         * @param value The Value param. String length must not exceed 10 characters.
         * 
         * @return builder
         * 
         */
        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The Value param. String length must not exceed 10 characters.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public ApplicationSignatureAndConditionOrConditionOperatorEqualToArgs build() {
            if ($.context == null) {
                throw new MissingRequiredPropertyException("ApplicationSignatureAndConditionOrConditionOperatorEqualToArgs", "context");
            }
            if ($.value == null) {
                throw new MissingRequiredPropertyException("ApplicationSignatureAndConditionOrConditionOperatorEqualToArgs", "value");
            }
            return $;
        }
    }

}
