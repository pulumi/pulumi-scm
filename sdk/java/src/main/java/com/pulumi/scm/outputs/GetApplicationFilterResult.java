// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.scm.outputs.GetApplicationFilterTagging;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetApplicationFilterResult {
    /**
     * @return The Categories param. Individual elements in this list are subject to additional validation. String length must not exceed 128 characters.
     * 
     */
    private List<String> categories;
    /**
     * @return only True is a valid value.
     * 
     */
    private Boolean evasive;
    /**
     * @return only True is a valid value.
     * 
     */
    private Boolean excessiveBandwidthUse;
    /**
     * @return The Excludes param. Individual elements in this list are subject to additional validation. String length must not exceed 63 characters.
     * 
     */
    private List<String> excludes;
    /**
     * @return only True is a valid value.
     * 
     */
    private Boolean hasKnownVulnerabilities;
    /**
     * @return The Id param.
     * 
     */
    private String id;
    /**
     * @return only True is a valid value.
     * 
     */
    private Boolean isSaas;
    /**
     * @return Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
     * 
     */
    private String name;
    /**
     * @return only True is a valid value.
     * 
     */
    private Boolean newAppid;
    /**
     * @return only True is a valid value.
     * 
     */
    private Boolean pervasive;
    /**
     * @return only True is a valid value.
     * 
     */
    private Boolean proneToMisuse;
    /**
     * @return The Risks param. Individual elements in this list are subject to additional validation. Value must be between 1 and 5.
     * 
     */
    private List<Integer> risks;
    /**
     * @return The SaasCertifications param. Individual elements in this list are subject to additional validation. String length must not exceed 32 characters.
     * 
     */
    private List<String> saasCertifications;
    /**
     * @return The SaasRisks param. Individual elements in this list are subject to additional validation. String length must not exceed 32 characters.
     * 
     */
    private List<String> saasRisks;
    /**
     * @return The Subcategories param. Individual elements in this list are subject to additional validation. String length must not exceed 128 characters.
     * 
     */
    private List<String> subcategories;
    /**
     * @return The Tagging param.
     * 
     */
    private GetApplicationFilterTagging tagging;
    /**
     * @return The Technologies param. Individual elements in this list are subject to additional validation. String length must not exceed 128 characters.
     * 
     */
    private List<String> technologies;
    private String tfid;
    /**
     * @return only True is a valid value.
     * 
     */
    private Boolean transfersFiles;
    /**
     * @return only True is a valid value.
     * 
     */
    private Boolean tunnelsOtherApps;
    /**
     * @return only True is a valid value.
     * 
     */
    private Boolean usedByMalware;

    private GetApplicationFilterResult() {}
    /**
     * @return The Categories param. Individual elements in this list are subject to additional validation. String length must not exceed 128 characters.
     * 
     */
    public List<String> categories() {
        return this.categories;
    }
    /**
     * @return only True is a valid value.
     * 
     */
    public Boolean evasive() {
        return this.evasive;
    }
    /**
     * @return only True is a valid value.
     * 
     */
    public Boolean excessiveBandwidthUse() {
        return this.excessiveBandwidthUse;
    }
    /**
     * @return The Excludes param. Individual elements in this list are subject to additional validation. String length must not exceed 63 characters.
     * 
     */
    public List<String> excludes() {
        return this.excludes;
    }
    /**
     * @return only True is a valid value.
     * 
     */
    public Boolean hasKnownVulnerabilities() {
        return this.hasKnownVulnerabilities;
    }
    /**
     * @return The Id param.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return only True is a valid value.
     * 
     */
    public Boolean isSaas() {
        return this.isSaas;
    }
    /**
     * @return Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return only True is a valid value.
     * 
     */
    public Boolean newAppid() {
        return this.newAppid;
    }
    /**
     * @return only True is a valid value.
     * 
     */
    public Boolean pervasive() {
        return this.pervasive;
    }
    /**
     * @return only True is a valid value.
     * 
     */
    public Boolean proneToMisuse() {
        return this.proneToMisuse;
    }
    /**
     * @return The Risks param. Individual elements in this list are subject to additional validation. Value must be between 1 and 5.
     * 
     */
    public List<Integer> risks() {
        return this.risks;
    }
    /**
     * @return The SaasCertifications param. Individual elements in this list are subject to additional validation. String length must not exceed 32 characters.
     * 
     */
    public List<String> saasCertifications() {
        return this.saasCertifications;
    }
    /**
     * @return The SaasRisks param. Individual elements in this list are subject to additional validation. String length must not exceed 32 characters.
     * 
     */
    public List<String> saasRisks() {
        return this.saasRisks;
    }
    /**
     * @return The Subcategories param. Individual elements in this list are subject to additional validation. String length must not exceed 128 characters.
     * 
     */
    public List<String> subcategories() {
        return this.subcategories;
    }
    /**
     * @return The Tagging param.
     * 
     */
    public GetApplicationFilterTagging tagging() {
        return this.tagging;
    }
    /**
     * @return The Technologies param. Individual elements in this list are subject to additional validation. String length must not exceed 128 characters.
     * 
     */
    public List<String> technologies() {
        return this.technologies;
    }
    public String tfid() {
        return this.tfid;
    }
    /**
     * @return only True is a valid value.
     * 
     */
    public Boolean transfersFiles() {
        return this.transfersFiles;
    }
    /**
     * @return only True is a valid value.
     * 
     */
    public Boolean tunnelsOtherApps() {
        return this.tunnelsOtherApps;
    }
    /**
     * @return only True is a valid value.
     * 
     */
    public Boolean usedByMalware() {
        return this.usedByMalware;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplicationFilterResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> categories;
        private Boolean evasive;
        private Boolean excessiveBandwidthUse;
        private List<String> excludes;
        private Boolean hasKnownVulnerabilities;
        private String id;
        private Boolean isSaas;
        private String name;
        private Boolean newAppid;
        private Boolean pervasive;
        private Boolean proneToMisuse;
        private List<Integer> risks;
        private List<String> saasCertifications;
        private List<String> saasRisks;
        private List<String> subcategories;
        private GetApplicationFilterTagging tagging;
        private List<String> technologies;
        private String tfid;
        private Boolean transfersFiles;
        private Boolean tunnelsOtherApps;
        private Boolean usedByMalware;
        public Builder() {}
        public Builder(GetApplicationFilterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.categories = defaults.categories;
    	      this.evasive = defaults.evasive;
    	      this.excessiveBandwidthUse = defaults.excessiveBandwidthUse;
    	      this.excludes = defaults.excludes;
    	      this.hasKnownVulnerabilities = defaults.hasKnownVulnerabilities;
    	      this.id = defaults.id;
    	      this.isSaas = defaults.isSaas;
    	      this.name = defaults.name;
    	      this.newAppid = defaults.newAppid;
    	      this.pervasive = defaults.pervasive;
    	      this.proneToMisuse = defaults.proneToMisuse;
    	      this.risks = defaults.risks;
    	      this.saasCertifications = defaults.saasCertifications;
    	      this.saasRisks = defaults.saasRisks;
    	      this.subcategories = defaults.subcategories;
    	      this.tagging = defaults.tagging;
    	      this.technologies = defaults.technologies;
    	      this.tfid = defaults.tfid;
    	      this.transfersFiles = defaults.transfersFiles;
    	      this.tunnelsOtherApps = defaults.tunnelsOtherApps;
    	      this.usedByMalware = defaults.usedByMalware;
        }

        @CustomType.Setter
        public Builder categories(List<String> categories) {
            if (categories == null) {
              throw new MissingRequiredPropertyException("GetApplicationFilterResult", "categories");
            }
            this.categories = categories;
            return this;
        }
        public Builder categories(String... categories) {
            return categories(List.of(categories));
        }
        @CustomType.Setter
        public Builder evasive(Boolean evasive) {
            if (evasive == null) {
              throw new MissingRequiredPropertyException("GetApplicationFilterResult", "evasive");
            }
            this.evasive = evasive;
            return this;
        }
        @CustomType.Setter
        public Builder excessiveBandwidthUse(Boolean excessiveBandwidthUse) {
            if (excessiveBandwidthUse == null) {
              throw new MissingRequiredPropertyException("GetApplicationFilterResult", "excessiveBandwidthUse");
            }
            this.excessiveBandwidthUse = excessiveBandwidthUse;
            return this;
        }
        @CustomType.Setter
        public Builder excludes(List<String> excludes) {
            if (excludes == null) {
              throw new MissingRequiredPropertyException("GetApplicationFilterResult", "excludes");
            }
            this.excludes = excludes;
            return this;
        }
        public Builder excludes(String... excludes) {
            return excludes(List.of(excludes));
        }
        @CustomType.Setter
        public Builder hasKnownVulnerabilities(Boolean hasKnownVulnerabilities) {
            if (hasKnownVulnerabilities == null) {
              throw new MissingRequiredPropertyException("GetApplicationFilterResult", "hasKnownVulnerabilities");
            }
            this.hasKnownVulnerabilities = hasKnownVulnerabilities;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetApplicationFilterResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isSaas(Boolean isSaas) {
            if (isSaas == null) {
              throw new MissingRequiredPropertyException("GetApplicationFilterResult", "isSaas");
            }
            this.isSaas = isSaas;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetApplicationFilterResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder newAppid(Boolean newAppid) {
            if (newAppid == null) {
              throw new MissingRequiredPropertyException("GetApplicationFilterResult", "newAppid");
            }
            this.newAppid = newAppid;
            return this;
        }
        @CustomType.Setter
        public Builder pervasive(Boolean pervasive) {
            if (pervasive == null) {
              throw new MissingRequiredPropertyException("GetApplicationFilterResult", "pervasive");
            }
            this.pervasive = pervasive;
            return this;
        }
        @CustomType.Setter
        public Builder proneToMisuse(Boolean proneToMisuse) {
            if (proneToMisuse == null) {
              throw new MissingRequiredPropertyException("GetApplicationFilterResult", "proneToMisuse");
            }
            this.proneToMisuse = proneToMisuse;
            return this;
        }
        @CustomType.Setter
        public Builder risks(List<Integer> risks) {
            if (risks == null) {
              throw new MissingRequiredPropertyException("GetApplicationFilterResult", "risks");
            }
            this.risks = risks;
            return this;
        }
        public Builder risks(Integer... risks) {
            return risks(List.of(risks));
        }
        @CustomType.Setter
        public Builder saasCertifications(List<String> saasCertifications) {
            if (saasCertifications == null) {
              throw new MissingRequiredPropertyException("GetApplicationFilterResult", "saasCertifications");
            }
            this.saasCertifications = saasCertifications;
            return this;
        }
        public Builder saasCertifications(String... saasCertifications) {
            return saasCertifications(List.of(saasCertifications));
        }
        @CustomType.Setter
        public Builder saasRisks(List<String> saasRisks) {
            if (saasRisks == null) {
              throw new MissingRequiredPropertyException("GetApplicationFilterResult", "saasRisks");
            }
            this.saasRisks = saasRisks;
            return this;
        }
        public Builder saasRisks(String... saasRisks) {
            return saasRisks(List.of(saasRisks));
        }
        @CustomType.Setter
        public Builder subcategories(List<String> subcategories) {
            if (subcategories == null) {
              throw new MissingRequiredPropertyException("GetApplicationFilterResult", "subcategories");
            }
            this.subcategories = subcategories;
            return this;
        }
        public Builder subcategories(String... subcategories) {
            return subcategories(List.of(subcategories));
        }
        @CustomType.Setter
        public Builder tagging(GetApplicationFilterTagging tagging) {
            if (tagging == null) {
              throw new MissingRequiredPropertyException("GetApplicationFilterResult", "tagging");
            }
            this.tagging = tagging;
            return this;
        }
        @CustomType.Setter
        public Builder technologies(List<String> technologies) {
            if (technologies == null) {
              throw new MissingRequiredPropertyException("GetApplicationFilterResult", "technologies");
            }
            this.technologies = technologies;
            return this;
        }
        public Builder technologies(String... technologies) {
            return technologies(List.of(technologies));
        }
        @CustomType.Setter
        public Builder tfid(String tfid) {
            if (tfid == null) {
              throw new MissingRequiredPropertyException("GetApplicationFilterResult", "tfid");
            }
            this.tfid = tfid;
            return this;
        }
        @CustomType.Setter
        public Builder transfersFiles(Boolean transfersFiles) {
            if (transfersFiles == null) {
              throw new MissingRequiredPropertyException("GetApplicationFilterResult", "transfersFiles");
            }
            this.transfersFiles = transfersFiles;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelsOtherApps(Boolean tunnelsOtherApps) {
            if (tunnelsOtherApps == null) {
              throw new MissingRequiredPropertyException("GetApplicationFilterResult", "tunnelsOtherApps");
            }
            this.tunnelsOtherApps = tunnelsOtherApps;
            return this;
        }
        @CustomType.Setter
        public Builder usedByMalware(Boolean usedByMalware) {
            if (usedByMalware == null) {
              throw new MissingRequiredPropertyException("GetApplicationFilterResult", "usedByMalware");
            }
            this.usedByMalware = usedByMalware;
            return this;
        }
        public GetApplicationFilterResult build() {
            final var _resultValue = new GetApplicationFilterResult();
            _resultValue.categories = categories;
            _resultValue.evasive = evasive;
            _resultValue.excessiveBandwidthUse = excessiveBandwidthUse;
            _resultValue.excludes = excludes;
            _resultValue.hasKnownVulnerabilities = hasKnownVulnerabilities;
            _resultValue.id = id;
            _resultValue.isSaas = isSaas;
            _resultValue.name = name;
            _resultValue.newAppid = newAppid;
            _resultValue.pervasive = pervasive;
            _resultValue.proneToMisuse = proneToMisuse;
            _resultValue.risks = risks;
            _resultValue.saasCertifications = saasCertifications;
            _resultValue.saasRisks = saasRisks;
            _resultValue.subcategories = subcategories;
            _resultValue.tagging = tagging;
            _resultValue.technologies = technologies;
            _resultValue.tfid = tfid;
            _resultValue.transfersFiles = transfersFiles;
            _resultValue.tunnelsOtherApps = tunnelsOtherApps;
            _resultValue.usedByMalware = usedByMalware;
            return _resultValue;
        }
    }
}
