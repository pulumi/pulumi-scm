// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.scm.inputs.HipObjectDiskEncryptionCriteriaEncryptedLocationEncryptionStateArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HipObjectDiskEncryptionCriteriaEncryptedLocationArgs extends com.pulumi.resources.ResourceArgs {

    public static final HipObjectDiskEncryptionCriteriaEncryptedLocationArgs Empty = new HipObjectDiskEncryptionCriteriaEncryptedLocationArgs();

    /**
     * The EncryptionState param.
     * 
     */
    @Import(name="encryptionState")
    private @Nullable Output<HipObjectDiskEncryptionCriteriaEncryptedLocationEncryptionStateArgs> encryptionState;

    /**
     * @return The EncryptionState param.
     * 
     */
    public Optional<Output<HipObjectDiskEncryptionCriteriaEncryptedLocationEncryptionStateArgs>> encryptionState() {
        return Optional.ofNullable(this.encryptionState);
    }

    /**
     * Encryption location. String length must not exceed 1023 characters.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Encryption location. String length must not exceed 1023 characters.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private HipObjectDiskEncryptionCriteriaEncryptedLocationArgs() {}

    private HipObjectDiskEncryptionCriteriaEncryptedLocationArgs(HipObjectDiskEncryptionCriteriaEncryptedLocationArgs $) {
        this.encryptionState = $.encryptionState;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HipObjectDiskEncryptionCriteriaEncryptedLocationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HipObjectDiskEncryptionCriteriaEncryptedLocationArgs $;

        public Builder() {
            $ = new HipObjectDiskEncryptionCriteriaEncryptedLocationArgs();
        }

        public Builder(HipObjectDiskEncryptionCriteriaEncryptedLocationArgs defaults) {
            $ = new HipObjectDiskEncryptionCriteriaEncryptedLocationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param encryptionState The EncryptionState param.
         * 
         * @return builder
         * 
         */
        public Builder encryptionState(@Nullable Output<HipObjectDiskEncryptionCriteriaEncryptedLocationEncryptionStateArgs> encryptionState) {
            $.encryptionState = encryptionState;
            return this;
        }

        /**
         * @param encryptionState The EncryptionState param.
         * 
         * @return builder
         * 
         */
        public Builder encryptionState(HipObjectDiskEncryptionCriteriaEncryptedLocationEncryptionStateArgs encryptionState) {
            return encryptionState(Output.of(encryptionState));
        }

        /**
         * @param name Encryption location. String length must not exceed 1023 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Encryption location. String length must not exceed 1023 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public HipObjectDiskEncryptionCriteriaEncryptedLocationArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("HipObjectDiskEncryptionCriteriaEncryptedLocationArgs", "name");
            }
            return $;
        }
    }

}
