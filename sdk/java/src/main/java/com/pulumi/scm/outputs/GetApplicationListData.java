// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.scm.outputs.GetApplicationListDataDefault;
import com.pulumi.scm.outputs.GetApplicationListDataSignature;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetApplicationListData {
    /**
     * @return The AbleToTransferFile param.
     * 
     */
    private Boolean ableToTransferFile;
    /**
     * @return The AlgDisableCapability param. String length must not exceed 127 characters.
     * 
     */
    private String algDisableCapability;
    /**
     * @return The Category param.
     * 
     */
    private String category;
    /**
     * @return The ConsumeBigBandwidth param.
     * 
     */
    private Boolean consumeBigBandwidth;
    /**
     * @return The DataIdent param.
     * 
     */
    private Boolean dataIdent;
    /**
     * @return The Default param.
     * 
     */
    private GetApplicationListDataDefault default_;
    /**
     * @return The Description param. String length must not exceed 1023 characters.
     * 
     */
    private String description;
    /**
     * @return The EvasiveBehavior param.
     * 
     */
    private Boolean evasiveBehavior;
    /**
     * @return The FileTypeIdent param.
     * 
     */
    private Boolean fileTypeIdent;
    /**
     * @return The HasKnownVulnerability param.
     * 
     */
    private Boolean hasKnownVulnerability;
    /**
     * @return UUID of the resource.
     * 
     */
    private String id;
    /**
     * @return Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
     * 
     */
    private String name;
    /**
     * @return The NoAppidCaching param.
     * 
     */
    private Boolean noAppidCaching;
    /**
     * @return The ParentApp param. String length must not exceed 127 characters.
     * 
     */
    private String parentApp;
    /**
     * @return The PervasiveUse param.
     * 
     */
    private Boolean pervasiveUse;
    /**
     * @return The ProneToMisuse param.
     * 
     */
    private Boolean proneToMisuse;
    /**
     * @return The Risk param. Value must be between 1 and 5.
     * 
     */
    private Integer risk;
    /**
     * @return The Signatures param.
     * 
     */
    private List<GetApplicationListDataSignature> signatures;
    /**
     * @return The Subcategory param. String length must not exceed 63 characters.
     * 
     */
    private String subcategory;
    /**
     * @return timeout for half-close session in seconds. Value must be between 1 and 604800.
     * 
     */
    private Integer tcpHalfClosedTimeout;
    /**
     * @return timeout for session in time_wait state in seconds. Value must be between 1 and 600.
     * 
     */
    private Integer tcpTimeWaitTimeout;
    /**
     * @return timeout in seconds. Value must be between 0 and 604800.
     * 
     */
    private Integer tcpTimeout;
    /**
     * @return The Technology param. String length must not exceed 63 characters.
     * 
     */
    private String technology;
    /**
     * @return timeout in seconds. Value must be between 0 and 604800.
     * 
     */
    private Integer timeout;
    /**
     * @return The TunnelApplications param.
     * 
     */
    private Boolean tunnelApplications;
    /**
     * @return The TunnelOtherApplication param.
     * 
     */
    private Boolean tunnelOtherApplication;
    /**
     * @return timeout in seconds. Value must be between 0 and 604800.
     * 
     */
    private Integer udpTimeout;
    /**
     * @return The UsedByMalware param.
     * 
     */
    private Boolean usedByMalware;
    /**
     * @return The VirusIdent param.
     * 
     */
    private Boolean virusIdent;

    private GetApplicationListData() {}
    /**
     * @return The AbleToTransferFile param.
     * 
     */
    public Boolean ableToTransferFile() {
        return this.ableToTransferFile;
    }
    /**
     * @return The AlgDisableCapability param. String length must not exceed 127 characters.
     * 
     */
    public String algDisableCapability() {
        return this.algDisableCapability;
    }
    /**
     * @return The Category param.
     * 
     */
    public String category() {
        return this.category;
    }
    /**
     * @return The ConsumeBigBandwidth param.
     * 
     */
    public Boolean consumeBigBandwidth() {
        return this.consumeBigBandwidth;
    }
    /**
     * @return The DataIdent param.
     * 
     */
    public Boolean dataIdent() {
        return this.dataIdent;
    }
    /**
     * @return The Default param.
     * 
     */
    public GetApplicationListDataDefault default_() {
        return this.default_;
    }
    /**
     * @return The Description param. String length must not exceed 1023 characters.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The EvasiveBehavior param.
     * 
     */
    public Boolean evasiveBehavior() {
        return this.evasiveBehavior;
    }
    /**
     * @return The FileTypeIdent param.
     * 
     */
    public Boolean fileTypeIdent() {
        return this.fileTypeIdent;
    }
    /**
     * @return The HasKnownVulnerability param.
     * 
     */
    public Boolean hasKnownVulnerability() {
        return this.hasKnownVulnerability;
    }
    /**
     * @return UUID of the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The NoAppidCaching param.
     * 
     */
    public Boolean noAppidCaching() {
        return this.noAppidCaching;
    }
    /**
     * @return The ParentApp param. String length must not exceed 127 characters.
     * 
     */
    public String parentApp() {
        return this.parentApp;
    }
    /**
     * @return The PervasiveUse param.
     * 
     */
    public Boolean pervasiveUse() {
        return this.pervasiveUse;
    }
    /**
     * @return The ProneToMisuse param.
     * 
     */
    public Boolean proneToMisuse() {
        return this.proneToMisuse;
    }
    /**
     * @return The Risk param. Value must be between 1 and 5.
     * 
     */
    public Integer risk() {
        return this.risk;
    }
    /**
     * @return The Signatures param.
     * 
     */
    public List<GetApplicationListDataSignature> signatures() {
        return this.signatures;
    }
    /**
     * @return The Subcategory param. String length must not exceed 63 characters.
     * 
     */
    public String subcategory() {
        return this.subcategory;
    }
    /**
     * @return timeout for half-close session in seconds. Value must be between 1 and 604800.
     * 
     */
    public Integer tcpHalfClosedTimeout() {
        return this.tcpHalfClosedTimeout;
    }
    /**
     * @return timeout for session in time_wait state in seconds. Value must be between 1 and 600.
     * 
     */
    public Integer tcpTimeWaitTimeout() {
        return this.tcpTimeWaitTimeout;
    }
    /**
     * @return timeout in seconds. Value must be between 0 and 604800.
     * 
     */
    public Integer tcpTimeout() {
        return this.tcpTimeout;
    }
    /**
     * @return The Technology param. String length must not exceed 63 characters.
     * 
     */
    public String technology() {
        return this.technology;
    }
    /**
     * @return timeout in seconds. Value must be between 0 and 604800.
     * 
     */
    public Integer timeout() {
        return this.timeout;
    }
    /**
     * @return The TunnelApplications param.
     * 
     */
    public Boolean tunnelApplications() {
        return this.tunnelApplications;
    }
    /**
     * @return The TunnelOtherApplication param.
     * 
     */
    public Boolean tunnelOtherApplication() {
        return this.tunnelOtherApplication;
    }
    /**
     * @return timeout in seconds. Value must be between 0 and 604800.
     * 
     */
    public Integer udpTimeout() {
        return this.udpTimeout;
    }
    /**
     * @return The UsedByMalware param.
     * 
     */
    public Boolean usedByMalware() {
        return this.usedByMalware;
    }
    /**
     * @return The VirusIdent param.
     * 
     */
    public Boolean virusIdent() {
        return this.virusIdent;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplicationListData defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean ableToTransferFile;
        private String algDisableCapability;
        private String category;
        private Boolean consumeBigBandwidth;
        private Boolean dataIdent;
        private GetApplicationListDataDefault default_;
        private String description;
        private Boolean evasiveBehavior;
        private Boolean fileTypeIdent;
        private Boolean hasKnownVulnerability;
        private String id;
        private String name;
        private Boolean noAppidCaching;
        private String parentApp;
        private Boolean pervasiveUse;
        private Boolean proneToMisuse;
        private Integer risk;
        private List<GetApplicationListDataSignature> signatures;
        private String subcategory;
        private Integer tcpHalfClosedTimeout;
        private Integer tcpTimeWaitTimeout;
        private Integer tcpTimeout;
        private String technology;
        private Integer timeout;
        private Boolean tunnelApplications;
        private Boolean tunnelOtherApplication;
        private Integer udpTimeout;
        private Boolean usedByMalware;
        private Boolean virusIdent;
        public Builder() {}
        public Builder(GetApplicationListData defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ableToTransferFile = defaults.ableToTransferFile;
    	      this.algDisableCapability = defaults.algDisableCapability;
    	      this.category = defaults.category;
    	      this.consumeBigBandwidth = defaults.consumeBigBandwidth;
    	      this.dataIdent = defaults.dataIdent;
    	      this.default_ = defaults.default_;
    	      this.description = defaults.description;
    	      this.evasiveBehavior = defaults.evasiveBehavior;
    	      this.fileTypeIdent = defaults.fileTypeIdent;
    	      this.hasKnownVulnerability = defaults.hasKnownVulnerability;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.noAppidCaching = defaults.noAppidCaching;
    	      this.parentApp = defaults.parentApp;
    	      this.pervasiveUse = defaults.pervasiveUse;
    	      this.proneToMisuse = defaults.proneToMisuse;
    	      this.risk = defaults.risk;
    	      this.signatures = defaults.signatures;
    	      this.subcategory = defaults.subcategory;
    	      this.tcpHalfClosedTimeout = defaults.tcpHalfClosedTimeout;
    	      this.tcpTimeWaitTimeout = defaults.tcpTimeWaitTimeout;
    	      this.tcpTimeout = defaults.tcpTimeout;
    	      this.technology = defaults.technology;
    	      this.timeout = defaults.timeout;
    	      this.tunnelApplications = defaults.tunnelApplications;
    	      this.tunnelOtherApplication = defaults.tunnelOtherApplication;
    	      this.udpTimeout = defaults.udpTimeout;
    	      this.usedByMalware = defaults.usedByMalware;
    	      this.virusIdent = defaults.virusIdent;
        }

        @CustomType.Setter
        public Builder ableToTransferFile(Boolean ableToTransferFile) {
            if (ableToTransferFile == null) {
              throw new MissingRequiredPropertyException("GetApplicationListData", "ableToTransferFile");
            }
            this.ableToTransferFile = ableToTransferFile;
            return this;
        }
        @CustomType.Setter
        public Builder algDisableCapability(String algDisableCapability) {
            if (algDisableCapability == null) {
              throw new MissingRequiredPropertyException("GetApplicationListData", "algDisableCapability");
            }
            this.algDisableCapability = algDisableCapability;
            return this;
        }
        @CustomType.Setter
        public Builder category(String category) {
            if (category == null) {
              throw new MissingRequiredPropertyException("GetApplicationListData", "category");
            }
            this.category = category;
            return this;
        }
        @CustomType.Setter
        public Builder consumeBigBandwidth(Boolean consumeBigBandwidth) {
            if (consumeBigBandwidth == null) {
              throw new MissingRequiredPropertyException("GetApplicationListData", "consumeBigBandwidth");
            }
            this.consumeBigBandwidth = consumeBigBandwidth;
            return this;
        }
        @CustomType.Setter
        public Builder dataIdent(Boolean dataIdent) {
            if (dataIdent == null) {
              throw new MissingRequiredPropertyException("GetApplicationListData", "dataIdent");
            }
            this.dataIdent = dataIdent;
            return this;
        }
        @CustomType.Setter("default")
        public Builder default_(GetApplicationListDataDefault default_) {
            if (default_ == null) {
              throw new MissingRequiredPropertyException("GetApplicationListData", "default_");
            }
            this.default_ = default_;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetApplicationListData", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder evasiveBehavior(Boolean evasiveBehavior) {
            if (evasiveBehavior == null) {
              throw new MissingRequiredPropertyException("GetApplicationListData", "evasiveBehavior");
            }
            this.evasiveBehavior = evasiveBehavior;
            return this;
        }
        @CustomType.Setter
        public Builder fileTypeIdent(Boolean fileTypeIdent) {
            if (fileTypeIdent == null) {
              throw new MissingRequiredPropertyException("GetApplicationListData", "fileTypeIdent");
            }
            this.fileTypeIdent = fileTypeIdent;
            return this;
        }
        @CustomType.Setter
        public Builder hasKnownVulnerability(Boolean hasKnownVulnerability) {
            if (hasKnownVulnerability == null) {
              throw new MissingRequiredPropertyException("GetApplicationListData", "hasKnownVulnerability");
            }
            this.hasKnownVulnerability = hasKnownVulnerability;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetApplicationListData", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetApplicationListData", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder noAppidCaching(Boolean noAppidCaching) {
            if (noAppidCaching == null) {
              throw new MissingRequiredPropertyException("GetApplicationListData", "noAppidCaching");
            }
            this.noAppidCaching = noAppidCaching;
            return this;
        }
        @CustomType.Setter
        public Builder parentApp(String parentApp) {
            if (parentApp == null) {
              throw new MissingRequiredPropertyException("GetApplicationListData", "parentApp");
            }
            this.parentApp = parentApp;
            return this;
        }
        @CustomType.Setter
        public Builder pervasiveUse(Boolean pervasiveUse) {
            if (pervasiveUse == null) {
              throw new MissingRequiredPropertyException("GetApplicationListData", "pervasiveUse");
            }
            this.pervasiveUse = pervasiveUse;
            return this;
        }
        @CustomType.Setter
        public Builder proneToMisuse(Boolean proneToMisuse) {
            if (proneToMisuse == null) {
              throw new MissingRequiredPropertyException("GetApplicationListData", "proneToMisuse");
            }
            this.proneToMisuse = proneToMisuse;
            return this;
        }
        @CustomType.Setter
        public Builder risk(Integer risk) {
            if (risk == null) {
              throw new MissingRequiredPropertyException("GetApplicationListData", "risk");
            }
            this.risk = risk;
            return this;
        }
        @CustomType.Setter
        public Builder signatures(List<GetApplicationListDataSignature> signatures) {
            if (signatures == null) {
              throw new MissingRequiredPropertyException("GetApplicationListData", "signatures");
            }
            this.signatures = signatures;
            return this;
        }
        public Builder signatures(GetApplicationListDataSignature... signatures) {
            return signatures(List.of(signatures));
        }
        @CustomType.Setter
        public Builder subcategory(String subcategory) {
            if (subcategory == null) {
              throw new MissingRequiredPropertyException("GetApplicationListData", "subcategory");
            }
            this.subcategory = subcategory;
            return this;
        }
        @CustomType.Setter
        public Builder tcpHalfClosedTimeout(Integer tcpHalfClosedTimeout) {
            if (tcpHalfClosedTimeout == null) {
              throw new MissingRequiredPropertyException("GetApplicationListData", "tcpHalfClosedTimeout");
            }
            this.tcpHalfClosedTimeout = tcpHalfClosedTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder tcpTimeWaitTimeout(Integer tcpTimeWaitTimeout) {
            if (tcpTimeWaitTimeout == null) {
              throw new MissingRequiredPropertyException("GetApplicationListData", "tcpTimeWaitTimeout");
            }
            this.tcpTimeWaitTimeout = tcpTimeWaitTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder tcpTimeout(Integer tcpTimeout) {
            if (tcpTimeout == null) {
              throw new MissingRequiredPropertyException("GetApplicationListData", "tcpTimeout");
            }
            this.tcpTimeout = tcpTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder technology(String technology) {
            if (technology == null) {
              throw new MissingRequiredPropertyException("GetApplicationListData", "technology");
            }
            this.technology = technology;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(Integer timeout) {
            if (timeout == null) {
              throw new MissingRequiredPropertyException("GetApplicationListData", "timeout");
            }
            this.timeout = timeout;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelApplications(Boolean tunnelApplications) {
            if (tunnelApplications == null) {
              throw new MissingRequiredPropertyException("GetApplicationListData", "tunnelApplications");
            }
            this.tunnelApplications = tunnelApplications;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelOtherApplication(Boolean tunnelOtherApplication) {
            if (tunnelOtherApplication == null) {
              throw new MissingRequiredPropertyException("GetApplicationListData", "tunnelOtherApplication");
            }
            this.tunnelOtherApplication = tunnelOtherApplication;
            return this;
        }
        @CustomType.Setter
        public Builder udpTimeout(Integer udpTimeout) {
            if (udpTimeout == null) {
              throw new MissingRequiredPropertyException("GetApplicationListData", "udpTimeout");
            }
            this.udpTimeout = udpTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder usedByMalware(Boolean usedByMalware) {
            if (usedByMalware == null) {
              throw new MissingRequiredPropertyException("GetApplicationListData", "usedByMalware");
            }
            this.usedByMalware = usedByMalware;
            return this;
        }
        @CustomType.Setter
        public Builder virusIdent(Boolean virusIdent) {
            if (virusIdent == null) {
              throw new MissingRequiredPropertyException("GetApplicationListData", "virusIdent");
            }
            this.virusIdent = virusIdent;
            return this;
        }
        public GetApplicationListData build() {
            final var _resultValue = new GetApplicationListData();
            _resultValue.ableToTransferFile = ableToTransferFile;
            _resultValue.algDisableCapability = algDisableCapability;
            _resultValue.category = category;
            _resultValue.consumeBigBandwidth = consumeBigBandwidth;
            _resultValue.dataIdent = dataIdent;
            _resultValue.default_ = default_;
            _resultValue.description = description;
            _resultValue.evasiveBehavior = evasiveBehavior;
            _resultValue.fileTypeIdent = fileTypeIdent;
            _resultValue.hasKnownVulnerability = hasKnownVulnerability;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.noAppidCaching = noAppidCaching;
            _resultValue.parentApp = parentApp;
            _resultValue.pervasiveUse = pervasiveUse;
            _resultValue.proneToMisuse = proneToMisuse;
            _resultValue.risk = risk;
            _resultValue.signatures = signatures;
            _resultValue.subcategory = subcategory;
            _resultValue.tcpHalfClosedTimeout = tcpHalfClosedTimeout;
            _resultValue.tcpTimeWaitTimeout = tcpTimeWaitTimeout;
            _resultValue.tcpTimeout = tcpTimeout;
            _resultValue.technology = technology;
            _resultValue.timeout = timeout;
            _resultValue.tunnelApplications = tunnelApplications;
            _resultValue.tunnelOtherApplication = tunnelOtherApplication;
            _resultValue.udpTimeout = udpTimeout;
            _resultValue.usedByMalware = usedByMalware;
            _resultValue.virusIdent = virusIdent;
            return _resultValue;
        }
    }
}
