// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DecryptionRuleTypeArgs extends com.pulumi.resources.ResourceArgs {

    public static final DecryptionRuleTypeArgs Empty = new DecryptionRuleTypeArgs();

    /**
     * The SslForwardProxy param. Ensure that only one of the following is specified: `ssl_forward_proxy`, `ssl_inbound_inspection`
     * 
     */
    @Import(name="sslForwardProxy")
    private @Nullable Output<Boolean> sslForwardProxy;

    /**
     * @return The SslForwardProxy param. Ensure that only one of the following is specified: `ssl_forward_proxy`, `ssl_inbound_inspection`
     * 
     */
    public Optional<Output<Boolean>> sslForwardProxy() {
        return Optional.ofNullable(this.sslForwardProxy);
    }

    /**
     * add the certificate name for SSL inbound inspection. Ensure that only one of the following is specified: `ssl_forward_proxy`, `ssl_inbound_inspection`
     * 
     */
    @Import(name="sslInboundInspection")
    private @Nullable Output<String> sslInboundInspection;

    /**
     * @return add the certificate name for SSL inbound inspection. Ensure that only one of the following is specified: `ssl_forward_proxy`, `ssl_inbound_inspection`
     * 
     */
    public Optional<Output<String>> sslInboundInspection() {
        return Optional.ofNullable(this.sslInboundInspection);
    }

    private DecryptionRuleTypeArgs() {}

    private DecryptionRuleTypeArgs(DecryptionRuleTypeArgs $) {
        this.sslForwardProxy = $.sslForwardProxy;
        this.sslInboundInspection = $.sslInboundInspection;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DecryptionRuleTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DecryptionRuleTypeArgs $;

        public Builder() {
            $ = new DecryptionRuleTypeArgs();
        }

        public Builder(DecryptionRuleTypeArgs defaults) {
            $ = new DecryptionRuleTypeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param sslForwardProxy The SslForwardProxy param. Ensure that only one of the following is specified: `ssl_forward_proxy`, `ssl_inbound_inspection`
         * 
         * @return builder
         * 
         */
        public Builder sslForwardProxy(@Nullable Output<Boolean> sslForwardProxy) {
            $.sslForwardProxy = sslForwardProxy;
            return this;
        }

        /**
         * @param sslForwardProxy The SslForwardProxy param. Ensure that only one of the following is specified: `ssl_forward_proxy`, `ssl_inbound_inspection`
         * 
         * @return builder
         * 
         */
        public Builder sslForwardProxy(Boolean sslForwardProxy) {
            return sslForwardProxy(Output.of(sslForwardProxy));
        }

        /**
         * @param sslInboundInspection add the certificate name for SSL inbound inspection. Ensure that only one of the following is specified: `ssl_forward_proxy`, `ssl_inbound_inspection`
         * 
         * @return builder
         * 
         */
        public Builder sslInboundInspection(@Nullable Output<String> sslInboundInspection) {
            $.sslInboundInspection = sslInboundInspection;
            return this;
        }

        /**
         * @param sslInboundInspection add the certificate name for SSL inbound inspection. Ensure that only one of the following is specified: `ssl_forward_proxy`, `ssl_inbound_inspection`
         * 
         * @return builder
         * 
         */
        public Builder sslInboundInspection(String sslInboundInspection) {
            return sslInboundInspection(Output.of(sslInboundInspection));
        }

        public DecryptionRuleTypeArgs build() {
            return $;
        }
    }

}
