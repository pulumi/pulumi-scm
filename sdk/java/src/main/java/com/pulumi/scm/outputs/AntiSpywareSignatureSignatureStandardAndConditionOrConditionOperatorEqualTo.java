// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.scm.outputs.AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualToQualifier;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualTo {
    /**
     * @return The Context param.
     * 
     */
    private @Nullable String context;
    /**
     * @return The Negate param. Default: `false`.
     * 
     */
    private @Nullable Boolean negate;
    /**
     * @return The Qualifiers param.
     * 
     */
    private @Nullable List<AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualToQualifier> qualifiers;
    /**
     * @return The Value param. Value must be between 0 and 4294967295.
     * 
     */
    private @Nullable Integer value;

    private AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualTo() {}
    /**
     * @return The Context param.
     * 
     */
    public Optional<String> context() {
        return Optional.ofNullable(this.context);
    }
    /**
     * @return The Negate param. Default: `false`.
     * 
     */
    public Optional<Boolean> negate() {
        return Optional.ofNullable(this.negate);
    }
    /**
     * @return The Qualifiers param.
     * 
     */
    public List<AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualToQualifier> qualifiers() {
        return this.qualifiers == null ? List.of() : this.qualifiers;
    }
    /**
     * @return The Value param. Value must be between 0 and 4294967295.
     * 
     */
    public Optional<Integer> value() {
        return Optional.ofNullable(this.value);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualTo defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String context;
        private @Nullable Boolean negate;
        private @Nullable List<AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualToQualifier> qualifiers;
        private @Nullable Integer value;
        public Builder() {}
        public Builder(AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualTo defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.context = defaults.context;
    	      this.negate = defaults.negate;
    	      this.qualifiers = defaults.qualifiers;
    	      this.value = defaults.value;
        }

        @CustomType.Setter
        public Builder context(@Nullable String context) {

            this.context = context;
            return this;
        }
        @CustomType.Setter
        public Builder negate(@Nullable Boolean negate) {

            this.negate = negate;
            return this;
        }
        @CustomType.Setter
        public Builder qualifiers(@Nullable List<AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualToQualifier> qualifiers) {

            this.qualifiers = qualifiers;
            return this;
        }
        public Builder qualifiers(AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualToQualifier... qualifiers) {
            return qualifiers(List.of(qualifiers));
        }
        @CustomType.Setter
        public Builder value(@Nullable Integer value) {

            this.value = value;
            return this;
        }
        public AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualTo build() {
            final var _resultValue = new AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorEqualTo();
            _resultValue.context = context;
            _resultValue.negate = negate;
            _resultValue.qualifiers = qualifiers;
            _resultValue.value = value;
            return _resultValue;
        }
    }
}
