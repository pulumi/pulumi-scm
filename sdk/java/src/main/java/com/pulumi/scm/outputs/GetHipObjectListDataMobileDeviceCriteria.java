// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.scm.outputs.GetHipObjectListDataMobileDeviceCriteriaApplications;
import com.pulumi.scm.outputs.GetHipObjectListDataMobileDeviceCriteriaImei;
import com.pulumi.scm.outputs.GetHipObjectListDataMobileDeviceCriteriaLastCheckinTime;
import com.pulumi.scm.outputs.GetHipObjectListDataMobileDeviceCriteriaModel;
import com.pulumi.scm.outputs.GetHipObjectListDataMobileDeviceCriteriaPhoneNumber;
import com.pulumi.scm.outputs.GetHipObjectListDataMobileDeviceCriteriaTag;
import java.lang.Boolean;
import java.util.Objects;

@CustomType
public final class GetHipObjectListDataMobileDeviceCriteria {
    /**
     * @return The Applications param.
     * 
     */
    private GetHipObjectListDataMobileDeviceCriteriaApplications applications;
    /**
     * @return If device&#39;s disk is encrypted.
     * 
     */
    private Boolean diskEncrypted;
    /**
     * @return The Imei param.
     * 
     */
    private GetHipObjectListDataMobileDeviceCriteriaImei imei;
    /**
     * @return If device is by rooted/jailbroken.
     * 
     */
    private Boolean jailbroken;
    /**
     * @return The LastCheckinTime param.
     * 
     */
    private GetHipObjectListDataMobileDeviceCriteriaLastCheckinTime lastCheckinTime;
    /**
     * @return The Model param.
     * 
     */
    private GetHipObjectListDataMobileDeviceCriteriaModel model;
    /**
     * @return If device&#39;s passcode is present.
     * 
     */
    private Boolean passcodeSet;
    /**
     * @return The PhoneNumber param.
     * 
     */
    private GetHipObjectListDataMobileDeviceCriteriaPhoneNumber phoneNumber;
    /**
     * @return The Tag param.
     * 
     */
    private GetHipObjectListDataMobileDeviceCriteriaTag tag;

    private GetHipObjectListDataMobileDeviceCriteria() {}
    /**
     * @return The Applications param.
     * 
     */
    public GetHipObjectListDataMobileDeviceCriteriaApplications applications() {
        return this.applications;
    }
    /**
     * @return If device&#39;s disk is encrypted.
     * 
     */
    public Boolean diskEncrypted() {
        return this.diskEncrypted;
    }
    /**
     * @return The Imei param.
     * 
     */
    public GetHipObjectListDataMobileDeviceCriteriaImei imei() {
        return this.imei;
    }
    /**
     * @return If device is by rooted/jailbroken.
     * 
     */
    public Boolean jailbroken() {
        return this.jailbroken;
    }
    /**
     * @return The LastCheckinTime param.
     * 
     */
    public GetHipObjectListDataMobileDeviceCriteriaLastCheckinTime lastCheckinTime() {
        return this.lastCheckinTime;
    }
    /**
     * @return The Model param.
     * 
     */
    public GetHipObjectListDataMobileDeviceCriteriaModel model() {
        return this.model;
    }
    /**
     * @return If device&#39;s passcode is present.
     * 
     */
    public Boolean passcodeSet() {
        return this.passcodeSet;
    }
    /**
     * @return The PhoneNumber param.
     * 
     */
    public GetHipObjectListDataMobileDeviceCriteriaPhoneNumber phoneNumber() {
        return this.phoneNumber;
    }
    /**
     * @return The Tag param.
     * 
     */
    public GetHipObjectListDataMobileDeviceCriteriaTag tag() {
        return this.tag;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetHipObjectListDataMobileDeviceCriteria defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetHipObjectListDataMobileDeviceCriteriaApplications applications;
        private Boolean diskEncrypted;
        private GetHipObjectListDataMobileDeviceCriteriaImei imei;
        private Boolean jailbroken;
        private GetHipObjectListDataMobileDeviceCriteriaLastCheckinTime lastCheckinTime;
        private GetHipObjectListDataMobileDeviceCriteriaModel model;
        private Boolean passcodeSet;
        private GetHipObjectListDataMobileDeviceCriteriaPhoneNumber phoneNumber;
        private GetHipObjectListDataMobileDeviceCriteriaTag tag;
        public Builder() {}
        public Builder(GetHipObjectListDataMobileDeviceCriteria defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applications = defaults.applications;
    	      this.diskEncrypted = defaults.diskEncrypted;
    	      this.imei = defaults.imei;
    	      this.jailbroken = defaults.jailbroken;
    	      this.lastCheckinTime = defaults.lastCheckinTime;
    	      this.model = defaults.model;
    	      this.passcodeSet = defaults.passcodeSet;
    	      this.phoneNumber = defaults.phoneNumber;
    	      this.tag = defaults.tag;
        }

        @CustomType.Setter
        public Builder applications(GetHipObjectListDataMobileDeviceCriteriaApplications applications) {
            if (applications == null) {
              throw new MissingRequiredPropertyException("GetHipObjectListDataMobileDeviceCriteria", "applications");
            }
            this.applications = applications;
            return this;
        }
        @CustomType.Setter
        public Builder diskEncrypted(Boolean diskEncrypted) {
            if (diskEncrypted == null) {
              throw new MissingRequiredPropertyException("GetHipObjectListDataMobileDeviceCriteria", "diskEncrypted");
            }
            this.diskEncrypted = diskEncrypted;
            return this;
        }
        @CustomType.Setter
        public Builder imei(GetHipObjectListDataMobileDeviceCriteriaImei imei) {
            if (imei == null) {
              throw new MissingRequiredPropertyException("GetHipObjectListDataMobileDeviceCriteria", "imei");
            }
            this.imei = imei;
            return this;
        }
        @CustomType.Setter
        public Builder jailbroken(Boolean jailbroken) {
            if (jailbroken == null) {
              throw new MissingRequiredPropertyException("GetHipObjectListDataMobileDeviceCriteria", "jailbroken");
            }
            this.jailbroken = jailbroken;
            return this;
        }
        @CustomType.Setter
        public Builder lastCheckinTime(GetHipObjectListDataMobileDeviceCriteriaLastCheckinTime lastCheckinTime) {
            if (lastCheckinTime == null) {
              throw new MissingRequiredPropertyException("GetHipObjectListDataMobileDeviceCriteria", "lastCheckinTime");
            }
            this.lastCheckinTime = lastCheckinTime;
            return this;
        }
        @CustomType.Setter
        public Builder model(GetHipObjectListDataMobileDeviceCriteriaModel model) {
            if (model == null) {
              throw new MissingRequiredPropertyException("GetHipObjectListDataMobileDeviceCriteria", "model");
            }
            this.model = model;
            return this;
        }
        @CustomType.Setter
        public Builder passcodeSet(Boolean passcodeSet) {
            if (passcodeSet == null) {
              throw new MissingRequiredPropertyException("GetHipObjectListDataMobileDeviceCriteria", "passcodeSet");
            }
            this.passcodeSet = passcodeSet;
            return this;
        }
        @CustomType.Setter
        public Builder phoneNumber(GetHipObjectListDataMobileDeviceCriteriaPhoneNumber phoneNumber) {
            if (phoneNumber == null) {
              throw new MissingRequiredPropertyException("GetHipObjectListDataMobileDeviceCriteria", "phoneNumber");
            }
            this.phoneNumber = phoneNumber;
            return this;
        }
        @CustomType.Setter
        public Builder tag(GetHipObjectListDataMobileDeviceCriteriaTag tag) {
            if (tag == null) {
              throw new MissingRequiredPropertyException("GetHipObjectListDataMobileDeviceCriteria", "tag");
            }
            this.tag = tag;
            return this;
        }
        public GetHipObjectListDataMobileDeviceCriteria build() {
            final var _resultValue = new GetHipObjectListDataMobileDeviceCriteria();
            _resultValue.applications = applications;
            _resultValue.diskEncrypted = diskEncrypted;
            _resultValue.imei = imei;
            _resultValue.jailbroken = jailbroken;
            _resultValue.lastCheckinTime = lastCheckinTime;
            _resultValue.model = model;
            _resultValue.passcodeSet = passcodeSet;
            _resultValue.phoneNumber = phoneNumber;
            _resultValue.tag = tag;
            return _resultValue;
        }
    }
}
