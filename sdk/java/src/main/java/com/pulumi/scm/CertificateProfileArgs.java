// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.scm.inputs.CertificateProfileCaCertificateArgs;
import com.pulumi.scm.inputs.CertificateProfileUsernameFieldArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateProfileArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificateProfileArgs Empty = new CertificateProfileArgs();

    /**
     * The BlockExpiredCert param.
     * 
     */
    @Import(name="blockExpiredCert")
    private @Nullable Output<Boolean> blockExpiredCert;

    /**
     * @return The BlockExpiredCert param.
     * 
     */
    public Optional<Output<Boolean>> blockExpiredCert() {
        return Optional.ofNullable(this.blockExpiredCert);
    }

    /**
     * The BlockTimeoutCert param.
     * 
     */
    @Import(name="blockTimeoutCert")
    private @Nullable Output<Boolean> blockTimeoutCert;

    /**
     * @return The BlockTimeoutCert param.
     * 
     */
    public Optional<Output<Boolean>> blockTimeoutCert() {
        return Optional.ofNullable(this.blockTimeoutCert);
    }

    /**
     * The BlockUnauthenticatedCert param.
     * 
     */
    @Import(name="blockUnauthenticatedCert")
    private @Nullable Output<Boolean> blockUnauthenticatedCert;

    /**
     * @return The BlockUnauthenticatedCert param.
     * 
     */
    public Optional<Output<Boolean>> blockUnauthenticatedCert() {
        return Optional.ofNullable(this.blockUnauthenticatedCert);
    }

    /**
     * The BlockUnknownCert param.
     * 
     */
    @Import(name="blockUnknownCert")
    private @Nullable Output<Boolean> blockUnknownCert;

    /**
     * @return The BlockUnknownCert param.
     * 
     */
    public Optional<Output<Boolean>> blockUnknownCert() {
        return Optional.ofNullable(this.blockUnknownCert);
    }

    /**
     * The CaCertificates param.
     * 
     */
    @Import(name="caCertificates", required=true)
    private Output<List<CertificateProfileCaCertificateArgs>> caCertificates;

    /**
     * @return The CaCertificates param.
     * 
     */
    public Output<List<CertificateProfileCaCertificateArgs>> caCertificates() {
        return this.caCertificates;
    }

    /**
     * The CertStatusTimeout param.
     * 
     */
    @Import(name="certStatusTimeout")
    private @Nullable Output<String> certStatusTimeout;

    /**
     * @return The CertStatusTimeout param.
     * 
     */
    public Optional<Output<String>> certStatusTimeout() {
        return Optional.ofNullable(this.certStatusTimeout);
    }

    /**
     * The CrlReceiveTimeout param.
     * 
     */
    @Import(name="crlReceiveTimeout")
    private @Nullable Output<String> crlReceiveTimeout;

    /**
     * @return The CrlReceiveTimeout param.
     * 
     */
    public Optional<Output<String>> crlReceiveTimeout() {
        return Optional.ofNullable(this.crlReceiveTimeout);
    }

    /**
     * The Device param.
     * 
     */
    @Import(name="device")
    private @Nullable Output<String> device;

    /**
     * @return The Device param.
     * 
     */
    public Optional<Output<String>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * The Domain param.
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return The Domain param.
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * The Folder param.
     * 
     */
    @Import(name="folder")
    private @Nullable Output<String> folder;

    /**
     * @return The Folder param.
     * 
     */
    public Optional<Output<String>> folder() {
        return Optional.ofNullable(this.folder);
    }

    /**
     * Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 63 characters.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 63 characters.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The OcspReceiveTimeout param.
     * 
     */
    @Import(name="ocspReceiveTimeout")
    private @Nullable Output<String> ocspReceiveTimeout;

    /**
     * @return The OcspReceiveTimeout param.
     * 
     */
    public Optional<Output<String>> ocspReceiveTimeout() {
        return Optional.ofNullable(this.ocspReceiveTimeout);
    }

    /**
     * The Snippet param.
     * 
     */
    @Import(name="snippet")
    private @Nullable Output<String> snippet;

    /**
     * @return The Snippet param.
     * 
     */
    public Optional<Output<String>> snippet() {
        return Optional.ofNullable(this.snippet);
    }

    /**
     * The UseCrl param.
     * 
     */
    @Import(name="useCrl")
    private @Nullable Output<Boolean> useCrl;

    /**
     * @return The UseCrl param.
     * 
     */
    public Optional<Output<Boolean>> useCrl() {
        return Optional.ofNullable(this.useCrl);
    }

    /**
     * The UseOcsp param.
     * 
     */
    @Import(name="useOcsp")
    private @Nullable Output<Boolean> useOcsp;

    /**
     * @return The UseOcsp param.
     * 
     */
    public Optional<Output<Boolean>> useOcsp() {
        return Optional.ofNullable(this.useOcsp);
    }

    /**
     * The UsernameField param.
     * 
     */
    @Import(name="usernameField")
    private @Nullable Output<CertificateProfileUsernameFieldArgs> usernameField;

    /**
     * @return The UsernameField param.
     * 
     */
    public Optional<Output<CertificateProfileUsernameFieldArgs>> usernameField() {
        return Optional.ofNullable(this.usernameField);
    }

    private CertificateProfileArgs() {}

    private CertificateProfileArgs(CertificateProfileArgs $) {
        this.blockExpiredCert = $.blockExpiredCert;
        this.blockTimeoutCert = $.blockTimeoutCert;
        this.blockUnauthenticatedCert = $.blockUnauthenticatedCert;
        this.blockUnknownCert = $.blockUnknownCert;
        this.caCertificates = $.caCertificates;
        this.certStatusTimeout = $.certStatusTimeout;
        this.crlReceiveTimeout = $.crlReceiveTimeout;
        this.device = $.device;
        this.domain = $.domain;
        this.folder = $.folder;
        this.name = $.name;
        this.ocspReceiveTimeout = $.ocspReceiveTimeout;
        this.snippet = $.snippet;
        this.useCrl = $.useCrl;
        this.useOcsp = $.useOcsp;
        this.usernameField = $.usernameField;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateProfileArgs $;

        public Builder() {
            $ = new CertificateProfileArgs();
        }

        public Builder(CertificateProfileArgs defaults) {
            $ = new CertificateProfileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param blockExpiredCert The BlockExpiredCert param.
         * 
         * @return builder
         * 
         */
        public Builder blockExpiredCert(@Nullable Output<Boolean> blockExpiredCert) {
            $.blockExpiredCert = blockExpiredCert;
            return this;
        }

        /**
         * @param blockExpiredCert The BlockExpiredCert param.
         * 
         * @return builder
         * 
         */
        public Builder blockExpiredCert(Boolean blockExpiredCert) {
            return blockExpiredCert(Output.of(blockExpiredCert));
        }

        /**
         * @param blockTimeoutCert The BlockTimeoutCert param.
         * 
         * @return builder
         * 
         */
        public Builder blockTimeoutCert(@Nullable Output<Boolean> blockTimeoutCert) {
            $.blockTimeoutCert = blockTimeoutCert;
            return this;
        }

        /**
         * @param blockTimeoutCert The BlockTimeoutCert param.
         * 
         * @return builder
         * 
         */
        public Builder blockTimeoutCert(Boolean blockTimeoutCert) {
            return blockTimeoutCert(Output.of(blockTimeoutCert));
        }

        /**
         * @param blockUnauthenticatedCert The BlockUnauthenticatedCert param.
         * 
         * @return builder
         * 
         */
        public Builder blockUnauthenticatedCert(@Nullable Output<Boolean> blockUnauthenticatedCert) {
            $.blockUnauthenticatedCert = blockUnauthenticatedCert;
            return this;
        }

        /**
         * @param blockUnauthenticatedCert The BlockUnauthenticatedCert param.
         * 
         * @return builder
         * 
         */
        public Builder blockUnauthenticatedCert(Boolean blockUnauthenticatedCert) {
            return blockUnauthenticatedCert(Output.of(blockUnauthenticatedCert));
        }

        /**
         * @param blockUnknownCert The BlockUnknownCert param.
         * 
         * @return builder
         * 
         */
        public Builder blockUnknownCert(@Nullable Output<Boolean> blockUnknownCert) {
            $.blockUnknownCert = blockUnknownCert;
            return this;
        }

        /**
         * @param blockUnknownCert The BlockUnknownCert param.
         * 
         * @return builder
         * 
         */
        public Builder blockUnknownCert(Boolean blockUnknownCert) {
            return blockUnknownCert(Output.of(blockUnknownCert));
        }

        /**
         * @param caCertificates The CaCertificates param.
         * 
         * @return builder
         * 
         */
        public Builder caCertificates(Output<List<CertificateProfileCaCertificateArgs>> caCertificates) {
            $.caCertificates = caCertificates;
            return this;
        }

        /**
         * @param caCertificates The CaCertificates param.
         * 
         * @return builder
         * 
         */
        public Builder caCertificates(List<CertificateProfileCaCertificateArgs> caCertificates) {
            return caCertificates(Output.of(caCertificates));
        }

        /**
         * @param caCertificates The CaCertificates param.
         * 
         * @return builder
         * 
         */
        public Builder caCertificates(CertificateProfileCaCertificateArgs... caCertificates) {
            return caCertificates(List.of(caCertificates));
        }

        /**
         * @param certStatusTimeout The CertStatusTimeout param.
         * 
         * @return builder
         * 
         */
        public Builder certStatusTimeout(@Nullable Output<String> certStatusTimeout) {
            $.certStatusTimeout = certStatusTimeout;
            return this;
        }

        /**
         * @param certStatusTimeout The CertStatusTimeout param.
         * 
         * @return builder
         * 
         */
        public Builder certStatusTimeout(String certStatusTimeout) {
            return certStatusTimeout(Output.of(certStatusTimeout));
        }

        /**
         * @param crlReceiveTimeout The CrlReceiveTimeout param.
         * 
         * @return builder
         * 
         */
        public Builder crlReceiveTimeout(@Nullable Output<String> crlReceiveTimeout) {
            $.crlReceiveTimeout = crlReceiveTimeout;
            return this;
        }

        /**
         * @param crlReceiveTimeout The CrlReceiveTimeout param.
         * 
         * @return builder
         * 
         */
        public Builder crlReceiveTimeout(String crlReceiveTimeout) {
            return crlReceiveTimeout(Output.of(crlReceiveTimeout));
        }

        /**
         * @param device The Device param.
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<String> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device The Device param.
         * 
         * @return builder
         * 
         */
        public Builder device(String device) {
            return device(Output.of(device));
        }

        /**
         * @param domain The Domain param.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The Domain param.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param folder The Folder param.
         * 
         * @return builder
         * 
         */
        public Builder folder(@Nullable Output<String> folder) {
            $.folder = folder;
            return this;
        }

        /**
         * @param folder The Folder param.
         * 
         * @return builder
         * 
         */
        public Builder folder(String folder) {
            return folder(Output.of(folder));
        }

        /**
         * @param name Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 63 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 63 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param ocspReceiveTimeout The OcspReceiveTimeout param.
         * 
         * @return builder
         * 
         */
        public Builder ocspReceiveTimeout(@Nullable Output<String> ocspReceiveTimeout) {
            $.ocspReceiveTimeout = ocspReceiveTimeout;
            return this;
        }

        /**
         * @param ocspReceiveTimeout The OcspReceiveTimeout param.
         * 
         * @return builder
         * 
         */
        public Builder ocspReceiveTimeout(String ocspReceiveTimeout) {
            return ocspReceiveTimeout(Output.of(ocspReceiveTimeout));
        }

        /**
         * @param snippet The Snippet param.
         * 
         * @return builder
         * 
         */
        public Builder snippet(@Nullable Output<String> snippet) {
            $.snippet = snippet;
            return this;
        }

        /**
         * @param snippet The Snippet param.
         * 
         * @return builder
         * 
         */
        public Builder snippet(String snippet) {
            return snippet(Output.of(snippet));
        }

        /**
         * @param useCrl The UseCrl param.
         * 
         * @return builder
         * 
         */
        public Builder useCrl(@Nullable Output<Boolean> useCrl) {
            $.useCrl = useCrl;
            return this;
        }

        /**
         * @param useCrl The UseCrl param.
         * 
         * @return builder
         * 
         */
        public Builder useCrl(Boolean useCrl) {
            return useCrl(Output.of(useCrl));
        }

        /**
         * @param useOcsp The UseOcsp param.
         * 
         * @return builder
         * 
         */
        public Builder useOcsp(@Nullable Output<Boolean> useOcsp) {
            $.useOcsp = useOcsp;
            return this;
        }

        /**
         * @param useOcsp The UseOcsp param.
         * 
         * @return builder
         * 
         */
        public Builder useOcsp(Boolean useOcsp) {
            return useOcsp(Output.of(useOcsp));
        }

        /**
         * @param usernameField The UsernameField param.
         * 
         * @return builder
         * 
         */
        public Builder usernameField(@Nullable Output<CertificateProfileUsernameFieldArgs> usernameField) {
            $.usernameField = usernameField;
            return this;
        }

        /**
         * @param usernameField The UsernameField param.
         * 
         * @return builder
         * 
         */
        public Builder usernameField(CertificateProfileUsernameFieldArgs usernameField) {
            return usernameField(Output.of(usernameField));
        }

        public CertificateProfileArgs build() {
            if ($.caCertificates == null) {
                throw new MissingRequiredPropertyException("CertificateProfileArgs", "caCertificates");
            }
            return $;
        }
    }

}
