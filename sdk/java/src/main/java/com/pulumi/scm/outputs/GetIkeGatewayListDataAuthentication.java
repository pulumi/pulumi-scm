// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.scm.outputs.GetIkeGatewayListDataAuthenticationCertificate;
import com.pulumi.scm.outputs.GetIkeGatewayListDataAuthenticationPreSharedKey;
import java.util.Objects;

@CustomType
public final class GetIkeGatewayListDataAuthentication {
    /**
     * @return The Certificate param.
     * 
     */
    private GetIkeGatewayListDataAuthenticationCertificate certificate;
    /**
     * @return The PreSharedKey param.
     * 
     */
    private GetIkeGatewayListDataAuthenticationPreSharedKey preSharedKey;

    private GetIkeGatewayListDataAuthentication() {}
    /**
     * @return The Certificate param.
     * 
     */
    public GetIkeGatewayListDataAuthenticationCertificate certificate() {
        return this.certificate;
    }
    /**
     * @return The PreSharedKey param.
     * 
     */
    public GetIkeGatewayListDataAuthenticationPreSharedKey preSharedKey() {
        return this.preSharedKey;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIkeGatewayListDataAuthentication defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetIkeGatewayListDataAuthenticationCertificate certificate;
        private GetIkeGatewayListDataAuthenticationPreSharedKey preSharedKey;
        public Builder() {}
        public Builder(GetIkeGatewayListDataAuthentication defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificate = defaults.certificate;
    	      this.preSharedKey = defaults.preSharedKey;
        }

        @CustomType.Setter
        public Builder certificate(GetIkeGatewayListDataAuthenticationCertificate certificate) {
            if (certificate == null) {
              throw new MissingRequiredPropertyException("GetIkeGatewayListDataAuthentication", "certificate");
            }
            this.certificate = certificate;
            return this;
        }
        @CustomType.Setter
        public Builder preSharedKey(GetIkeGatewayListDataAuthenticationPreSharedKey preSharedKey) {
            if (preSharedKey == null) {
              throw new MissingRequiredPropertyException("GetIkeGatewayListDataAuthentication", "preSharedKey");
            }
            this.preSharedKey = preSharedKey;
            return this;
        }
        public GetIkeGatewayListDataAuthentication build() {
            final var _resultValue = new GetIkeGatewayListDataAuthentication();
            _resultValue.certificate = certificate;
            _resultValue.preSharedKey = preSharedKey;
            return _resultValue;
        }
    }
}
