// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.scm.inputs.ServiceProtocolTcpOverrideArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceProtocolTcpArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceProtocolTcpArgs Empty = new ServiceProtocolTcpArgs();

    /**
     * The Override param.
     * 
     */
    @Import(name="override")
    private @Nullable Output<ServiceProtocolTcpOverrideArgs> override;

    /**
     * @return The Override param.
     * 
     */
    public Optional<Output<ServiceProtocolTcpOverrideArgs>> override() {
        return Optional.ofNullable(this.override);
    }

    /**
     * The Port param. String length must be between 1 and 1023 characters.
     * 
     */
    @Import(name="port", required=true)
    private Output<String> port;

    /**
     * @return The Port param. String length must be between 1 and 1023 characters.
     * 
     */
    public Output<String> port() {
        return this.port;
    }

    /**
     * The SourcePort param. String length must be between 1 and 1023 characters.
     * 
     */
    @Import(name="sourcePort")
    private @Nullable Output<String> sourcePort;

    /**
     * @return The SourcePort param. String length must be between 1 and 1023 characters.
     * 
     */
    public Optional<Output<String>> sourcePort() {
        return Optional.ofNullable(this.sourcePort);
    }

    private ServiceProtocolTcpArgs() {}

    private ServiceProtocolTcpArgs(ServiceProtocolTcpArgs $) {
        this.override = $.override;
        this.port = $.port;
        this.sourcePort = $.sourcePort;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceProtocolTcpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceProtocolTcpArgs $;

        public Builder() {
            $ = new ServiceProtocolTcpArgs();
        }

        public Builder(ServiceProtocolTcpArgs defaults) {
            $ = new ServiceProtocolTcpArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param override The Override param.
         * 
         * @return builder
         * 
         */
        public Builder override(@Nullable Output<ServiceProtocolTcpOverrideArgs> override) {
            $.override = override;
            return this;
        }

        /**
         * @param override The Override param.
         * 
         * @return builder
         * 
         */
        public Builder override(ServiceProtocolTcpOverrideArgs override) {
            return override(Output.of(override));
        }

        /**
         * @param port The Port param. String length must be between 1 and 1023 characters.
         * 
         * @return builder
         * 
         */
        public Builder port(Output<String> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The Port param. String length must be between 1 and 1023 characters.
         * 
         * @return builder
         * 
         */
        public Builder port(String port) {
            return port(Output.of(port));
        }

        /**
         * @param sourcePort The SourcePort param. String length must be between 1 and 1023 characters.
         * 
         * @return builder
         * 
         */
        public Builder sourcePort(@Nullable Output<String> sourcePort) {
            $.sourcePort = sourcePort;
            return this;
        }

        /**
         * @param sourcePort The SourcePort param. String length must be between 1 and 1023 characters.
         * 
         * @return builder
         * 
         */
        public Builder sourcePort(String sourcePort) {
            return sourcePort(Output.of(sourcePort));
        }

        public ServiceProtocolTcpArgs build() {
            if ($.port == null) {
                throw new MissingRequiredPropertyException("ServiceProtocolTcpArgs", "port");
            }
            return $;
        }
    }

}
