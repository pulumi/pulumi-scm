// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.scm.outputs.GetExternalDynamicListListDataTypeUrlRecurring;
import com.pulumi.scm.outputs.GetExternalDynamicListListDataTypeUrlUrlAuth;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetExternalDynamicListListDataTypeUrl {
    /**
     * @return Profile for authenticating client certificates. Default: `&#34;None&#34;`.
     * 
     */
    private String certificateProfile;
    /**
     * @return The Description param. String length must not exceed 255 characters.
     * 
     */
    private String description;
    /**
     * @return The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.
     * 
     */
    private List<String> exceptionLists;
    /**
     * @return The Recurring param.
     * 
     */
    private GetExternalDynamicListListDataTypeUrlRecurring recurring;
    /**
     * @return The Url param. String length must not exceed 255 characters. Default: `&#34;http://&#34;`.
     * 
     */
    private String url;
    /**
     * @return The UrlAuth param.
     * 
     */
    private GetExternalDynamicListListDataTypeUrlUrlAuth urlAuth;

    private GetExternalDynamicListListDataTypeUrl() {}
    /**
     * @return Profile for authenticating client certificates. Default: `&#34;None&#34;`.
     * 
     */
    public String certificateProfile() {
        return this.certificateProfile;
    }
    /**
     * @return The Description param. String length must not exceed 255 characters.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.
     * 
     */
    public List<String> exceptionLists() {
        return this.exceptionLists;
    }
    /**
     * @return The Recurring param.
     * 
     */
    public GetExternalDynamicListListDataTypeUrlRecurring recurring() {
        return this.recurring;
    }
    /**
     * @return The Url param. String length must not exceed 255 characters. Default: `&#34;http://&#34;`.
     * 
     */
    public String url() {
        return this.url;
    }
    /**
     * @return The UrlAuth param.
     * 
     */
    public GetExternalDynamicListListDataTypeUrlUrlAuth urlAuth() {
        return this.urlAuth;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalDynamicListListDataTypeUrl defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String certificateProfile;
        private String description;
        private List<String> exceptionLists;
        private GetExternalDynamicListListDataTypeUrlRecurring recurring;
        private String url;
        private GetExternalDynamicListListDataTypeUrlUrlAuth urlAuth;
        public Builder() {}
        public Builder(GetExternalDynamicListListDataTypeUrl defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateProfile = defaults.certificateProfile;
    	      this.description = defaults.description;
    	      this.exceptionLists = defaults.exceptionLists;
    	      this.recurring = defaults.recurring;
    	      this.url = defaults.url;
    	      this.urlAuth = defaults.urlAuth;
        }

        @CustomType.Setter
        public Builder certificateProfile(String certificateProfile) {
            if (certificateProfile == null) {
              throw new MissingRequiredPropertyException("GetExternalDynamicListListDataTypeUrl", "certificateProfile");
            }
            this.certificateProfile = certificateProfile;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetExternalDynamicListListDataTypeUrl", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder exceptionLists(List<String> exceptionLists) {
            if (exceptionLists == null) {
              throw new MissingRequiredPropertyException("GetExternalDynamicListListDataTypeUrl", "exceptionLists");
            }
            this.exceptionLists = exceptionLists;
            return this;
        }
        public Builder exceptionLists(String... exceptionLists) {
            return exceptionLists(List.of(exceptionLists));
        }
        @CustomType.Setter
        public Builder recurring(GetExternalDynamicListListDataTypeUrlRecurring recurring) {
            if (recurring == null) {
              throw new MissingRequiredPropertyException("GetExternalDynamicListListDataTypeUrl", "recurring");
            }
            this.recurring = recurring;
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            if (url == null) {
              throw new MissingRequiredPropertyException("GetExternalDynamicListListDataTypeUrl", "url");
            }
            this.url = url;
            return this;
        }
        @CustomType.Setter
        public Builder urlAuth(GetExternalDynamicListListDataTypeUrlUrlAuth urlAuth) {
            if (urlAuth == null) {
              throw new MissingRequiredPropertyException("GetExternalDynamicListListDataTypeUrl", "urlAuth");
            }
            this.urlAuth = urlAuth;
            return this;
        }
        public GetExternalDynamicListListDataTypeUrl build() {
            final var _resultValue = new GetExternalDynamicListListDataTypeUrl();
            _resultValue.certificateProfile = certificateProfile;
            _resultValue.description = description;
            _resultValue.exceptionLists = exceptionLists;
            _resultValue.recurring = recurring;
            _resultValue.url = url;
            _resultValue.urlAuth = urlAuth;
            return _resultValue;
        }
    }
}
