// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.scm.inputs.AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchQualifierArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchArgs Empty = new AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchArgs();

    /**
     * The Context param.
     * 
     */
    @Import(name="context")
    private @Nullable Output<String> context;

    /**
     * @return The Context param.
     * 
     */
    public Optional<Output<String>> context() {
        return Optional.ofNullable(this.context);
    }

    /**
     * The Negate param. Default: `false`.
     * 
     */
    @Import(name="negate")
    private @Nullable Output<Boolean> negate;

    /**
     * @return The Negate param. Default: `false`.
     * 
     */
    public Optional<Output<Boolean>> negate() {
        return Optional.ofNullable(this.negate);
    }

    /**
     * The Pattern param.
     * 
     */
    @Import(name="pattern")
    private @Nullable Output<String> pattern;

    /**
     * @return The Pattern param.
     * 
     */
    public Optional<Output<String>> pattern() {
        return Optional.ofNullable(this.pattern);
    }

    /**
     * The Qualifiers param.
     * 
     */
    @Import(name="qualifiers")
    private @Nullable Output<List<AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchQualifierArgs>> qualifiers;

    /**
     * @return The Qualifiers param.
     * 
     */
    public Optional<Output<List<AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchQualifierArgs>>> qualifiers() {
        return Optional.ofNullable(this.qualifiers);
    }

    private AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchArgs() {}

    private AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchArgs(AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchArgs $) {
        this.context = $.context;
        this.negate = $.negate;
        this.pattern = $.pattern;
        this.qualifiers = $.qualifiers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchArgs $;

        public Builder() {
            $ = new AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchArgs();
        }

        public Builder(AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchArgs defaults) {
            $ = new AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param context The Context param.
         * 
         * @return builder
         * 
         */
        public Builder context(@Nullable Output<String> context) {
            $.context = context;
            return this;
        }

        /**
         * @param context The Context param.
         * 
         * @return builder
         * 
         */
        public Builder context(String context) {
            return context(Output.of(context));
        }

        /**
         * @param negate The Negate param. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder negate(@Nullable Output<Boolean> negate) {
            $.negate = negate;
            return this;
        }

        /**
         * @param negate The Negate param. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder negate(Boolean negate) {
            return negate(Output.of(negate));
        }

        /**
         * @param pattern The Pattern param.
         * 
         * @return builder
         * 
         */
        public Builder pattern(@Nullable Output<String> pattern) {
            $.pattern = pattern;
            return this;
        }

        /**
         * @param pattern The Pattern param.
         * 
         * @return builder
         * 
         */
        public Builder pattern(String pattern) {
            return pattern(Output.of(pattern));
        }

        /**
         * @param qualifiers The Qualifiers param.
         * 
         * @return builder
         * 
         */
        public Builder qualifiers(@Nullable Output<List<AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchQualifierArgs>> qualifiers) {
            $.qualifiers = qualifiers;
            return this;
        }

        /**
         * @param qualifiers The Qualifiers param.
         * 
         * @return builder
         * 
         */
        public Builder qualifiers(List<AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchQualifierArgs> qualifiers) {
            return qualifiers(Output.of(qualifiers));
        }

        /**
         * @param qualifiers The Qualifiers param.
         * 
         * @return builder
         * 
         */
        public Builder qualifiers(AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchQualifierArgs... qualifiers) {
            return qualifiers(List.of(qualifiers));
        }

        public AntiSpywareSignatureSignatureStandardAndConditionOrConditionOperatorPatternMatchArgs build() {
            return $;
        }
    }

}
