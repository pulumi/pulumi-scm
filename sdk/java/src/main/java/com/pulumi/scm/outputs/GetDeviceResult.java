// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.scm.outputs.GetDeviceAvailableLicensess;
import com.pulumi.scm.outputs.GetDeviceInstalledLicense;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDeviceResult {
    /**
     * @return The AntiVirusVersion param.
     * 
     */
    private String antiVirusVersion;
    /**
     * @return The AppReleaseDate param.
     * 
     */
    private String appReleaseDate;
    /**
     * @return The AppVersion param.
     * 
     */
    private String appVersion;
    /**
     * @return The AvReleaseDate param.
     * 
     */
    private String avReleaseDate;
    /**
     * @return The AvailableLicensess param.
     * 
     */
    private List<GetDeviceAvailableLicensess> availableLicensesses;
    /**
     * @return The ConnectedSince param.
     * 
     */
    private String connectedSince;
    /**
     * @return The DevCertDetail param.
     * 
     */
    private String devCertDetail;
    /**
     * @return The DevCertExpiryDate param.
     * 
     */
    private String devCertExpiryDate;
    /**
     * @return The Family param.
     * 
     */
    private String family;
    /**
     * @return The GpClientVerion param.
     * 
     */
    private String gpClientVerion;
    /**
     * @return The GpDataVersion param.
     * 
     */
    private String gpDataVersion;
    /**
     * @return The HaPeerSerial param.
     * 
     */
    private String haPeerSerial;
    /**
     * @return The HaPeerState param.
     * 
     */
    private String haPeerState;
    /**
     * @return The HaState param.
     * 
     */
    private String haState;
    /**
     * @return The Hostname param.
     * 
     */
    private String hostname;
    /**
     * @return The Id param.
     * 
     */
    private String id;
    /**
     * @return The InstalledLicenses param.
     * 
     */
    private List<GetDeviceInstalledLicense> installedLicenses;
    /**
     * @return The IotReleaseDate param.
     * 
     */
    private String iotReleaseDate;
    /**
     * @return The IotVersion param.
     * 
     */
    private String iotVersion;
    /**
     * @return The IpAddress param.
     * 
     */
    private String ipAddress;
    /**
     * @return The IpV6Address param.
     * 
     */
    private String ipV6Address;
    /**
     * @return The IsConnected param.
     * 
     */
    private Boolean isConnected;
    /**
     * @return The LicenseMatch param.
     * 
     */
    private Boolean licenseMatch;
    /**
     * @return The LogDbVersion param.
     * 
     */
    private String logDbVersion;
    /**
     * @return The MacAddress param.
     * 
     */
    private String macAddress;
    /**
     * @return The Model param.
     * 
     */
    private String model;
    /**
     * @return The Serial param.
     * 
     */
    private String serial;
    /**
     * @return The SoftwareVersion param.
     * 
     */
    private String softwareVersion;
    private String tfid;
    /**
     * @return The ThreatReleaseDate param.
     * 
     */
    private String threatReleaseDate;
    /**
     * @return The ThreatVersion param.
     * 
     */
    private String threatVersion;
    /**
     * @return The Uptime param.
     * 
     */
    private String uptime;
    /**
     * @return The UrlDbType param.
     * 
     */
    private String urlDbType;
    /**
     * @return The UrlDbVer param.
     * 
     */
    private String urlDbVer;
    /**
     * @return The VmState param.
     * 
     */
    private String vmState;
    /**
     * @return The WfReleaseDate param.
     * 
     */
    private String wfReleaseDate;
    /**
     * @return The WfVer param.
     * 
     */
    private String wfVer;

    private GetDeviceResult() {}
    /**
     * @return The AntiVirusVersion param.
     * 
     */
    public String antiVirusVersion() {
        return this.antiVirusVersion;
    }
    /**
     * @return The AppReleaseDate param.
     * 
     */
    public String appReleaseDate() {
        return this.appReleaseDate;
    }
    /**
     * @return The AppVersion param.
     * 
     */
    public String appVersion() {
        return this.appVersion;
    }
    /**
     * @return The AvReleaseDate param.
     * 
     */
    public String avReleaseDate() {
        return this.avReleaseDate;
    }
    /**
     * @return The AvailableLicensess param.
     * 
     */
    public List<GetDeviceAvailableLicensess> availableLicensesses() {
        return this.availableLicensesses;
    }
    /**
     * @return The ConnectedSince param.
     * 
     */
    public String connectedSince() {
        return this.connectedSince;
    }
    /**
     * @return The DevCertDetail param.
     * 
     */
    public String devCertDetail() {
        return this.devCertDetail;
    }
    /**
     * @return The DevCertExpiryDate param.
     * 
     */
    public String devCertExpiryDate() {
        return this.devCertExpiryDate;
    }
    /**
     * @return The Family param.
     * 
     */
    public String family() {
        return this.family;
    }
    /**
     * @return The GpClientVerion param.
     * 
     */
    public String gpClientVerion() {
        return this.gpClientVerion;
    }
    /**
     * @return The GpDataVersion param.
     * 
     */
    public String gpDataVersion() {
        return this.gpDataVersion;
    }
    /**
     * @return The HaPeerSerial param.
     * 
     */
    public String haPeerSerial() {
        return this.haPeerSerial;
    }
    /**
     * @return The HaPeerState param.
     * 
     */
    public String haPeerState() {
        return this.haPeerState;
    }
    /**
     * @return The HaState param.
     * 
     */
    public String haState() {
        return this.haState;
    }
    /**
     * @return The Hostname param.
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return The Id param.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The InstalledLicenses param.
     * 
     */
    public List<GetDeviceInstalledLicense> installedLicenses() {
        return this.installedLicenses;
    }
    /**
     * @return The IotReleaseDate param.
     * 
     */
    public String iotReleaseDate() {
        return this.iotReleaseDate;
    }
    /**
     * @return The IotVersion param.
     * 
     */
    public String iotVersion() {
        return this.iotVersion;
    }
    /**
     * @return The IpAddress param.
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return The IpV6Address param.
     * 
     */
    public String ipV6Address() {
        return this.ipV6Address;
    }
    /**
     * @return The IsConnected param.
     * 
     */
    public Boolean isConnected() {
        return this.isConnected;
    }
    /**
     * @return The LicenseMatch param.
     * 
     */
    public Boolean licenseMatch() {
        return this.licenseMatch;
    }
    /**
     * @return The LogDbVersion param.
     * 
     */
    public String logDbVersion() {
        return this.logDbVersion;
    }
    /**
     * @return The MacAddress param.
     * 
     */
    public String macAddress() {
        return this.macAddress;
    }
    /**
     * @return The Model param.
     * 
     */
    public String model() {
        return this.model;
    }
    /**
     * @return The Serial param.
     * 
     */
    public String serial() {
        return this.serial;
    }
    /**
     * @return The SoftwareVersion param.
     * 
     */
    public String softwareVersion() {
        return this.softwareVersion;
    }
    public String tfid() {
        return this.tfid;
    }
    /**
     * @return The ThreatReleaseDate param.
     * 
     */
    public String threatReleaseDate() {
        return this.threatReleaseDate;
    }
    /**
     * @return The ThreatVersion param.
     * 
     */
    public String threatVersion() {
        return this.threatVersion;
    }
    /**
     * @return The Uptime param.
     * 
     */
    public String uptime() {
        return this.uptime;
    }
    /**
     * @return The UrlDbType param.
     * 
     */
    public String urlDbType() {
        return this.urlDbType;
    }
    /**
     * @return The UrlDbVer param.
     * 
     */
    public String urlDbVer() {
        return this.urlDbVer;
    }
    /**
     * @return The VmState param.
     * 
     */
    public String vmState() {
        return this.vmState;
    }
    /**
     * @return The WfReleaseDate param.
     * 
     */
    public String wfReleaseDate() {
        return this.wfReleaseDate;
    }
    /**
     * @return The WfVer param.
     * 
     */
    public String wfVer() {
        return this.wfVer;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDeviceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String antiVirusVersion;
        private String appReleaseDate;
        private String appVersion;
        private String avReleaseDate;
        private List<GetDeviceAvailableLicensess> availableLicensesses;
        private String connectedSince;
        private String devCertDetail;
        private String devCertExpiryDate;
        private String family;
        private String gpClientVerion;
        private String gpDataVersion;
        private String haPeerSerial;
        private String haPeerState;
        private String haState;
        private String hostname;
        private String id;
        private List<GetDeviceInstalledLicense> installedLicenses;
        private String iotReleaseDate;
        private String iotVersion;
        private String ipAddress;
        private String ipV6Address;
        private Boolean isConnected;
        private Boolean licenseMatch;
        private String logDbVersion;
        private String macAddress;
        private String model;
        private String serial;
        private String softwareVersion;
        private String tfid;
        private String threatReleaseDate;
        private String threatVersion;
        private String uptime;
        private String urlDbType;
        private String urlDbVer;
        private String vmState;
        private String wfReleaseDate;
        private String wfVer;
        public Builder() {}
        public Builder(GetDeviceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.antiVirusVersion = defaults.antiVirusVersion;
    	      this.appReleaseDate = defaults.appReleaseDate;
    	      this.appVersion = defaults.appVersion;
    	      this.avReleaseDate = defaults.avReleaseDate;
    	      this.availableLicensesses = defaults.availableLicensesses;
    	      this.connectedSince = defaults.connectedSince;
    	      this.devCertDetail = defaults.devCertDetail;
    	      this.devCertExpiryDate = defaults.devCertExpiryDate;
    	      this.family = defaults.family;
    	      this.gpClientVerion = defaults.gpClientVerion;
    	      this.gpDataVersion = defaults.gpDataVersion;
    	      this.haPeerSerial = defaults.haPeerSerial;
    	      this.haPeerState = defaults.haPeerState;
    	      this.haState = defaults.haState;
    	      this.hostname = defaults.hostname;
    	      this.id = defaults.id;
    	      this.installedLicenses = defaults.installedLicenses;
    	      this.iotReleaseDate = defaults.iotReleaseDate;
    	      this.iotVersion = defaults.iotVersion;
    	      this.ipAddress = defaults.ipAddress;
    	      this.ipV6Address = defaults.ipV6Address;
    	      this.isConnected = defaults.isConnected;
    	      this.licenseMatch = defaults.licenseMatch;
    	      this.logDbVersion = defaults.logDbVersion;
    	      this.macAddress = defaults.macAddress;
    	      this.model = defaults.model;
    	      this.serial = defaults.serial;
    	      this.softwareVersion = defaults.softwareVersion;
    	      this.tfid = defaults.tfid;
    	      this.threatReleaseDate = defaults.threatReleaseDate;
    	      this.threatVersion = defaults.threatVersion;
    	      this.uptime = defaults.uptime;
    	      this.urlDbType = defaults.urlDbType;
    	      this.urlDbVer = defaults.urlDbVer;
    	      this.vmState = defaults.vmState;
    	      this.wfReleaseDate = defaults.wfReleaseDate;
    	      this.wfVer = defaults.wfVer;
        }

        @CustomType.Setter
        public Builder antiVirusVersion(String antiVirusVersion) {
            if (antiVirusVersion == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "antiVirusVersion");
            }
            this.antiVirusVersion = antiVirusVersion;
            return this;
        }
        @CustomType.Setter
        public Builder appReleaseDate(String appReleaseDate) {
            if (appReleaseDate == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "appReleaseDate");
            }
            this.appReleaseDate = appReleaseDate;
            return this;
        }
        @CustomType.Setter
        public Builder appVersion(String appVersion) {
            if (appVersion == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "appVersion");
            }
            this.appVersion = appVersion;
            return this;
        }
        @CustomType.Setter
        public Builder avReleaseDate(String avReleaseDate) {
            if (avReleaseDate == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "avReleaseDate");
            }
            this.avReleaseDate = avReleaseDate;
            return this;
        }
        @CustomType.Setter
        public Builder availableLicensesses(List<GetDeviceAvailableLicensess> availableLicensesses) {
            if (availableLicensesses == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "availableLicensesses");
            }
            this.availableLicensesses = availableLicensesses;
            return this;
        }
        public Builder availableLicensesses(GetDeviceAvailableLicensess... availableLicensesses) {
            return availableLicensesses(List.of(availableLicensesses));
        }
        @CustomType.Setter
        public Builder connectedSince(String connectedSince) {
            if (connectedSince == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "connectedSince");
            }
            this.connectedSince = connectedSince;
            return this;
        }
        @CustomType.Setter
        public Builder devCertDetail(String devCertDetail) {
            if (devCertDetail == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "devCertDetail");
            }
            this.devCertDetail = devCertDetail;
            return this;
        }
        @CustomType.Setter
        public Builder devCertExpiryDate(String devCertExpiryDate) {
            if (devCertExpiryDate == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "devCertExpiryDate");
            }
            this.devCertExpiryDate = devCertExpiryDate;
            return this;
        }
        @CustomType.Setter
        public Builder family(String family) {
            if (family == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "family");
            }
            this.family = family;
            return this;
        }
        @CustomType.Setter
        public Builder gpClientVerion(String gpClientVerion) {
            if (gpClientVerion == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "gpClientVerion");
            }
            this.gpClientVerion = gpClientVerion;
            return this;
        }
        @CustomType.Setter
        public Builder gpDataVersion(String gpDataVersion) {
            if (gpDataVersion == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "gpDataVersion");
            }
            this.gpDataVersion = gpDataVersion;
            return this;
        }
        @CustomType.Setter
        public Builder haPeerSerial(String haPeerSerial) {
            if (haPeerSerial == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "haPeerSerial");
            }
            this.haPeerSerial = haPeerSerial;
            return this;
        }
        @CustomType.Setter
        public Builder haPeerState(String haPeerState) {
            if (haPeerState == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "haPeerState");
            }
            this.haPeerState = haPeerState;
            return this;
        }
        @CustomType.Setter
        public Builder haState(String haState) {
            if (haState == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "haState");
            }
            this.haState = haState;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder installedLicenses(List<GetDeviceInstalledLicense> installedLicenses) {
            if (installedLicenses == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "installedLicenses");
            }
            this.installedLicenses = installedLicenses;
            return this;
        }
        public Builder installedLicenses(GetDeviceInstalledLicense... installedLicenses) {
            return installedLicenses(List.of(installedLicenses));
        }
        @CustomType.Setter
        public Builder iotReleaseDate(String iotReleaseDate) {
            if (iotReleaseDate == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "iotReleaseDate");
            }
            this.iotReleaseDate = iotReleaseDate;
            return this;
        }
        @CustomType.Setter
        public Builder iotVersion(String iotVersion) {
            if (iotVersion == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "iotVersion");
            }
            this.iotVersion = iotVersion;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(String ipAddress) {
            if (ipAddress == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "ipAddress");
            }
            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder ipV6Address(String ipV6Address) {
            if (ipV6Address == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "ipV6Address");
            }
            this.ipV6Address = ipV6Address;
            return this;
        }
        @CustomType.Setter
        public Builder isConnected(Boolean isConnected) {
            if (isConnected == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "isConnected");
            }
            this.isConnected = isConnected;
            return this;
        }
        @CustomType.Setter
        public Builder licenseMatch(Boolean licenseMatch) {
            if (licenseMatch == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "licenseMatch");
            }
            this.licenseMatch = licenseMatch;
            return this;
        }
        @CustomType.Setter
        public Builder logDbVersion(String logDbVersion) {
            if (logDbVersion == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "logDbVersion");
            }
            this.logDbVersion = logDbVersion;
            return this;
        }
        @CustomType.Setter
        public Builder macAddress(String macAddress) {
            if (macAddress == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "macAddress");
            }
            this.macAddress = macAddress;
            return this;
        }
        @CustomType.Setter
        public Builder model(String model) {
            if (model == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "model");
            }
            this.model = model;
            return this;
        }
        @CustomType.Setter
        public Builder serial(String serial) {
            if (serial == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "serial");
            }
            this.serial = serial;
            return this;
        }
        @CustomType.Setter
        public Builder softwareVersion(String softwareVersion) {
            if (softwareVersion == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "softwareVersion");
            }
            this.softwareVersion = softwareVersion;
            return this;
        }
        @CustomType.Setter
        public Builder tfid(String tfid) {
            if (tfid == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "tfid");
            }
            this.tfid = tfid;
            return this;
        }
        @CustomType.Setter
        public Builder threatReleaseDate(String threatReleaseDate) {
            if (threatReleaseDate == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "threatReleaseDate");
            }
            this.threatReleaseDate = threatReleaseDate;
            return this;
        }
        @CustomType.Setter
        public Builder threatVersion(String threatVersion) {
            if (threatVersion == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "threatVersion");
            }
            this.threatVersion = threatVersion;
            return this;
        }
        @CustomType.Setter
        public Builder uptime(String uptime) {
            if (uptime == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "uptime");
            }
            this.uptime = uptime;
            return this;
        }
        @CustomType.Setter
        public Builder urlDbType(String urlDbType) {
            if (urlDbType == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "urlDbType");
            }
            this.urlDbType = urlDbType;
            return this;
        }
        @CustomType.Setter
        public Builder urlDbVer(String urlDbVer) {
            if (urlDbVer == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "urlDbVer");
            }
            this.urlDbVer = urlDbVer;
            return this;
        }
        @CustomType.Setter
        public Builder vmState(String vmState) {
            if (vmState == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "vmState");
            }
            this.vmState = vmState;
            return this;
        }
        @CustomType.Setter
        public Builder wfReleaseDate(String wfReleaseDate) {
            if (wfReleaseDate == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "wfReleaseDate");
            }
            this.wfReleaseDate = wfReleaseDate;
            return this;
        }
        @CustomType.Setter
        public Builder wfVer(String wfVer) {
            if (wfVer == null) {
              throw new MissingRequiredPropertyException("GetDeviceResult", "wfVer");
            }
            this.wfVer = wfVer;
            return this;
        }
        public GetDeviceResult build() {
            final var _resultValue = new GetDeviceResult();
            _resultValue.antiVirusVersion = antiVirusVersion;
            _resultValue.appReleaseDate = appReleaseDate;
            _resultValue.appVersion = appVersion;
            _resultValue.avReleaseDate = avReleaseDate;
            _resultValue.availableLicensesses = availableLicensesses;
            _resultValue.connectedSince = connectedSince;
            _resultValue.devCertDetail = devCertDetail;
            _resultValue.devCertExpiryDate = devCertExpiryDate;
            _resultValue.family = family;
            _resultValue.gpClientVerion = gpClientVerion;
            _resultValue.gpDataVersion = gpDataVersion;
            _resultValue.haPeerSerial = haPeerSerial;
            _resultValue.haPeerState = haPeerState;
            _resultValue.haState = haState;
            _resultValue.hostname = hostname;
            _resultValue.id = id;
            _resultValue.installedLicenses = installedLicenses;
            _resultValue.iotReleaseDate = iotReleaseDate;
            _resultValue.iotVersion = iotVersion;
            _resultValue.ipAddress = ipAddress;
            _resultValue.ipV6Address = ipV6Address;
            _resultValue.isConnected = isConnected;
            _resultValue.licenseMatch = licenseMatch;
            _resultValue.logDbVersion = logDbVersion;
            _resultValue.macAddress = macAddress;
            _resultValue.model = model;
            _resultValue.serial = serial;
            _resultValue.softwareVersion = softwareVersion;
            _resultValue.tfid = tfid;
            _resultValue.threatReleaseDate = threatReleaseDate;
            _resultValue.threatVersion = threatVersion;
            _resultValue.uptime = uptime;
            _resultValue.urlDbType = urlDbType;
            _resultValue.urlDbVer = urlDbVer;
            _resultValue.vmState = vmState;
            _resultValue.wfReleaseDate = wfReleaseDate;
            _resultValue.wfVer = wfVer;
            return _resultValue;
        }
    }
}
