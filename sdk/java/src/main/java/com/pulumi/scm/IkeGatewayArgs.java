// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.scm.inputs.IkeGatewayAuthenticationArgs;
import com.pulumi.scm.inputs.IkeGatewayLocalIdArgs;
import com.pulumi.scm.inputs.IkeGatewayPeerAddressArgs;
import com.pulumi.scm.inputs.IkeGatewayPeerIdArgs;
import com.pulumi.scm.inputs.IkeGatewayProtocolArgs;
import com.pulumi.scm.inputs.IkeGatewayProtocolCommonArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IkeGatewayArgs extends com.pulumi.resources.ResourceArgs {

    public static final IkeGatewayArgs Empty = new IkeGatewayArgs();

    /**
     * The Authentication param.
     * 
     */
    @Import(name="authentication", required=true)
    private Output<IkeGatewayAuthenticationArgs> authentication;

    /**
     * @return The Authentication param.
     * 
     */
    public Output<IkeGatewayAuthenticationArgs> authentication() {
        return this.authentication;
    }

    /**
     * The Device param.
     * 
     */
    @Import(name="device")
    private @Nullable Output<String> device;

    /**
     * @return The Device param.
     * 
     */
    public Optional<Output<String>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * The Folder param.
     * 
     */
    @Import(name="folder")
    private @Nullable Output<String> folder;

    /**
     * @return The Folder param.
     * 
     */
    public Optional<Output<String>> folder() {
        return Optional.ofNullable(this.folder);
    }

    /**
     * The LocalId param.
     * 
     */
    @Import(name="localId")
    private @Nullable Output<IkeGatewayLocalIdArgs> localId;

    /**
     * @return The LocalId param.
     * 
     */
    public Optional<Output<IkeGatewayLocalIdArgs>> localId() {
        return Optional.ofNullable(this.localId);
    }

    /**
     * Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The PeerAddress param.
     * 
     */
    @Import(name="peerAddress", required=true)
    private Output<IkeGatewayPeerAddressArgs> peerAddress;

    /**
     * @return The PeerAddress param.
     * 
     */
    public Output<IkeGatewayPeerAddressArgs> peerAddress() {
        return this.peerAddress;
    }

    /**
     * The PeerId param.
     * 
     */
    @Import(name="peerId")
    private @Nullable Output<IkeGatewayPeerIdArgs> peerId;

    /**
     * @return The PeerId param.
     * 
     */
    public Optional<Output<IkeGatewayPeerIdArgs>> peerId() {
        return Optional.ofNullable(this.peerId);
    }

    /**
     * The Protocol param.
     * 
     */
    @Import(name="protocol", required=true)
    private Output<IkeGatewayProtocolArgs> protocol;

    /**
     * @return The Protocol param.
     * 
     */
    public Output<IkeGatewayProtocolArgs> protocol() {
        return this.protocol;
    }

    /**
     * The ProtocolCommon param.
     * 
     */
    @Import(name="protocolCommon")
    private @Nullable Output<IkeGatewayProtocolCommonArgs> protocolCommon;

    /**
     * @return The ProtocolCommon param.
     * 
     */
    public Optional<Output<IkeGatewayProtocolCommonArgs>> protocolCommon() {
        return Optional.ofNullable(this.protocolCommon);
    }

    /**
     * The Snippet param.
     * 
     */
    @Import(name="snippet")
    private @Nullable Output<String> snippet;

    /**
     * @return The Snippet param.
     * 
     */
    public Optional<Output<String>> snippet() {
        return Optional.ofNullable(this.snippet);
    }

    private IkeGatewayArgs() {}

    private IkeGatewayArgs(IkeGatewayArgs $) {
        this.authentication = $.authentication;
        this.device = $.device;
        this.folder = $.folder;
        this.localId = $.localId;
        this.name = $.name;
        this.peerAddress = $.peerAddress;
        this.peerId = $.peerId;
        this.protocol = $.protocol;
        this.protocolCommon = $.protocolCommon;
        this.snippet = $.snippet;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IkeGatewayArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IkeGatewayArgs $;

        public Builder() {
            $ = new IkeGatewayArgs();
        }

        public Builder(IkeGatewayArgs defaults) {
            $ = new IkeGatewayArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authentication The Authentication param.
         * 
         * @return builder
         * 
         */
        public Builder authentication(Output<IkeGatewayAuthenticationArgs> authentication) {
            $.authentication = authentication;
            return this;
        }

        /**
         * @param authentication The Authentication param.
         * 
         * @return builder
         * 
         */
        public Builder authentication(IkeGatewayAuthenticationArgs authentication) {
            return authentication(Output.of(authentication));
        }

        /**
         * @param device The Device param.
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<String> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device The Device param.
         * 
         * @return builder
         * 
         */
        public Builder device(String device) {
            return device(Output.of(device));
        }

        /**
         * @param folder The Folder param.
         * 
         * @return builder
         * 
         */
        public Builder folder(@Nullable Output<String> folder) {
            $.folder = folder;
            return this;
        }

        /**
         * @param folder The Folder param.
         * 
         * @return builder
         * 
         */
        public Builder folder(String folder) {
            return folder(Output.of(folder));
        }

        /**
         * @param localId The LocalId param.
         * 
         * @return builder
         * 
         */
        public Builder localId(@Nullable Output<IkeGatewayLocalIdArgs> localId) {
            $.localId = localId;
            return this;
        }

        /**
         * @param localId The LocalId param.
         * 
         * @return builder
         * 
         */
        public Builder localId(IkeGatewayLocalIdArgs localId) {
            return localId(Output.of(localId));
        }

        /**
         * @param name Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param peerAddress The PeerAddress param.
         * 
         * @return builder
         * 
         */
        public Builder peerAddress(Output<IkeGatewayPeerAddressArgs> peerAddress) {
            $.peerAddress = peerAddress;
            return this;
        }

        /**
         * @param peerAddress The PeerAddress param.
         * 
         * @return builder
         * 
         */
        public Builder peerAddress(IkeGatewayPeerAddressArgs peerAddress) {
            return peerAddress(Output.of(peerAddress));
        }

        /**
         * @param peerId The PeerId param.
         * 
         * @return builder
         * 
         */
        public Builder peerId(@Nullable Output<IkeGatewayPeerIdArgs> peerId) {
            $.peerId = peerId;
            return this;
        }

        /**
         * @param peerId The PeerId param.
         * 
         * @return builder
         * 
         */
        public Builder peerId(IkeGatewayPeerIdArgs peerId) {
            return peerId(Output.of(peerId));
        }

        /**
         * @param protocol The Protocol param.
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<IkeGatewayProtocolArgs> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The Protocol param.
         * 
         * @return builder
         * 
         */
        public Builder protocol(IkeGatewayProtocolArgs protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param protocolCommon The ProtocolCommon param.
         * 
         * @return builder
         * 
         */
        public Builder protocolCommon(@Nullable Output<IkeGatewayProtocolCommonArgs> protocolCommon) {
            $.protocolCommon = protocolCommon;
            return this;
        }

        /**
         * @param protocolCommon The ProtocolCommon param.
         * 
         * @return builder
         * 
         */
        public Builder protocolCommon(IkeGatewayProtocolCommonArgs protocolCommon) {
            return protocolCommon(Output.of(protocolCommon));
        }

        /**
         * @param snippet The Snippet param.
         * 
         * @return builder
         * 
         */
        public Builder snippet(@Nullable Output<String> snippet) {
            $.snippet = snippet;
            return this;
        }

        /**
         * @param snippet The Snippet param.
         * 
         * @return builder
         * 
         */
        public Builder snippet(String snippet) {
            return snippet(Output.of(snippet));
        }

        public IkeGatewayArgs build() {
            if ($.authentication == null) {
                throw new MissingRequiredPropertyException("IkeGatewayArgs", "authentication");
            }
            if ($.peerAddress == null) {
                throw new MissingRequiredPropertyException("IkeGatewayArgs", "peerAddress");
            }
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("IkeGatewayArgs", "protocol");
            }
            return $;
        }
    }

}
