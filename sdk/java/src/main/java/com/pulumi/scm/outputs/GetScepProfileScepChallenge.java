// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.scm.outputs.GetScepProfileScepChallengeDynamicChallenge;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetScepProfileScepChallenge {
    /**
     * @return The DynamicChallenge param.
     * 
     */
    private GetScepProfileScepChallengeDynamicChallenge dynamicChallenge;
    /**
     * @return Challenge to use for SCEP server on mobile clients. String length must not exceed 1024 characters.
     * 
     */
    private String fixed;
    /**
     * @return The None param. String must be one of these: `&#34;&#34;`.
     * 
     */
    private String none;

    private GetScepProfileScepChallenge() {}
    /**
     * @return The DynamicChallenge param.
     * 
     */
    public GetScepProfileScepChallengeDynamicChallenge dynamicChallenge() {
        return this.dynamicChallenge;
    }
    /**
     * @return Challenge to use for SCEP server on mobile clients. String length must not exceed 1024 characters.
     * 
     */
    public String fixed() {
        return this.fixed;
    }
    /**
     * @return The None param. String must be one of these: `&#34;&#34;`.
     * 
     */
    public String none() {
        return this.none;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetScepProfileScepChallenge defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetScepProfileScepChallengeDynamicChallenge dynamicChallenge;
        private String fixed;
        private String none;
        public Builder() {}
        public Builder(GetScepProfileScepChallenge defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dynamicChallenge = defaults.dynamicChallenge;
    	      this.fixed = defaults.fixed;
    	      this.none = defaults.none;
        }

        @CustomType.Setter
        public Builder dynamicChallenge(GetScepProfileScepChallengeDynamicChallenge dynamicChallenge) {
            if (dynamicChallenge == null) {
              throw new MissingRequiredPropertyException("GetScepProfileScepChallenge", "dynamicChallenge");
            }
            this.dynamicChallenge = dynamicChallenge;
            return this;
        }
        @CustomType.Setter
        public Builder fixed(String fixed) {
            if (fixed == null) {
              throw new MissingRequiredPropertyException("GetScepProfileScepChallenge", "fixed");
            }
            this.fixed = fixed;
            return this;
        }
        @CustomType.Setter
        public Builder none(String none) {
            if (none == null) {
              throw new MissingRequiredPropertyException("GetScepProfileScepChallenge", "none");
            }
            this.none = none;
            return this;
        }
        public GetScepProfileScepChallenge build() {
            final var _resultValue = new GetScepProfileScepChallenge();
            _resultValue.dynamicChallenge = dynamicChallenge;
            _resultValue.fixed = fixed;
            _resultValue.none = none;
            return _resultValue;
        }
    }
}
