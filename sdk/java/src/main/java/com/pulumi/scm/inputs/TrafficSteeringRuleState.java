// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.scm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.scm.inputs.TrafficSteeringRuleActionArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TrafficSteeringRuleState extends com.pulumi.resources.ResourceArgs {

    public static final TrafficSteeringRuleState Empty = new TrafficSteeringRuleState();

    /**
     * The Action param.
     * 
     */
    @Import(name="action")
    private @Nullable Output<TrafficSteeringRuleActionArgs> action;

    /**
     * @return The Action param.
     * 
     */
    public Optional<Output<TrafficSteeringRuleActionArgs>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * The Category param.
     * 
     */
    @Import(name="categories")
    private @Nullable Output<List<String>> categories;

    /**
     * @return The Category param.
     * 
     */
    public Optional<Output<List<String>>> categories() {
        return Optional.ofNullable(this.categories);
    }

    /**
     * The Destination param.
     * 
     */
    @Import(name="destinations")
    private @Nullable Output<List<String>> destinations;

    /**
     * @return The Destination param.
     * 
     */
    public Optional<Output<List<String>>> destinations() {
        return Optional.ofNullable(this.destinations);
    }

    /**
     * The Folder param. String can either be a specific string(`&#34;Service Connections&#34;`) or match this regex: `^[0-9a-zA-Z._\s-]{1,}$`. Default: `&#34;Service Connections&#34;`.
     * 
     */
    @Import(name="folder")
    private @Nullable Output<String> folder;

    /**
     * @return The Folder param. String can either be a specific string(`&#34;Service Connections&#34;`) or match this regex: `^[0-9a-zA-Z._\s-]{1,}$`. Default: `&#34;Service Connections&#34;`.
     * 
     */
    public Optional<Output<String>> folder() {
        return Optional.ofNullable(this.folder);
    }

    /**
     * The Name param.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The Name param.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The Service param.
     * 
     */
    @Import(name="services")
    private @Nullable Output<List<String>> services;

    /**
     * @return The Service param.
     * 
     */
    public Optional<Output<List<String>>> services() {
        return Optional.ofNullable(this.services);
    }

    /**
     * The SourceUser param.
     * 
     */
    @Import(name="sourceUsers")
    private @Nullable Output<List<String>> sourceUsers;

    /**
     * @return The SourceUser param.
     * 
     */
    public Optional<Output<List<String>>> sourceUsers() {
        return Optional.ofNullable(this.sourceUsers);
    }

    /**
     * The Source param.
     * 
     */
    @Import(name="sources")
    private @Nullable Output<List<String>> sources;

    /**
     * @return The Source param.
     * 
     */
    public Optional<Output<List<String>>> sources() {
        return Optional.ofNullable(this.sources);
    }

    @Import(name="tfid")
    private @Nullable Output<String> tfid;

    public Optional<Output<String>> tfid() {
        return Optional.ofNullable(this.tfid);
    }

    private TrafficSteeringRuleState() {}

    private TrafficSteeringRuleState(TrafficSteeringRuleState $) {
        this.action = $.action;
        this.categories = $.categories;
        this.destinations = $.destinations;
        this.folder = $.folder;
        this.name = $.name;
        this.services = $.services;
        this.sourceUsers = $.sourceUsers;
        this.sources = $.sources;
        this.tfid = $.tfid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TrafficSteeringRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TrafficSteeringRuleState $;

        public Builder() {
            $ = new TrafficSteeringRuleState();
        }

        public Builder(TrafficSteeringRuleState defaults) {
            $ = new TrafficSteeringRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param action The Action param.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<TrafficSteeringRuleActionArgs> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action The Action param.
         * 
         * @return builder
         * 
         */
        public Builder action(TrafficSteeringRuleActionArgs action) {
            return action(Output.of(action));
        }

        /**
         * @param categories The Category param.
         * 
         * @return builder
         * 
         */
        public Builder categories(@Nullable Output<List<String>> categories) {
            $.categories = categories;
            return this;
        }

        /**
         * @param categories The Category param.
         * 
         * @return builder
         * 
         */
        public Builder categories(List<String> categories) {
            return categories(Output.of(categories));
        }

        /**
         * @param categories The Category param.
         * 
         * @return builder
         * 
         */
        public Builder categories(String... categories) {
            return categories(List.of(categories));
        }

        /**
         * @param destinations The Destination param.
         * 
         * @return builder
         * 
         */
        public Builder destinations(@Nullable Output<List<String>> destinations) {
            $.destinations = destinations;
            return this;
        }

        /**
         * @param destinations The Destination param.
         * 
         * @return builder
         * 
         */
        public Builder destinations(List<String> destinations) {
            return destinations(Output.of(destinations));
        }

        /**
         * @param destinations The Destination param.
         * 
         * @return builder
         * 
         */
        public Builder destinations(String... destinations) {
            return destinations(List.of(destinations));
        }

        /**
         * @param folder The Folder param. String can either be a specific string(`&#34;Service Connections&#34;`) or match this regex: `^[0-9a-zA-Z._\s-]{1,}$`. Default: `&#34;Service Connections&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder folder(@Nullable Output<String> folder) {
            $.folder = folder;
            return this;
        }

        /**
         * @param folder The Folder param. String can either be a specific string(`&#34;Service Connections&#34;`) or match this regex: `^[0-9a-zA-Z._\s-]{1,}$`. Default: `&#34;Service Connections&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder folder(String folder) {
            return folder(Output.of(folder));
        }

        /**
         * @param name The Name param.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The Name param.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param services The Service param.
         * 
         * @return builder
         * 
         */
        public Builder services(@Nullable Output<List<String>> services) {
            $.services = services;
            return this;
        }

        /**
         * @param services The Service param.
         * 
         * @return builder
         * 
         */
        public Builder services(List<String> services) {
            return services(Output.of(services));
        }

        /**
         * @param services The Service param.
         * 
         * @return builder
         * 
         */
        public Builder services(String... services) {
            return services(List.of(services));
        }

        /**
         * @param sourceUsers The SourceUser param.
         * 
         * @return builder
         * 
         */
        public Builder sourceUsers(@Nullable Output<List<String>> sourceUsers) {
            $.sourceUsers = sourceUsers;
            return this;
        }

        /**
         * @param sourceUsers The SourceUser param.
         * 
         * @return builder
         * 
         */
        public Builder sourceUsers(List<String> sourceUsers) {
            return sourceUsers(Output.of(sourceUsers));
        }

        /**
         * @param sourceUsers The SourceUser param.
         * 
         * @return builder
         * 
         */
        public Builder sourceUsers(String... sourceUsers) {
            return sourceUsers(List.of(sourceUsers));
        }

        /**
         * @param sources The Source param.
         * 
         * @return builder
         * 
         */
        public Builder sources(@Nullable Output<List<String>> sources) {
            $.sources = sources;
            return this;
        }

        /**
         * @param sources The Source param.
         * 
         * @return builder
         * 
         */
        public Builder sources(List<String> sources) {
            return sources(Output.of(sources));
        }

        /**
         * @param sources The Source param.
         * 
         * @return builder
         * 
         */
        public Builder sources(String... sources) {
            return sources(List.of(sources));
        }

        public Builder tfid(@Nullable Output<String> tfid) {
            $.tfid = tfid;
            return this;
        }

        public Builder tfid(String tfid) {
            return tfid(Output.of(tfid));
        }

        public TrafficSteeringRuleState build() {
            return $;
        }
    }

}
