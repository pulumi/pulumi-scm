// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Scm
{
    public static class GetSecurityRule
    {
        /// <summary>
        /// Retrieves a config item.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scm = Pulumi.Scm;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Scm.GetSecurityRule.Invoke(new()
        ///     {
        ///         Id = "1234-56-789",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSecurityRuleResult> InvokeAsync(GetSecurityRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSecurityRuleResult>("scm:index/getSecurityRule:getSecurityRule", args ?? new GetSecurityRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a config item.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scm = Pulumi.Scm;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Scm.GetSecurityRule.Invoke(new()
        ///     {
        ///         Id = "1234-56-789",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSecurityRuleResult> Invoke(GetSecurityRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityRuleResult>("scm:index/getSecurityRule:getSecurityRule", args ?? new GetSecurityRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecurityRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Id param.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetSecurityRuleArgs()
        {
        }
        public static new GetSecurityRuleArgs Empty => new GetSecurityRuleArgs();
    }

    public sealed class GetSecurityRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Id param.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetSecurityRuleInvokeArgs()
        {
        }
        public static new GetSecurityRuleInvokeArgs Empty => new GetSecurityRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetSecurityRuleResult
    {
        /// <summary>
        /// The action to be taken when the rule is matched. String must be one of these: `"allow"`, `"deny"`, `"drop"`, `"reset-client"`, `"reset-server"`, `"reset-both"`.
        /// </summary>
        public readonly string Action;
        /// <summary>
        /// The application(s) being accessed.
        /// </summary>
        public readonly ImmutableArray<string> Applications;
        /// <summary>
        /// The URL categories being accessed.
        /// </summary>
        public readonly ImmutableArray<string> Categories;
        /// <summary>
        /// The description of the security rule.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The destination Host Integrity Profile(s).
        /// </summary>
        public readonly ImmutableArray<string> DestinationHips;
        /// <summary>
        /// The destination address(es).
        /// </summary>
        public readonly ImmutableArray<string> Destinations;
        /// <summary>
        /// The state of the security rule. Default: `false`.
        /// </summary>
        public readonly bool Disabled;
        /// <summary>
        /// The source security zone(s).
        /// </summary>
        public readonly ImmutableArray<string> Froms;
        /// <summary>
        /// The Id param.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The external log forwarding profile.
        /// </summary>
        public readonly string LogSetting;
        /// <summary>
        /// The name of the security rule.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Negate the destination addresses(es). Default: `false`.
        /// </summary>
        public readonly bool NegateDestination;
        /// <summary>
        /// Negate the source address(es). Default: `false`.
        /// </summary>
        public readonly bool NegateSource;
        /// <summary>
        /// The security profile object.
        /// </summary>
        public readonly Outputs.GetSecurityRuleProfileSettingResult ProfileSetting;
        /// <summary>
        /// The service(s) being accessed.
        /// </summary>
        public readonly ImmutableArray<string> Services;
        /// <summary>
        /// The source Host Integrity Profile(s).
        /// </summary>
        public readonly ImmutableArray<string> SourceHips;
        /// <summary>
        /// The source user(s) or group(s).
        /// </summary>
        public readonly ImmutableArray<string> SourceUsers;
        /// <summary>
        /// The source address(es).
        /// </summary>
        public readonly ImmutableArray<string> Sources;
        /// <summary>
        /// The tags associated with the security rule.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        public readonly string Tfid;
        /// <summary>
        /// The destination security zone(s).
        /// </summary>
        public readonly ImmutableArray<string> Tos;

        [OutputConstructor]
        private GetSecurityRuleResult(
            string action,

            ImmutableArray<string> applications,

            ImmutableArray<string> categories,

            string description,

            ImmutableArray<string> destinationHips,

            ImmutableArray<string> destinations,

            bool disabled,

            ImmutableArray<string> froms,

            string id,

            string logSetting,

            string name,

            bool negateDestination,

            bool negateSource,

            Outputs.GetSecurityRuleProfileSettingResult profileSetting,

            ImmutableArray<string> services,

            ImmutableArray<string> sourceHips,

            ImmutableArray<string> sourceUsers,

            ImmutableArray<string> sources,

            ImmutableArray<string> tags,

            string tfid,

            ImmutableArray<string> tos)
        {
            Action = action;
            Applications = applications;
            Categories = categories;
            Description = description;
            DestinationHips = destinationHips;
            Destinations = destinations;
            Disabled = disabled;
            Froms = froms;
            Id = id;
            LogSetting = logSetting;
            Name = name;
            NegateDestination = negateDestination;
            NegateSource = negateSource;
            ProfileSetting = profileSetting;
            Services = services;
            SourceHips = sourceHips;
            SourceUsers = sourceUsers;
            Sources = sources;
            Tags = tags;
            Tfid = tfid;
            Tos = tos;
        }
    }
}
