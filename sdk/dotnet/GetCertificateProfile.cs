// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Scm
{
    public static class GetCertificateProfile
    {
        /// <summary>
        /// Retrieves a config item.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scm = Pulumi.Scm;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Scm.GetCertificateProfile.Invoke(new()
        ///     {
        ///         Id = "1234-56-789",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCertificateProfileResult> InvokeAsync(GetCertificateProfileArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCertificateProfileResult>("scm:index/getCertificateProfile:getCertificateProfile", args ?? new GetCertificateProfileArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a config item.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scm = Pulumi.Scm;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Scm.GetCertificateProfile.Invoke(new()
        ///     {
        ///         Id = "1234-56-789",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCertificateProfileResult> Invoke(GetCertificateProfileInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificateProfileResult>("scm:index/getCertificateProfile:getCertificateProfile", args ?? new GetCertificateProfileInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCertificateProfileArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Id param.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetCertificateProfileArgs()
        {
        }
        public static new GetCertificateProfileArgs Empty => new GetCertificateProfileArgs();
    }

    public sealed class GetCertificateProfileInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Id param.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetCertificateProfileInvokeArgs()
        {
        }
        public static new GetCertificateProfileInvokeArgs Empty => new GetCertificateProfileInvokeArgs();
    }


    [OutputType]
    public sealed class GetCertificateProfileResult
    {
        /// <summary>
        /// The BlockExpiredCert param.
        /// </summary>
        public readonly bool BlockExpiredCert;
        /// <summary>
        /// The BlockTimeoutCert param.
        /// </summary>
        public readonly bool BlockTimeoutCert;
        /// <summary>
        /// The BlockUnauthenticatedCert param.
        /// </summary>
        public readonly bool BlockUnauthenticatedCert;
        /// <summary>
        /// The BlockUnknownCert param.
        /// </summary>
        public readonly bool BlockUnknownCert;
        /// <summary>
        /// The CaCertificates param.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCertificateProfileCaCertificateResult> CaCertificates;
        /// <summary>
        /// The CertStatusTimeout param.
        /// </summary>
        public readonly string CertStatusTimeout;
        /// <summary>
        /// The CrlReceiveTimeout param.
        /// </summary>
        public readonly string CrlReceiveTimeout;
        /// <summary>
        /// The Domain param.
        /// </summary>
        public readonly string Domain;
        /// <summary>
        /// The Id param.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 63 characters.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The OcspReceiveTimeout param.
        /// </summary>
        public readonly string OcspReceiveTimeout;
        public readonly string Tfid;
        /// <summary>
        /// The UseCrl param.
        /// </summary>
        public readonly bool UseCrl;
        /// <summary>
        /// The UseOcsp param.
        /// </summary>
        public readonly bool UseOcsp;
        /// <summary>
        /// The UsernameField param.
        /// </summary>
        public readonly Outputs.GetCertificateProfileUsernameFieldResult UsernameField;

        [OutputConstructor]
        private GetCertificateProfileResult(
            bool blockExpiredCert,

            bool blockTimeoutCert,

            bool blockUnauthenticatedCert,

            bool blockUnknownCert,

            ImmutableArray<Outputs.GetCertificateProfileCaCertificateResult> caCertificates,

            string certStatusTimeout,

            string crlReceiveTimeout,

            string domain,

            string id,

            string name,

            string ocspReceiveTimeout,

            string tfid,

            bool useCrl,

            bool useOcsp,

            Outputs.GetCertificateProfileUsernameFieldResult usernameField)
        {
            BlockExpiredCert = blockExpiredCert;
            BlockTimeoutCert = blockTimeoutCert;
            BlockUnauthenticatedCert = blockUnauthenticatedCert;
            BlockUnknownCert = blockUnknownCert;
            CaCertificates = caCertificates;
            CertStatusTimeout = certStatusTimeout;
            CrlReceiveTimeout = crlReceiveTimeout;
            Domain = domain;
            Id = id;
            Name = name;
            OcspReceiveTimeout = ocspReceiveTimeout;
            Tfid = tfid;
            UseCrl = useCrl;
            UseOcsp = useOcsp;
            UsernameField = usernameField;
        }
    }
}
