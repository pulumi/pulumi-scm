// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Scm
{
    public static class GetAppOverrideRule
    {
        /// <summary>
        /// Retrieves a config item.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scm = Pulumi.Scm;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Scm.GetAppOverrideRule.Invoke(new()
        ///     {
        ///         Id = "1234-56-789",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAppOverrideRuleResult> InvokeAsync(GetAppOverrideRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAppOverrideRuleResult>("scm:index/getAppOverrideRule:getAppOverrideRule", args ?? new GetAppOverrideRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a config item.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scm = Pulumi.Scm;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Scm.GetAppOverrideRule.Invoke(new()
        ///     {
        ///         Id = "1234-56-789",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAppOverrideRuleResult> Invoke(GetAppOverrideRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAppOverrideRuleResult>("scm:index/getAppOverrideRule:getAppOverrideRule", args ?? new GetAppOverrideRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAppOverrideRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Id param.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetAppOverrideRuleArgs()
        {
        }
        public static new GetAppOverrideRuleArgs Empty => new GetAppOverrideRuleArgs();
    }

    public sealed class GetAppOverrideRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Id param.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetAppOverrideRuleInvokeArgs()
        {
        }
        public static new GetAppOverrideRuleInvokeArgs Empty => new GetAppOverrideRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetAppOverrideRuleResult
    {
        /// <summary>
        /// The Application param.
        /// </summary>
        public readonly string Application;
        /// <summary>
        /// The Description param. String length must not exceed 1024 characters.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The Destinations param.
        /// </summary>
        public readonly ImmutableArray<string> Destinations;
        /// <summary>
        /// The Disabled param. Default: `false`.
        /// </summary>
        public readonly bool Disabled;
        /// <summary>
        /// The Froms param.
        /// </summary>
        public readonly ImmutableArray<string> Froms;
        /// <summary>
        /// The GroupTag param.
        /// </summary>
        public readonly string GroupTag;
        /// <summary>
        /// The Id param.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Name param. String length must not exceed 63 characters. String validation regex: `^[a-zA-Z0-9._-]+$`.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The NegateDestination param. Default: `false`.
        /// </summary>
        public readonly bool NegateDestination;
        /// <summary>
        /// The NegateSource param. Default: `false`.
        /// </summary>
        public readonly bool NegateSource;
        /// <summary>
        /// The Port param. Value must be between 0 and 65535.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// The Protocol param. String must be one of these: `"tcp"`, `"udp"`.
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// The Sources param.
        /// </summary>
        public readonly ImmutableArray<string> Sources;
        /// <summary>
        /// The Tags param.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        public readonly string Tfid;
        /// <summary>
        /// The Tos param.
        /// </summary>
        public readonly ImmutableArray<string> Tos;

        [OutputConstructor]
        private GetAppOverrideRuleResult(
            string application,

            string description,

            ImmutableArray<string> destinations,

            bool disabled,

            ImmutableArray<string> froms,

            string groupTag,

            string id,

            string name,

            bool negateDestination,

            bool negateSource,

            int port,

            string protocol,

            ImmutableArray<string> sources,

            ImmutableArray<string> tags,

            string tfid,

            ImmutableArray<string> tos)
        {
            Application = application;
            Description = description;
            Destinations = destinations;
            Disabled = disabled;
            Froms = froms;
            GroupTag = groupTag;
            Id = id;
            Name = name;
            NegateDestination = negateDestination;
            NegateSource = negateSource;
            Port = port;
            Protocol = protocol;
            Sources = sources;
            Tags = tags;
            Tfid = tfid;
            Tos = tos;
        }
    }
}
