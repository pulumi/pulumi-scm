// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Scm
{
    /// <summary>
    /// Retrieves a config item.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scm = Pulumi.Scm;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Scm.RemoteNetwork("example");
    /// 
    /// });
    /// ```
    /// </summary>
    [ScmResourceType("scm:index/remoteNetwork:RemoteNetwork")]
    public partial class RemoteNetwork : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The EcmpLoadBalancing param. String must be one of these: `"enable"`, `"disable"`. Default: `"disable"`.
        /// </summary>
        [Output("ecmpLoadBalancing")]
        public Output<string> EcmpLoadBalancing { get; private set; } = null!;

        /// <summary>
        /// ecmp*tunnels is required when ecmp*load*balancing is enable.
        /// </summary>
        [Output("ecmpTunnels")]
        public Output<ImmutableArray<Outputs.RemoteNetworkEcmpTunnel>> EcmpTunnels { get; private set; } = null!;

        /// <summary>
        /// (Internal use) Encrypted values returned from the API.
        /// </summary>
        [Output("encryptedValues")]
        public Output<ImmutableDictionary<string, string>> EncryptedValues { get; private set; } = null!;

        /// <summary>
        /// The Folder param. String can either be a specific string(`"Remote Networks"`) or match this regex: `^[\s0-9a-zA-Z._-]{1,}$`. Default: `"Remote Networks"`.
        /// </summary>
        [Output("folder")]
        public Output<string> Folder { get; private set; } = null!;

        /// <summary>
        /// ipsec*tunnel is required when ecmp*load_balancing is disable.
        /// </summary>
        [Output("ipsecTunnel")]
        public Output<string?> IpsecTunnel { get; private set; } = null!;

        /// <summary>
        /// New customer will only be on aggregate bandwidth licensing. String length must exceed 1 characters. Default: `"FWAAS-AGGREGATE"`.
        /// </summary>
        [Output("licenseType")]
        public Output<string> LicenseType { get; private set; } = null!;

        /// <summary>
        /// Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// setup the protocol when ecmp*load*balancing is disable.
        /// </summary>
        [Output("protocol")]
        public Output<Outputs.RemoteNetworkProtocol?> Protocol { get; private set; } = null!;

        /// <summary>
        /// The Region param. String length must exceed 1 characters.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// specify secondary ipsec_tunnel if needed.
        /// </summary>
        [Output("secondaryIpsecTunnel")]
        public Output<string?> SecondaryIpsecTunnel { get; private set; } = null!;

        /// <summary>
        /// spn-name is needed when license_type is FWAAS-AGGREGATE.
        /// </summary>
        [Output("spnName")]
        public Output<string?> SpnName { get; private set; } = null!;

        /// <summary>
        /// The Subnets param.
        /// </summary>
        [Output("subnets")]
        public Output<ImmutableArray<string>> Subnets { get; private set; } = null!;

        [Output("tfid")]
        public Output<string> Tfid { get; private set; } = null!;


        /// <summary>
        /// Create a RemoteNetwork resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RemoteNetwork(string name, RemoteNetworkArgs args, CustomResourceOptions? options = null)
            : base("scm:index/remoteNetwork:RemoteNetwork", name, args ?? new RemoteNetworkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RemoteNetwork(string name, Input<string> id, RemoteNetworkState? state = null, CustomResourceOptions? options = null)
            : base("scm:index/remoteNetwork:RemoteNetwork", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "encryptedValues",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RemoteNetwork resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RemoteNetwork Get(string name, Input<string> id, RemoteNetworkState? state = null, CustomResourceOptions? options = null)
        {
            return new RemoteNetwork(name, id, state, options);
        }
    }

    public sealed class RemoteNetworkArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The EcmpLoadBalancing param. String must be one of these: `"enable"`, `"disable"`. Default: `"disable"`.
        /// </summary>
        [Input("ecmpLoadBalancing")]
        public Input<string>? EcmpLoadBalancing { get; set; }

        [Input("ecmpTunnels")]
        private InputList<Inputs.RemoteNetworkEcmpTunnelArgs>? _ecmpTunnels;

        /// <summary>
        /// ecmp*tunnels is required when ecmp*load*balancing is enable.
        /// </summary>
        public InputList<Inputs.RemoteNetworkEcmpTunnelArgs> EcmpTunnels
        {
            get => _ecmpTunnels ?? (_ecmpTunnels = new InputList<Inputs.RemoteNetworkEcmpTunnelArgs>());
            set => _ecmpTunnels = value;
        }

        /// <summary>
        /// The Folder param. String can either be a specific string(`"Remote Networks"`) or match this regex: `^[\s0-9a-zA-Z._-]{1,}$`. Default: `"Remote Networks"`.
        /// </summary>
        [Input("folder")]
        public Input<string>? Folder { get; set; }

        /// <summary>
        /// ipsec*tunnel is required when ecmp*load_balancing is disable.
        /// </summary>
        [Input("ipsecTunnel")]
        public Input<string>? IpsecTunnel { get; set; }

        /// <summary>
        /// New customer will only be on aggregate bandwidth licensing. String length must exceed 1 characters. Default: `"FWAAS-AGGREGATE"`.
        /// </summary>
        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        /// <summary>
        /// Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// setup the protocol when ecmp*load*balancing is disable.
        /// </summary>
        [Input("protocol")]
        public Input<Inputs.RemoteNetworkProtocolArgs>? Protocol { get; set; }

        /// <summary>
        /// The Region param. String length must exceed 1 characters.
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        /// <summary>
        /// specify secondary ipsec_tunnel if needed.
        /// </summary>
        [Input("secondaryIpsecTunnel")]
        public Input<string>? SecondaryIpsecTunnel { get; set; }

        /// <summary>
        /// spn-name is needed when license_type is FWAAS-AGGREGATE.
        /// </summary>
        [Input("spnName")]
        public Input<string>? SpnName { get; set; }

        [Input("subnets")]
        private InputList<string>? _subnets;

        /// <summary>
        /// The Subnets param.
        /// </summary>
        public InputList<string> Subnets
        {
            get => _subnets ?? (_subnets = new InputList<string>());
            set => _subnets = value;
        }

        public RemoteNetworkArgs()
        {
        }
        public static new RemoteNetworkArgs Empty => new RemoteNetworkArgs();
    }

    public sealed class RemoteNetworkState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The EcmpLoadBalancing param. String must be one of these: `"enable"`, `"disable"`. Default: `"disable"`.
        /// </summary>
        [Input("ecmpLoadBalancing")]
        public Input<string>? EcmpLoadBalancing { get; set; }

        [Input("ecmpTunnels")]
        private InputList<Inputs.RemoteNetworkEcmpTunnelGetArgs>? _ecmpTunnels;

        /// <summary>
        /// ecmp*tunnels is required when ecmp*load*balancing is enable.
        /// </summary>
        public InputList<Inputs.RemoteNetworkEcmpTunnelGetArgs> EcmpTunnels
        {
            get => _ecmpTunnels ?? (_ecmpTunnels = new InputList<Inputs.RemoteNetworkEcmpTunnelGetArgs>());
            set => _ecmpTunnels = value;
        }

        [Input("encryptedValues")]
        private InputMap<string>? _encryptedValues;

        /// <summary>
        /// (Internal use) Encrypted values returned from the API.
        /// </summary>
        public InputMap<string> EncryptedValues
        {
            get => _encryptedValues ?? (_encryptedValues = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _encryptedValues = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The Folder param. String can either be a specific string(`"Remote Networks"`) or match this regex: `^[\s0-9a-zA-Z._-]{1,}$`. Default: `"Remote Networks"`.
        /// </summary>
        [Input("folder")]
        public Input<string>? Folder { get; set; }

        /// <summary>
        /// ipsec*tunnel is required when ecmp*load_balancing is disable.
        /// </summary>
        [Input("ipsecTunnel")]
        public Input<string>? IpsecTunnel { get; set; }

        /// <summary>
        /// New customer will only be on aggregate bandwidth licensing. String length must exceed 1 characters. Default: `"FWAAS-AGGREGATE"`.
        /// </summary>
        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        /// <summary>
        /// Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// setup the protocol when ecmp*load*balancing is disable.
        /// </summary>
        [Input("protocol")]
        public Input<Inputs.RemoteNetworkProtocolGetArgs>? Protocol { get; set; }

        /// <summary>
        /// The Region param. String length must exceed 1 characters.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// specify secondary ipsec_tunnel if needed.
        /// </summary>
        [Input("secondaryIpsecTunnel")]
        public Input<string>? SecondaryIpsecTunnel { get; set; }

        /// <summary>
        /// spn-name is needed when license_type is FWAAS-AGGREGATE.
        /// </summary>
        [Input("spnName")]
        public Input<string>? SpnName { get; set; }

        [Input("subnets")]
        private InputList<string>? _subnets;

        /// <summary>
        /// The Subnets param.
        /// </summary>
        public InputList<string> Subnets
        {
            get => _subnets ?? (_subnets = new InputList<string>());
            set => _subnets = value;
        }

        [Input("tfid")]
        public Input<string>? Tfid { get; set; }

        public RemoteNetworkState()
        {
        }
        public static new RemoteNetworkState Empty => new RemoteNetworkState();
    }
}
