// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Scm
{
    /// <summary>
    /// Retrieves a config item.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scm = Pulumi.Scm;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Scm.Snippet("example");
    /// 
    /// });
    /// ```
    /// </summary>
    [ScmResourceType("scm:index/snippet:Snippet")]
    public partial class Snippet : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The CreatedIn param.
        /// </summary>
        [Output("createdIn")]
        public Output<string> CreatedIn { get; private set; } = null!;

        /// <summary>
        /// The Description param.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The DisplayName param.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The Folders param.
        /// </summary>
        [Output("folders")]
        public Output<ImmutableArray<Outputs.SnippetFolder>> Folders { get; private set; } = null!;

        /// <summary>
        /// The Labels param.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableArray<string>> Labels { get; private set; } = null!;

        /// <summary>
        /// The LastUpdate param.
        /// </summary>
        [Output("lastUpdate")]
        public Output<string> LastUpdate { get; private set; } = null!;

        /// <summary>
        /// The Name param.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The SharedIn param.
        /// </summary>
        [Output("sharedIn")]
        public Output<string> SharedIn { get; private set; } = null!;

        [Output("tfid")]
        public Output<string> Tfid { get; private set; } = null!;

        /// <summary>
        /// The Type param. String must be one of these: `"predefined"`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Snippet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Snippet(string name, SnippetArgs? args = null, CustomResourceOptions? options = null)
            : base("scm:index/snippet:Snippet", name, args ?? new SnippetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Snippet(string name, Input<string> id, SnippetState? state = null, CustomResourceOptions? options = null)
            : base("scm:index/snippet:Snippet", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Snippet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Snippet Get(string name, Input<string> id, SnippetState? state = null, CustomResourceOptions? options = null)
        {
            return new Snippet(name, id, state, options);
        }
    }

    public sealed class SnippetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Description param.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("labels")]
        private InputList<string>? _labels;

        /// <summary>
        /// The Labels param.
        /// </summary>
        public InputList<string> Labels
        {
            get => _labels ?? (_labels = new InputList<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The Name param.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public SnippetArgs()
        {
        }
        public static new SnippetArgs Empty => new SnippetArgs();
    }

    public sealed class SnippetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The CreatedIn param.
        /// </summary>
        [Input("createdIn")]
        public Input<string>? CreatedIn { get; set; }

        /// <summary>
        /// The Description param.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The DisplayName param.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("folders")]
        private InputList<Inputs.SnippetFolderGetArgs>? _folders;

        /// <summary>
        /// The Folders param.
        /// </summary>
        public InputList<Inputs.SnippetFolderGetArgs> Folders
        {
            get => _folders ?? (_folders = new InputList<Inputs.SnippetFolderGetArgs>());
            set => _folders = value;
        }

        [Input("labels")]
        private InputList<string>? _labels;

        /// <summary>
        /// The Labels param.
        /// </summary>
        public InputList<string> Labels
        {
            get => _labels ?? (_labels = new InputList<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The LastUpdate param.
        /// </summary>
        [Input("lastUpdate")]
        public Input<string>? LastUpdate { get; set; }

        /// <summary>
        /// The Name param.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The SharedIn param.
        /// </summary>
        [Input("sharedIn")]
        public Input<string>? SharedIn { get; set; }

        [Input("tfid")]
        public Input<string>? Tfid { get; set; }

        /// <summary>
        /// The Type param. String must be one of these: `"predefined"`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public SnippetState()
        {
        }
        public static new SnippetState Empty => new SnippetState();
    }
}
