// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Scm
{
    public static class GetAntiSpywareSignature
    {
        /// <summary>
        /// Retrieves a config item.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scm = Pulumi.Scm;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Scm.GetAntiSpywareSignature.Invoke(new()
        ///     {
        ///         Id = "1234-56-789",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAntiSpywareSignatureResult> InvokeAsync(GetAntiSpywareSignatureArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAntiSpywareSignatureResult>("scm:index/getAntiSpywareSignature:getAntiSpywareSignature", args ?? new GetAntiSpywareSignatureArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a config item.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scm = Pulumi.Scm;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Scm.GetAntiSpywareSignature.Invoke(new()
        ///     {
        ///         Id = "1234-56-789",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAntiSpywareSignatureResult> Invoke(GetAntiSpywareSignatureInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAntiSpywareSignatureResult>("scm:index/getAntiSpywareSignature:getAntiSpywareSignature", args ?? new GetAntiSpywareSignatureInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAntiSpywareSignatureArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Id param.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetAntiSpywareSignatureArgs()
        {
        }
        public static new GetAntiSpywareSignatureArgs Empty => new GetAntiSpywareSignatureArgs();
    }

    public sealed class GetAntiSpywareSignatureInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Id param.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetAntiSpywareSignatureInvokeArgs()
        {
        }
        public static new GetAntiSpywareSignatureInvokeArgs Empty => new GetAntiSpywareSignatureInvokeArgs();
    }


    [OutputType]
    public sealed class GetAntiSpywareSignatureResult
    {
        /// <summary>
        /// The Bugtraqs param.
        /// </summary>
        public readonly ImmutableArray<string> Bugtraqs;
        /// <summary>
        /// The Comment param. String length must not exceed 256 characters.
        /// </summary>
        public readonly string Comment;
        /// <summary>
        /// The Cves param.
        /// </summary>
        public readonly ImmutableArray<string> Cves;
        /// <summary>
        /// The DefaultAction param.
        /// </summary>
        public readonly Outputs.GetAntiSpywareSignatureDefaultActionResult DefaultAction;
        /// <summary>
        /// The Direction param. String must be one of these: `"client2server"`, `"server2client"`, `"both"`.
        /// </summary>
        public readonly string Direction;
        /// <summary>
        /// The Id param.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The References param.
        /// </summary>
        public readonly ImmutableArray<string> References;
        /// <summary>
        /// The Severity param. String must be one of these: `"critical"`, `"low"`, `"high"`, `"medium"`, `"informational"`.
        /// </summary>
        public readonly string Severity;
        /// <summary>
        /// The Signature param.
        /// </summary>
        public readonly Outputs.GetAntiSpywareSignatureSignatureResult Signature;
        public readonly string Tfid;
        /// <summary>
        /// threat id range \n\n and \n\n. Value must be between 15000 and 70000000.
        /// </summary>
        public readonly int ThreatId;
        /// <summary>
        /// The Threatname param. String length must not exceed 1024 characters.
        /// </summary>
        public readonly string Threatname;
        /// <summary>
        /// The Vendors param.
        /// </summary>
        public readonly ImmutableArray<string> Vendors;

        [OutputConstructor]
        private GetAntiSpywareSignatureResult(
            ImmutableArray<string> bugtraqs,

            string comment,

            ImmutableArray<string> cves,

            Outputs.GetAntiSpywareSignatureDefaultActionResult defaultAction,

            string direction,

            string id,

            ImmutableArray<string> references,

            string severity,

            Outputs.GetAntiSpywareSignatureSignatureResult signature,

            string tfid,

            int threatId,

            string threatname,

            ImmutableArray<string> vendors)
        {
            Bugtraqs = bugtraqs;
            Comment = comment;
            Cves = cves;
            DefaultAction = defaultAction;
            Direction = direction;
            Id = id;
            References = references;
            Severity = severity;
            Signature = signature;
            Tfid = tfid;
            ThreatId = threatId;
            Threatname = threatname;
            Vendors = vendors;
        }
    }
}
