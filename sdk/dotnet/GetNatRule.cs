// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Scm
{
    public static class GetNatRule
    {
        /// <summary>
        /// Retrieves a config item.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scm = Pulumi.Scm;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Scm.GetNatRule.Invoke(new()
        ///     {
        ///         Id = "1234-56-789",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNatRuleResult> InvokeAsync(GetNatRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNatRuleResult>("scm:index/getNatRule:getNatRule", args ?? new GetNatRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a config item.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scm = Pulumi.Scm;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Scm.GetNatRule.Invoke(new()
        ///     {
        ///         Id = "1234-56-789",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNatRuleResult> Invoke(GetNatRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNatRuleResult>("scm:index/getNatRule:getNatRule", args ?? new GetNatRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNatRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Id param.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetNatRuleArgs()
        {
        }
        public static new GetNatRuleArgs Empty => new GetNatRuleArgs();
    }

    public sealed class GetNatRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Id param.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetNatRuleInvokeArgs()
        {
        }
        public static new GetNatRuleInvokeArgs Empty => new GetNatRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetNatRuleResult
    {
        /// <summary>
        /// The ActiveActiveDeviceBinding param. String must be one of these: `"primary"`, `"both"`, `"0"`, `"1"`.
        /// </summary>
        public readonly string ActiveActiveDeviceBinding;
        /// <summary>
        /// The Description param.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Static destination translation parameter.
        /// </summary>
        public readonly Outputs.GetNatRuleDestinationTranslationResult DestinationTranslation;
        /// <summary>
        /// The destination address(es). Individual elements in this list are subject to additional validation. String must be one of these: `"any"`.
        /// </summary>
        public readonly ImmutableArray<string> Destinations;
        /// <summary>
        /// The device in which the resource is defined. String length must not exceed 64 characters. String validation regex: `^[a-zA-Z\d-_\. ]+$`.
        /// </summary>
        public readonly string Device;
        /// <summary>
        /// The Disabled param.
        /// </summary>
        public readonly bool Disabled;
        /// <summary>
        /// Dynamic destination translation parameter.
        /// </summary>
        public readonly Outputs.GetNatRuleDynamicDestinationTranslationResult DynamicDestinationTranslation;
        /// <summary>
        /// The folder in which the resource is defined. String length must not exceed 64 characters. String validation regex: `^[a-zA-Z\d-_\. ]+$`.
        /// </summary>
        public readonly string Folder;
        /// <summary>
        /// The source security zone(s). Individual elements in this list are subject to additional validation. String must be one of these: `"any"`.
        /// </summary>
        public readonly ImmutableArray<string> Froms;
        /// <summary>
        /// The GroupTag param.
        /// </summary>
        public readonly string GroupTag;
        /// <summary>
        /// The Id param.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Name param.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The NatType param. String must be one of these: `"ipv4"`, `"nat64"`, `"nptv6"`.
        /// </summary>
        public readonly string NatType;
        /// <summary>
        /// The Service param.
        /// </summary>
        public readonly string Service;
        /// <summary>
        /// The snippet in which the resource is defined. String length must not exceed 64 characters. String validation regex: `^[a-zA-Z\d-_\. ]+$`.
        /// </summary>
        public readonly string Snippet;
        /// <summary>
        /// The SourceTranslation param.
        /// </summary>
        public readonly Outputs.GetNatRuleSourceTranslationResult SourceTranslation;
        /// <summary>
        /// The source address(es). Individual elements in this list are subject to additional validation. String must be one of these: `"any"`.
        /// </summary>
        public readonly ImmutableArray<string> Sources;
        /// <summary>
        /// The Tags param.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// The Target param.
        /// </summary>
        public readonly Outputs.GetNatRuleTargetResult Target;
        public readonly string Tfid;
        /// <summary>
        /// The ToInterface param. String must be one of these: `"any"`.
        /// </summary>
        public readonly string ToInterface;
        /// <summary>
        /// The destination security zone(s).
        /// </summary>
        public readonly ImmutableArray<string> Tos;

        [OutputConstructor]
        private GetNatRuleResult(
            string activeActiveDeviceBinding,

            string description,

            Outputs.GetNatRuleDestinationTranslationResult destinationTranslation,

            ImmutableArray<string> destinations,

            string device,

            bool disabled,

            Outputs.GetNatRuleDynamicDestinationTranslationResult dynamicDestinationTranslation,

            string folder,

            ImmutableArray<string> froms,

            string groupTag,

            string id,

            string name,

            string natType,

            string service,

            string snippet,

            Outputs.GetNatRuleSourceTranslationResult sourceTranslation,

            ImmutableArray<string> sources,

            ImmutableArray<string> tags,

            Outputs.GetNatRuleTargetResult target,

            string tfid,

            string toInterface,

            ImmutableArray<string> tos)
        {
            ActiveActiveDeviceBinding = activeActiveDeviceBinding;
            Description = description;
            DestinationTranslation = destinationTranslation;
            Destinations = destinations;
            Device = device;
            Disabled = disabled;
            DynamicDestinationTranslation = dynamicDestinationTranslation;
            Folder = folder;
            Froms = froms;
            GroupTag = groupTag;
            Id = id;
            Name = name;
            NatType = natType;
            Service = service;
            Snippet = snippet;
            SourceTranslation = sourceTranslation;
            Sources = sources;
            Tags = tags;
            Target = target;
            Tfid = tfid;
            ToInterface = toInterface;
            Tos = tos;
        }
    }
}
