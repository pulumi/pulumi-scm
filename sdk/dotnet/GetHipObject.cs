// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Scm
{
    public static class GetHipObject
    {
        /// <summary>
        /// Retrieves a config item.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scm = Pulumi.Scm;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Scm.GetHipObject.Invoke(new()
        ///     {
        ///         Id = "1234-56-789",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetHipObjectResult> InvokeAsync(GetHipObjectArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetHipObjectResult>("scm:index/getHipObject:getHipObject", args ?? new GetHipObjectArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a config item.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scm = Pulumi.Scm;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Scm.GetHipObject.Invoke(new()
        ///     {
        ///         Id = "1234-56-789",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetHipObjectResult> Invoke(GetHipObjectInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetHipObjectResult>("scm:index/getHipObject:getHipObject", args ?? new GetHipObjectInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetHipObjectArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Id param.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetHipObjectArgs()
        {
        }
        public static new GetHipObjectArgs Empty => new GetHipObjectArgs();
    }

    public sealed class GetHipObjectInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Id param.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetHipObjectInvokeArgs()
        {
        }
        public static new GetHipObjectInvokeArgs Empty => new GetHipObjectInvokeArgs();
    }


    [OutputType]
    public sealed class GetHipObjectResult
    {
        /// <summary>
        /// The AntiMalware param.
        /// </summary>
        public readonly Outputs.GetHipObjectAntiMalwareResult AntiMalware;
        /// <summary>
        /// The Certificate param.
        /// </summary>
        public readonly Outputs.GetHipObjectCertificateResult Certificate;
        /// <summary>
        /// The CustomChecks param.
        /// </summary>
        public readonly Outputs.GetHipObjectCustomChecksResult CustomChecks;
        /// <summary>
        /// The DataLossPrevention param.
        /// </summary>
        public readonly Outputs.GetHipObjectDataLossPreventionResult DataLossPrevention;
        /// <summary>
        /// The Description param. String length must not exceed 255 characters.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The DiskBackup param.
        /// </summary>
        public readonly Outputs.GetHipObjectDiskBackupResult DiskBackup;
        /// <summary>
        /// The DiskEncryption param.
        /// </summary>
        public readonly Outputs.GetHipObjectDiskEncryptionResult DiskEncryption;
        /// <summary>
        /// The Firewall param.
        /// </summary>
        public readonly Outputs.GetHipObjectFirewallResult Firewall;
        /// <summary>
        /// The HostInfo param.
        /// </summary>
        public readonly Outputs.GetHipObjectHostInfoResult HostInfo;
        /// <summary>
        /// The Id param.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The MobileDevice param.
        /// </summary>
        public readonly Outputs.GetHipObjectMobileDeviceResult MobileDevice;
        /// <summary>
        /// Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The NetworkInfo param.
        /// </summary>
        public readonly Outputs.GetHipObjectNetworkInfoResult NetworkInfo;
        /// <summary>
        /// The PatchManagement param.
        /// </summary>
        public readonly Outputs.GetHipObjectPatchManagementResult PatchManagement;
        public readonly string Tfid;

        [OutputConstructor]
        private GetHipObjectResult(
            Outputs.GetHipObjectAntiMalwareResult antiMalware,

            Outputs.GetHipObjectCertificateResult certificate,

            Outputs.GetHipObjectCustomChecksResult customChecks,

            Outputs.GetHipObjectDataLossPreventionResult dataLossPrevention,

            string description,

            Outputs.GetHipObjectDiskBackupResult diskBackup,

            Outputs.GetHipObjectDiskEncryptionResult diskEncryption,

            Outputs.GetHipObjectFirewallResult firewall,

            Outputs.GetHipObjectHostInfoResult hostInfo,

            string id,

            Outputs.GetHipObjectMobileDeviceResult mobileDevice,

            string name,

            Outputs.GetHipObjectNetworkInfoResult networkInfo,

            Outputs.GetHipObjectPatchManagementResult patchManagement,

            string tfid)
        {
            AntiMalware = antiMalware;
            Certificate = certificate;
            CustomChecks = customChecks;
            DataLossPrevention = dataLossPrevention;
            Description = description;
            DiskBackup = diskBackup;
            DiskEncryption = diskEncryption;
            Firewall = firewall;
            HostInfo = hostInfo;
            Id = id;
            MobileDevice = mobileDevice;
            Name = name;
            NetworkInfo = networkInfo;
            PatchManagement = patchManagement;
            Tfid = tfid;
        }
    }
}
