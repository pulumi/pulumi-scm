// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Scm
{
    public static class GetRemoteNetwork
    {
        /// <summary>
        /// Retrieves a config item.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scm = Pulumi.Scm;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Scm.GetRemoteNetwork.Invoke(new()
        ///     {
        ///         Id = "1234-56-789",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRemoteNetworkResult> InvokeAsync(GetRemoteNetworkArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRemoteNetworkResult>("scm:index/getRemoteNetwork:getRemoteNetwork", args ?? new GetRemoteNetworkArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a config item.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scm = Pulumi.Scm;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Scm.GetRemoteNetwork.Invoke(new()
        ///     {
        ///         Id = "1234-56-789",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRemoteNetworkResult> Invoke(GetRemoteNetworkInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRemoteNetworkResult>("scm:index/getRemoteNetwork:getRemoteNetwork", args ?? new GetRemoteNetworkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRemoteNetworkArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Folder param. String can either be a specific string(`"Remote Networks"`) or match this regex: `^[\s0-9a-zA-Z._-]{1,}$`. Default: `"Remote Networks"`.
        /// </summary>
        [Input("folder")]
        public string? Folder { get; set; }

        /// <summary>
        /// The Id param.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetRemoteNetworkArgs()
        {
        }
        public static new GetRemoteNetworkArgs Empty => new GetRemoteNetworkArgs();
    }

    public sealed class GetRemoteNetworkInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Folder param. String can either be a specific string(`"Remote Networks"`) or match this regex: `^[\s0-9a-zA-Z._-]{1,}$`. Default: `"Remote Networks"`.
        /// </summary>
        [Input("folder")]
        public Input<string>? Folder { get; set; }

        /// <summary>
        /// The Id param.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetRemoteNetworkInvokeArgs()
        {
        }
        public static new GetRemoteNetworkInvokeArgs Empty => new GetRemoteNetworkInvokeArgs();
    }


    [OutputType]
    public sealed class GetRemoteNetworkResult
    {
        /// <summary>
        /// The EcmpLoadBalancing param. String must be one of these: `"enable"`, `"disable"`. Default: `"disable"`.
        /// </summary>
        public readonly string EcmpLoadBalancing;
        /// <summary>
        /// ecmp*tunnels is required when ecmp*load*balancing is enable.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRemoteNetworkEcmpTunnelResult> EcmpTunnels;
        /// <summary>
        /// The Folder param. String can either be a specific string(`"Remote Networks"`) or match this regex: `^[\s0-9a-zA-Z._-]{1,}$`. Default: `"Remote Networks"`.
        /// </summary>
        public readonly string Folder;
        /// <summary>
        /// The Id param.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// ipsec*tunnel is required when ecmp*load_balancing is disable.
        /// </summary>
        public readonly string IpsecTunnel;
        /// <summary>
        /// New customer will only be on aggregate bandwidth licensing. String length must exceed 1 characters. Default: `"FWAAS-AGGREGATE"`.
        /// </summary>
        public readonly string LicenseType;
        /// <summary>
        /// Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// setup the protocol when ecmp*load*balancing is disable.
        /// </summary>
        public readonly Outputs.GetRemoteNetworkProtocolResult Protocol;
        /// <summary>
        /// The Region param. String length must exceed 1 characters.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// specify secondary ipsec_tunnel if needed.
        /// </summary>
        public readonly string SecondaryIpsecTunnel;
        /// <summary>
        /// spn-name is needed when license_type is FWAAS-AGGREGATE.
        /// </summary>
        public readonly string SpnName;
        /// <summary>
        /// The Subnets param.
        /// </summary>
        public readonly ImmutableArray<string> Subnets;
        public readonly string Tfid;

        [OutputConstructor]
        private GetRemoteNetworkResult(
            string ecmpLoadBalancing,

            ImmutableArray<Outputs.GetRemoteNetworkEcmpTunnelResult> ecmpTunnels,

            string folder,

            string id,

            string ipsecTunnel,

            string licenseType,

            string name,

            Outputs.GetRemoteNetworkProtocolResult protocol,

            string region,

            string secondaryIpsecTunnel,

            string spnName,

            ImmutableArray<string> subnets,

            string tfid)
        {
            EcmpLoadBalancing = ecmpLoadBalancing;
            EcmpTunnels = ecmpTunnels;
            Folder = folder;
            Id = id;
            IpsecTunnel = ipsecTunnel;
            LicenseType = licenseType;
            Name = name;
            Protocol = protocol;
            Region = region;
            SecondaryIpsecTunnel = secondaryIpsecTunnel;
            SpnName = spnName;
            Subnets = subnets;
            Tfid = tfid;
        }
    }
}
