// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Scm
{
    public static class GetIkeGateway
    {
        /// <summary>
        /// Retrieves a config item.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scm = Pulumi.Scm;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Scm.GetIkeGateway.Invoke(new()
        ///     {
        ///         Id = "1234-56-789",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetIkeGatewayResult> InvokeAsync(GetIkeGatewayArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIkeGatewayResult>("scm:index/getIkeGateway:getIkeGateway", args ?? new GetIkeGatewayArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a config item.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scm = Pulumi.Scm;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Scm.GetIkeGateway.Invoke(new()
        ///     {
        ///         Id = "1234-56-789",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetIkeGatewayResult> Invoke(GetIkeGatewayInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIkeGatewayResult>("scm:index/getIkeGateway:getIkeGateway", args ?? new GetIkeGatewayInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIkeGatewayArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Device param.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        /// <summary>
        /// The Folder param.
        /// </summary>
        [Input("folder")]
        public string? Folder { get; set; }

        /// <summary>
        /// The Id param.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        /// <summary>
        /// The Snippet param.
        /// </summary>
        [Input("snippet")]
        public string? Snippet { get; set; }

        public GetIkeGatewayArgs()
        {
        }
        public static new GetIkeGatewayArgs Empty => new GetIkeGatewayArgs();
    }

    public sealed class GetIkeGatewayInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Device param.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// The Folder param.
        /// </summary>
        [Input("folder")]
        public Input<string>? Folder { get; set; }

        /// <summary>
        /// The Id param.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// The Snippet param.
        /// </summary>
        [Input("snippet")]
        public Input<string>? Snippet { get; set; }

        public GetIkeGatewayInvokeArgs()
        {
        }
        public static new GetIkeGatewayInvokeArgs Empty => new GetIkeGatewayInvokeArgs();
    }


    [OutputType]
    public sealed class GetIkeGatewayResult
    {
        /// <summary>
        /// The Authentication param.
        /// </summary>
        public readonly Outputs.GetIkeGatewayAuthenticationResult Authentication;
        /// <summary>
        /// The Device param.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// The Folder param.
        /// </summary>
        public readonly string? Folder;
        /// <summary>
        /// The Id param.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The LocalId param.
        /// </summary>
        public readonly Outputs.GetIkeGatewayLocalIdResult LocalId;
        /// <summary>
        /// Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The PeerAddress param.
        /// </summary>
        public readonly Outputs.GetIkeGatewayPeerAddressResult PeerAddress;
        /// <summary>
        /// The PeerId param.
        /// </summary>
        public readonly Outputs.GetIkeGatewayPeerIdResult PeerId;
        /// <summary>
        /// The Protocol param.
        /// </summary>
        public readonly Outputs.GetIkeGatewayProtocolResult Protocol;
        /// <summary>
        /// The ProtocolCommon param.
        /// </summary>
        public readonly Outputs.GetIkeGatewayProtocolCommonResult ProtocolCommon;
        /// <summary>
        /// The Snippet param.
        /// </summary>
        public readonly string? Snippet;
        public readonly string Tfid;

        [OutputConstructor]
        private GetIkeGatewayResult(
            Outputs.GetIkeGatewayAuthenticationResult authentication,

            string? device,

            string? folder,

            string id,

            Outputs.GetIkeGatewayLocalIdResult localId,

            string name,

            Outputs.GetIkeGatewayPeerAddressResult peerAddress,

            Outputs.GetIkeGatewayPeerIdResult peerId,

            Outputs.GetIkeGatewayProtocolResult protocol,

            Outputs.GetIkeGatewayProtocolCommonResult protocolCommon,

            string? snippet,

            string tfid)
        {
            Authentication = authentication;
            Device = device;
            Folder = folder;
            Id = id;
            LocalId = localId;
            Name = name;
            PeerAddress = peerAddress;
            PeerId = peerId;
            Protocol = protocol;
            ProtocolCommon = protocolCommon;
            Snippet = snippet;
            Tfid = tfid;
        }
    }
}
