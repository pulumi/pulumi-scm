// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Scm
{
    /// <summary>
    /// Retrieves a config item.
    /// </summary>
    [ScmResourceType("scm:index/ikeGateway:IkeGateway")]
    public partial class IkeGateway : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Authentication param.
        /// </summary>
        [Output("authentication")]
        public Output<Outputs.IkeGatewayAuthentication> Authentication { get; private set; } = null!;

        /// <summary>
        /// The Device param.
        /// </summary>
        [Output("device")]
        public Output<string?> Device { get; private set; } = null!;

        /// <summary>
        /// (Internal use) Encrypted values returned from the API.
        /// </summary>
        [Output("encryptedValues")]
        public Output<ImmutableDictionary<string, string>> EncryptedValues { get; private set; } = null!;

        /// <summary>
        /// The Folder param.
        /// </summary>
        [Output("folder")]
        public Output<string?> Folder { get; private set; } = null!;

        /// <summary>
        /// The LocalId param.
        /// </summary>
        [Output("localId")]
        public Output<Outputs.IkeGatewayLocalId?> LocalId { get; private set; } = null!;

        /// <summary>
        /// Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The PeerAddress param.
        /// </summary>
        [Output("peerAddress")]
        public Output<Outputs.IkeGatewayPeerAddress> PeerAddress { get; private set; } = null!;

        /// <summary>
        /// The PeerId param.
        /// </summary>
        [Output("peerId")]
        public Output<Outputs.IkeGatewayPeerId?> PeerId { get; private set; } = null!;

        /// <summary>
        /// The Protocol param.
        /// </summary>
        [Output("protocol")]
        public Output<Outputs.IkeGatewayProtocol> Protocol { get; private set; } = null!;

        /// <summary>
        /// The ProtocolCommon param.
        /// </summary>
        [Output("protocolCommon")]
        public Output<Outputs.IkeGatewayProtocolCommon?> ProtocolCommon { get; private set; } = null!;

        /// <summary>
        /// The Snippet param.
        /// </summary>
        [Output("snippet")]
        public Output<string?> Snippet { get; private set; } = null!;

        [Output("tfid")]
        public Output<string> Tfid { get; private set; } = null!;


        /// <summary>
        /// Create a IkeGateway resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IkeGateway(string name, IkeGatewayArgs args, CustomResourceOptions? options = null)
            : base("scm:index/ikeGateway:IkeGateway", name, args ?? new IkeGatewayArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IkeGateway(string name, Input<string> id, IkeGatewayState? state = null, CustomResourceOptions? options = null)
            : base("scm:index/ikeGateway:IkeGateway", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "encryptedValues",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IkeGateway resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IkeGateway Get(string name, Input<string> id, IkeGatewayState? state = null, CustomResourceOptions? options = null)
        {
            return new IkeGateway(name, id, state, options);
        }
    }

    public sealed class IkeGatewayArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Authentication param.
        /// </summary>
        [Input("authentication", required: true)]
        public Input<Inputs.IkeGatewayAuthenticationArgs> Authentication { get; set; } = null!;

        /// <summary>
        /// The Device param.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// The Folder param.
        /// </summary>
        [Input("folder")]
        public Input<string>? Folder { get; set; }

        /// <summary>
        /// The LocalId param.
        /// </summary>
        [Input("localId")]
        public Input<Inputs.IkeGatewayLocalIdArgs>? LocalId { get; set; }

        /// <summary>
        /// Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The PeerAddress param.
        /// </summary>
        [Input("peerAddress", required: true)]
        public Input<Inputs.IkeGatewayPeerAddressArgs> PeerAddress { get; set; } = null!;

        /// <summary>
        /// The PeerId param.
        /// </summary>
        [Input("peerId")]
        public Input<Inputs.IkeGatewayPeerIdArgs>? PeerId { get; set; }

        /// <summary>
        /// The Protocol param.
        /// </summary>
        [Input("protocol", required: true)]
        public Input<Inputs.IkeGatewayProtocolArgs> Protocol { get; set; } = null!;

        /// <summary>
        /// The ProtocolCommon param.
        /// </summary>
        [Input("protocolCommon")]
        public Input<Inputs.IkeGatewayProtocolCommonArgs>? ProtocolCommon { get; set; }

        /// <summary>
        /// The Snippet param.
        /// </summary>
        [Input("snippet")]
        public Input<string>? Snippet { get; set; }

        public IkeGatewayArgs()
        {
        }
        public static new IkeGatewayArgs Empty => new IkeGatewayArgs();
    }

    public sealed class IkeGatewayState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Authentication param.
        /// </summary>
        [Input("authentication")]
        public Input<Inputs.IkeGatewayAuthenticationGetArgs>? Authentication { get; set; }

        /// <summary>
        /// The Device param.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("encryptedValues")]
        private InputMap<string>? _encryptedValues;

        /// <summary>
        /// (Internal use) Encrypted values returned from the API.
        /// </summary>
        public InputMap<string> EncryptedValues
        {
            get => _encryptedValues ?? (_encryptedValues = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _encryptedValues = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The Folder param.
        /// </summary>
        [Input("folder")]
        public Input<string>? Folder { get; set; }

        /// <summary>
        /// The LocalId param.
        /// </summary>
        [Input("localId")]
        public Input<Inputs.IkeGatewayLocalIdGetArgs>? LocalId { get; set; }

        /// <summary>
        /// Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The PeerAddress param.
        /// </summary>
        [Input("peerAddress")]
        public Input<Inputs.IkeGatewayPeerAddressGetArgs>? PeerAddress { get; set; }

        /// <summary>
        /// The PeerId param.
        /// </summary>
        [Input("peerId")]
        public Input<Inputs.IkeGatewayPeerIdGetArgs>? PeerId { get; set; }

        /// <summary>
        /// The Protocol param.
        /// </summary>
        [Input("protocol")]
        public Input<Inputs.IkeGatewayProtocolGetArgs>? Protocol { get; set; }

        /// <summary>
        /// The ProtocolCommon param.
        /// </summary>
        [Input("protocolCommon")]
        public Input<Inputs.IkeGatewayProtocolCommonGetArgs>? ProtocolCommon { get; set; }

        /// <summary>
        /// The Snippet param.
        /// </summary>
        [Input("snippet")]
        public Input<string>? Snippet { get; set; }

        [Input("tfid")]
        public Input<string>? Tfid { get; set; }

        public IkeGatewayState()
        {
        }
        public static new IkeGatewayState Empty => new IkeGatewayState();
    }
}
