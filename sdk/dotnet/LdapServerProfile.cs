// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Scm
{
    /// <summary>
    /// Retrieves a config item.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Scm = Pulumi.Scm;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Scm.LdapServerProfile("example");
    /// 
    /// });
    /// ```
    /// </summary>
    [ScmResourceType("scm:index/ldapServerProfile:LdapServerProfile")]
    public partial class LdapServerProfile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Base param. String length must not exceed 255 characters.
        /// </summary>
        [Output("base")]
        public Output<string?> Base { get; private set; } = null!;

        /// <summary>
        /// The BindDn param. String length must not exceed 255 characters.
        /// </summary>
        [Output("bindDn")]
        public Output<string?> BindDn { get; private set; } = null!;

        /// <summary>
        /// The BindPassword param. String length must not exceed 121 characters.
        /// </summary>
        [Output("bindPassword")]
        public Output<string?> BindPassword { get; private set; } = null!;

        /// <summary>
        /// The BindTimelimit param.
        /// </summary>
        [Output("bindTimelimit")]
        public Output<string?> BindTimelimit { get; private set; } = null!;

        /// <summary>
        /// The Device param.
        /// </summary>
        [Output("device")]
        public Output<string?> Device { get; private set; } = null!;

        /// <summary>
        /// The Folder param.
        /// </summary>
        [Output("folder")]
        public Output<string?> Folder { get; private set; } = null!;

        /// <summary>
        /// The LdapType param. String must be one of these: `"active-directory"`, `"e-directory"`, `"sun"`, `"other"`.
        /// </summary>
        [Output("ldapType")]
        public Output<string?> LdapType { get; private set; } = null!;

        /// <summary>
        /// The RetryInterval param.
        /// </summary>
        [Output("retryInterval")]
        public Output<int?> RetryInterval { get; private set; } = null!;

        /// <summary>
        /// The Servers param.
        /// </summary>
        [Output("servers")]
        public Output<ImmutableArray<Outputs.LdapServerProfileServer>> Servers { get; private set; } = null!;

        /// <summary>
        /// The Snippet param.
        /// </summary>
        [Output("snippet")]
        public Output<string?> Snippet { get; private set; } = null!;

        /// <summary>
        /// The Ssl param.
        /// </summary>
        [Output("ssl")]
        public Output<bool?> Ssl { get; private set; } = null!;

        [Output("tfid")]
        public Output<string> Tfid { get; private set; } = null!;

        /// <summary>
        /// The Timelimit param.
        /// </summary>
        [Output("timelimit")]
        public Output<int?> Timelimit { get; private set; } = null!;

        /// <summary>
        /// The VerifyServerCertificate param.
        /// </summary>
        [Output("verifyServerCertificate")]
        public Output<bool?> VerifyServerCertificate { get; private set; } = null!;


        /// <summary>
        /// Create a LdapServerProfile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LdapServerProfile(string name, LdapServerProfileArgs args, CustomResourceOptions? options = null)
            : base("scm:index/ldapServerProfile:LdapServerProfile", name, args ?? new LdapServerProfileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LdapServerProfile(string name, Input<string> id, LdapServerProfileState? state = null, CustomResourceOptions? options = null)
            : base("scm:index/ldapServerProfile:LdapServerProfile", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "bindPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LdapServerProfile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LdapServerProfile Get(string name, Input<string> id, LdapServerProfileState? state = null, CustomResourceOptions? options = null)
        {
            return new LdapServerProfile(name, id, state, options);
        }
    }

    public sealed class LdapServerProfileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Base param. String length must not exceed 255 characters.
        /// </summary>
        [Input("base")]
        public Input<string>? Base { get; set; }

        /// <summary>
        /// The BindDn param. String length must not exceed 255 characters.
        /// </summary>
        [Input("bindDn")]
        public Input<string>? BindDn { get; set; }

        [Input("bindPassword")]
        private Input<string>? _bindPassword;

        /// <summary>
        /// The BindPassword param. String length must not exceed 121 characters.
        /// </summary>
        public Input<string>? BindPassword
        {
            get => _bindPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _bindPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The BindTimelimit param.
        /// </summary>
        [Input("bindTimelimit")]
        public Input<string>? BindTimelimit { get; set; }

        /// <summary>
        /// The Device param.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// The Folder param.
        /// </summary>
        [Input("folder")]
        public Input<string>? Folder { get; set; }

        /// <summary>
        /// The LdapType param. String must be one of these: `"active-directory"`, `"e-directory"`, `"sun"`, `"other"`.
        /// </summary>
        [Input("ldapType")]
        public Input<string>? LdapType { get; set; }

        /// <summary>
        /// The RetryInterval param.
        /// </summary>
        [Input("retryInterval")]
        public Input<int>? RetryInterval { get; set; }

        [Input("servers", required: true)]
        private InputList<Inputs.LdapServerProfileServerArgs>? _servers;

        /// <summary>
        /// The Servers param.
        /// </summary>
        public InputList<Inputs.LdapServerProfileServerArgs> Servers
        {
            get => _servers ?? (_servers = new InputList<Inputs.LdapServerProfileServerArgs>());
            set => _servers = value;
        }

        /// <summary>
        /// The Snippet param.
        /// </summary>
        [Input("snippet")]
        public Input<string>? Snippet { get; set; }

        /// <summary>
        /// The Ssl param.
        /// </summary>
        [Input("ssl")]
        public Input<bool>? Ssl { get; set; }

        /// <summary>
        /// The Timelimit param.
        /// </summary>
        [Input("timelimit")]
        public Input<int>? Timelimit { get; set; }

        /// <summary>
        /// The VerifyServerCertificate param.
        /// </summary>
        [Input("verifyServerCertificate")]
        public Input<bool>? VerifyServerCertificate { get; set; }

        public LdapServerProfileArgs()
        {
        }
        public static new LdapServerProfileArgs Empty => new LdapServerProfileArgs();
    }

    public sealed class LdapServerProfileState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Base param. String length must not exceed 255 characters.
        /// </summary>
        [Input("base")]
        public Input<string>? Base { get; set; }

        /// <summary>
        /// The BindDn param. String length must not exceed 255 characters.
        /// </summary>
        [Input("bindDn")]
        public Input<string>? BindDn { get; set; }

        [Input("bindPassword")]
        private Input<string>? _bindPassword;

        /// <summary>
        /// The BindPassword param. String length must not exceed 121 characters.
        /// </summary>
        public Input<string>? BindPassword
        {
            get => _bindPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _bindPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The BindTimelimit param.
        /// </summary>
        [Input("bindTimelimit")]
        public Input<string>? BindTimelimit { get; set; }

        /// <summary>
        /// The Device param.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// The Folder param.
        /// </summary>
        [Input("folder")]
        public Input<string>? Folder { get; set; }

        /// <summary>
        /// The LdapType param. String must be one of these: `"active-directory"`, `"e-directory"`, `"sun"`, `"other"`.
        /// </summary>
        [Input("ldapType")]
        public Input<string>? LdapType { get; set; }

        /// <summary>
        /// The RetryInterval param.
        /// </summary>
        [Input("retryInterval")]
        public Input<int>? RetryInterval { get; set; }

        [Input("servers")]
        private InputList<Inputs.LdapServerProfileServerGetArgs>? _servers;

        /// <summary>
        /// The Servers param.
        /// </summary>
        public InputList<Inputs.LdapServerProfileServerGetArgs> Servers
        {
            get => _servers ?? (_servers = new InputList<Inputs.LdapServerProfileServerGetArgs>());
            set => _servers = value;
        }

        /// <summary>
        /// The Snippet param.
        /// </summary>
        [Input("snippet")]
        public Input<string>? Snippet { get; set; }

        /// <summary>
        /// The Ssl param.
        /// </summary>
        [Input("ssl")]
        public Input<bool>? Ssl { get; set; }

        [Input("tfid")]
        public Input<string>? Tfid { get; set; }

        /// <summary>
        /// The Timelimit param.
        /// </summary>
        [Input("timelimit")]
        public Input<int>? Timelimit { get; set; }

        /// <summary>
        /// The VerifyServerCertificate param.
        /// </summary>
        [Input("verifyServerCertificate")]
        public Input<bool>? VerifyServerCertificate { get; set; }

        public LdapServerProfileState()
        {
        }
        public static new LdapServerProfileState Empty => new LdapServerProfileState();
    }
}
