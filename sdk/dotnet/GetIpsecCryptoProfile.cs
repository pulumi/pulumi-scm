// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Scm
{
    public static class GetIpsecCryptoProfile
    {
        /// <summary>
        /// Retrieves a config item.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scm = Pulumi.Scm;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Scm.GetIpsecCryptoProfile.Invoke(new()
        ///     {
        ///         Id = "1234-56-789",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetIpsecCryptoProfileResult> InvokeAsync(GetIpsecCryptoProfileArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIpsecCryptoProfileResult>("scm:index/getIpsecCryptoProfile:getIpsecCryptoProfile", args ?? new GetIpsecCryptoProfileArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a config item.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scm = Pulumi.Scm;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Scm.GetIpsecCryptoProfile.Invoke(new()
        ///     {
        ///         Id = "1234-56-789",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetIpsecCryptoProfileResult> Invoke(GetIpsecCryptoProfileInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIpsecCryptoProfileResult>("scm:index/getIpsecCryptoProfile:getIpsecCryptoProfile", args ?? new GetIpsecCryptoProfileInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIpsecCryptoProfileArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Device param.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        /// <summary>
        /// The Folder param.
        /// </summary>
        [Input("folder")]
        public string? Folder { get; set; }

        /// <summary>
        /// The Id param.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        /// <summary>
        /// The Snippet param.
        /// </summary>
        [Input("snippet")]
        public string? Snippet { get; set; }

        public GetIpsecCryptoProfileArgs()
        {
        }
        public static new GetIpsecCryptoProfileArgs Empty => new GetIpsecCryptoProfileArgs();
    }

    public sealed class GetIpsecCryptoProfileInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Device param.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// The Folder param.
        /// </summary>
        [Input("folder")]
        public Input<string>? Folder { get; set; }

        /// <summary>
        /// The Id param.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// The Snippet param.
        /// </summary>
        [Input("snippet")]
        public Input<string>? Snippet { get; set; }

        public GetIpsecCryptoProfileInvokeArgs()
        {
        }
        public static new GetIpsecCryptoProfileInvokeArgs Empty => new GetIpsecCryptoProfileInvokeArgs();
    }


    [OutputType]
    public sealed class GetIpsecCryptoProfileResult
    {
        /// <summary>
        /// The Ah param.
        /// </summary>
        public readonly Outputs.GetIpsecCryptoProfileAhResult Ah;
        /// <summary>
        /// The Device param.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// phase-2 DH group (PFS DH group). String must be one of these: `"no-pfs"`, `"group1"`, `"group2"`, `"group5"`, `"group14"`, `"group19"`, `"group20"`. Default: `"group2"`.
        /// </summary>
        public readonly string DhGroup;
        /// <summary>
        /// The Esp param.
        /// </summary>
        public readonly Outputs.GetIpsecCryptoProfileEspResult Esp;
        /// <summary>
        /// The Folder param.
        /// </summary>
        public readonly string? Folder;
        /// <summary>
        /// The Id param.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Lifesize param.
        /// </summary>
        public readonly Outputs.GetIpsecCryptoProfileLifesizeResult Lifesize;
        /// <summary>
        /// The Lifetime param.
        /// </summary>
        public readonly Outputs.GetIpsecCryptoProfileLifetimeResult Lifetime;
        /// <summary>
        /// Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 31 characters.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The Snippet param.
        /// </summary>
        public readonly string? Snippet;
        public readonly string Tfid;

        [OutputConstructor]
        private GetIpsecCryptoProfileResult(
            Outputs.GetIpsecCryptoProfileAhResult ah,

            string? device,

            string dhGroup,

            Outputs.GetIpsecCryptoProfileEspResult esp,

            string? folder,

            string id,

            Outputs.GetIpsecCryptoProfileLifesizeResult lifesize,

            Outputs.GetIpsecCryptoProfileLifetimeResult lifetime,

            string name,

            string? snippet,

            string tfid)
        {
            Ah = ah;
            Device = device;
            DhGroup = dhGroup;
            Esp = esp;
            Folder = folder;
            Id = id;
            Lifesize = lifesize;
            Lifetime = lifetime;
            Name = name;
            Snippet = snippet;
            Tfid = tfid;
        }
    }
}
