// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Scm
{
    public static class GetScepProfile
    {
        /// <summary>
        /// Retrieves a config item.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scm = Pulumi.Scm;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Scm.GetScepProfile.Invoke(new()
        ///     {
        ///         Id = "1234-56-789",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetScepProfileResult> InvokeAsync(GetScepProfileArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetScepProfileResult>("scm:index/getScepProfile:getScepProfile", args ?? new GetScepProfileArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a config item.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Scm = Pulumi.Scm;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Scm.GetScepProfile.Invoke(new()
        ///     {
        ///         Id = "1234-56-789",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetScepProfileResult> Invoke(GetScepProfileInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetScepProfileResult>("scm:index/getScepProfile:getScepProfile", args ?? new GetScepProfileInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetScepProfileArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Id param.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetScepProfileArgs()
        {
        }
        public static new GetScepProfileArgs Empty => new GetScepProfileArgs();
    }

    public sealed class GetScepProfileInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Id param.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetScepProfileInvokeArgs()
        {
        }
        public static new GetScepProfileInvokeArgs Empty => new GetScepProfileInvokeArgs();
    }


    [OutputType]
    public sealed class GetScepProfileResult
    {
        /// <summary>
        /// The Algorithm param.
        /// </summary>
        public readonly Outputs.GetScepProfileAlgorithmResult Algorithm;
        /// <summary>
        /// The CaIdentityName param.
        /// </summary>
        public readonly string CaIdentityName;
        /// <summary>
        /// The CertificateAttributes param.
        /// </summary>
        public readonly Outputs.GetScepProfileCertificateAttributesResult CertificateAttributes;
        /// <summary>
        /// The Digest param.
        /// </summary>
        public readonly string Digest;
        /// <summary>
        /// The Fingerprint param.
        /// </summary>
        public readonly string Fingerprint;
        /// <summary>
        /// The Id param.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The ScepCaCert param.
        /// </summary>
        public readonly string ScepCaCert;
        /// <summary>
        /// The ScepChallenge param.
        /// </summary>
        public readonly Outputs.GetScepProfileScepChallengeResult ScepChallenge;
        /// <summary>
        /// The ScepClientCert param.
        /// </summary>
        public readonly string ScepClientCert;
        /// <summary>
        /// The ScepUrl param.
        /// </summary>
        public readonly string ScepUrl;
        /// <summary>
        /// The Subject param.
        /// </summary>
        public readonly string Subject;
        public readonly string Tfid;
        /// <summary>
        /// The UseAsDigitalSignature param.
        /// </summary>
        public readonly bool UseAsDigitalSignature;
        /// <summary>
        /// The UseForKeyEncipherment param.
        /// </summary>
        public readonly bool UseForKeyEncipherment;

        [OutputConstructor]
        private GetScepProfileResult(
            Outputs.GetScepProfileAlgorithmResult algorithm,

            string caIdentityName,

            Outputs.GetScepProfileCertificateAttributesResult certificateAttributes,

            string digest,

            string fingerprint,

            string id,

            string name,

            string scepCaCert,

            Outputs.GetScepProfileScepChallengeResult scepChallenge,

            string scepClientCert,

            string scepUrl,

            string subject,

            string tfid,

            bool useAsDigitalSignature,

            bool useForKeyEncipherment)
        {
            Algorithm = algorithm;
            CaIdentityName = caIdentityName;
            CertificateAttributes = certificateAttributes;
            Digest = digest;
            Fingerprint = fingerprint;
            Id = id;
            Name = name;
            ScepCaCert = scepCaCert;
            ScepChallenge = scepChallenge;
            ScepClientCert = scepClientCert;
            ScepUrl = scepUrl;
            Subject = subject;
            Tfid = tfid;
            UseAsDigitalSignature = useAsDigitalSignature;
            UseForKeyEncipherment = useForKeyEncipherment;
        }
    }
}
