// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-scm/sdk/go/scm/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves a config item.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-scm/sdk/go/scm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scm.NewTacacsServerProfile(ctx, "example", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type TacacsServerProfile struct {
	pulumi.CustomResourceState

	// The Device param.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// (Internal use) Encrypted values returned from the API.
	EncryptedValues pulumi.StringMapOutput `pulumi:"encryptedValues"`
	// The Folder param.
	Folder pulumi.StringPtrOutput `pulumi:"folder"`
	// The Protocol param. String must be one of these: `"CHAP"`, `"PAP"`.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// The Servers param.
	Servers TacacsServerProfileServerArrayOutput `pulumi:"servers"`
	// The Snippet param.
	Snippet pulumi.StringPtrOutput `pulumi:"snippet"`
	Tfid    pulumi.StringOutput    `pulumi:"tfid"`
	// The Timeout param. Value must be between 1 and 30.
	Timeout pulumi.IntPtrOutput `pulumi:"timeout"`
	// The UseSingleConnection param.
	UseSingleConnection pulumi.BoolPtrOutput `pulumi:"useSingleConnection"`
}

// NewTacacsServerProfile registers a new resource with the given unique name, arguments, and options.
func NewTacacsServerProfile(ctx *pulumi.Context,
	name string, args *TacacsServerProfileArgs, opts ...pulumi.ResourceOption) (*TacacsServerProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.Servers == nil {
		return nil, errors.New("invalid value for required argument 'Servers'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"encryptedValues",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TacacsServerProfile
	err := ctx.RegisterResource("scm:index/tacacsServerProfile:TacacsServerProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTacacsServerProfile gets an existing TacacsServerProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTacacsServerProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TacacsServerProfileState, opts ...pulumi.ResourceOption) (*TacacsServerProfile, error) {
	var resource TacacsServerProfile
	err := ctx.ReadResource("scm:index/tacacsServerProfile:TacacsServerProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TacacsServerProfile resources.
type tacacsServerProfileState struct {
	// The Device param.
	Device *string `pulumi:"device"`
	// (Internal use) Encrypted values returned from the API.
	EncryptedValues map[string]string `pulumi:"encryptedValues"`
	// The Folder param.
	Folder *string `pulumi:"folder"`
	// The Protocol param. String must be one of these: `"CHAP"`, `"PAP"`.
	Protocol *string `pulumi:"protocol"`
	// The Servers param.
	Servers []TacacsServerProfileServer `pulumi:"servers"`
	// The Snippet param.
	Snippet *string `pulumi:"snippet"`
	Tfid    *string `pulumi:"tfid"`
	// The Timeout param. Value must be between 1 and 30.
	Timeout *int `pulumi:"timeout"`
	// The UseSingleConnection param.
	UseSingleConnection *bool `pulumi:"useSingleConnection"`
}

type TacacsServerProfileState struct {
	// The Device param.
	Device pulumi.StringPtrInput
	// (Internal use) Encrypted values returned from the API.
	EncryptedValues pulumi.StringMapInput
	// The Folder param.
	Folder pulumi.StringPtrInput
	// The Protocol param. String must be one of these: `"CHAP"`, `"PAP"`.
	Protocol pulumi.StringPtrInput
	// The Servers param.
	Servers TacacsServerProfileServerArrayInput
	// The Snippet param.
	Snippet pulumi.StringPtrInput
	Tfid    pulumi.StringPtrInput
	// The Timeout param. Value must be between 1 and 30.
	Timeout pulumi.IntPtrInput
	// The UseSingleConnection param.
	UseSingleConnection pulumi.BoolPtrInput
}

func (TacacsServerProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*tacacsServerProfileState)(nil)).Elem()
}

type tacacsServerProfileArgs struct {
	// The Device param.
	Device *string `pulumi:"device"`
	// The Folder param.
	Folder *string `pulumi:"folder"`
	// The Protocol param. String must be one of these: `"CHAP"`, `"PAP"`.
	Protocol string `pulumi:"protocol"`
	// The Servers param.
	Servers []TacacsServerProfileServer `pulumi:"servers"`
	// The Snippet param.
	Snippet *string `pulumi:"snippet"`
	// The Timeout param. Value must be between 1 and 30.
	Timeout *int `pulumi:"timeout"`
	// The UseSingleConnection param.
	UseSingleConnection *bool `pulumi:"useSingleConnection"`
}

// The set of arguments for constructing a TacacsServerProfile resource.
type TacacsServerProfileArgs struct {
	// The Device param.
	Device pulumi.StringPtrInput
	// The Folder param.
	Folder pulumi.StringPtrInput
	// The Protocol param. String must be one of these: `"CHAP"`, `"PAP"`.
	Protocol pulumi.StringInput
	// The Servers param.
	Servers TacacsServerProfileServerArrayInput
	// The Snippet param.
	Snippet pulumi.StringPtrInput
	// The Timeout param. Value must be between 1 and 30.
	Timeout pulumi.IntPtrInput
	// The UseSingleConnection param.
	UseSingleConnection pulumi.BoolPtrInput
}

func (TacacsServerProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tacacsServerProfileArgs)(nil)).Elem()
}

type TacacsServerProfileInput interface {
	pulumi.Input

	ToTacacsServerProfileOutput() TacacsServerProfileOutput
	ToTacacsServerProfileOutputWithContext(ctx context.Context) TacacsServerProfileOutput
}

func (*TacacsServerProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**TacacsServerProfile)(nil)).Elem()
}

func (i *TacacsServerProfile) ToTacacsServerProfileOutput() TacacsServerProfileOutput {
	return i.ToTacacsServerProfileOutputWithContext(context.Background())
}

func (i *TacacsServerProfile) ToTacacsServerProfileOutputWithContext(ctx context.Context) TacacsServerProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TacacsServerProfileOutput)
}

// TacacsServerProfileArrayInput is an input type that accepts TacacsServerProfileArray and TacacsServerProfileArrayOutput values.
// You can construct a concrete instance of `TacacsServerProfileArrayInput` via:
//
//	TacacsServerProfileArray{ TacacsServerProfileArgs{...} }
type TacacsServerProfileArrayInput interface {
	pulumi.Input

	ToTacacsServerProfileArrayOutput() TacacsServerProfileArrayOutput
	ToTacacsServerProfileArrayOutputWithContext(context.Context) TacacsServerProfileArrayOutput
}

type TacacsServerProfileArray []TacacsServerProfileInput

func (TacacsServerProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TacacsServerProfile)(nil)).Elem()
}

func (i TacacsServerProfileArray) ToTacacsServerProfileArrayOutput() TacacsServerProfileArrayOutput {
	return i.ToTacacsServerProfileArrayOutputWithContext(context.Background())
}

func (i TacacsServerProfileArray) ToTacacsServerProfileArrayOutputWithContext(ctx context.Context) TacacsServerProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TacacsServerProfileArrayOutput)
}

// TacacsServerProfileMapInput is an input type that accepts TacacsServerProfileMap and TacacsServerProfileMapOutput values.
// You can construct a concrete instance of `TacacsServerProfileMapInput` via:
//
//	TacacsServerProfileMap{ "key": TacacsServerProfileArgs{...} }
type TacacsServerProfileMapInput interface {
	pulumi.Input

	ToTacacsServerProfileMapOutput() TacacsServerProfileMapOutput
	ToTacacsServerProfileMapOutputWithContext(context.Context) TacacsServerProfileMapOutput
}

type TacacsServerProfileMap map[string]TacacsServerProfileInput

func (TacacsServerProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TacacsServerProfile)(nil)).Elem()
}

func (i TacacsServerProfileMap) ToTacacsServerProfileMapOutput() TacacsServerProfileMapOutput {
	return i.ToTacacsServerProfileMapOutputWithContext(context.Background())
}

func (i TacacsServerProfileMap) ToTacacsServerProfileMapOutputWithContext(ctx context.Context) TacacsServerProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TacacsServerProfileMapOutput)
}

type TacacsServerProfileOutput struct{ *pulumi.OutputState }

func (TacacsServerProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TacacsServerProfile)(nil)).Elem()
}

func (o TacacsServerProfileOutput) ToTacacsServerProfileOutput() TacacsServerProfileOutput {
	return o
}

func (o TacacsServerProfileOutput) ToTacacsServerProfileOutputWithContext(ctx context.Context) TacacsServerProfileOutput {
	return o
}

// The Device param.
func (o TacacsServerProfileOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TacacsServerProfile) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// (Internal use) Encrypted values returned from the API.
func (o TacacsServerProfileOutput) EncryptedValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TacacsServerProfile) pulumi.StringMapOutput { return v.EncryptedValues }).(pulumi.StringMapOutput)
}

// The Folder param.
func (o TacacsServerProfileOutput) Folder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TacacsServerProfile) pulumi.StringPtrOutput { return v.Folder }).(pulumi.StringPtrOutput)
}

// The Protocol param. String must be one of these: `"CHAP"`, `"PAP"`.
func (o TacacsServerProfileOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *TacacsServerProfile) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// The Servers param.
func (o TacacsServerProfileOutput) Servers() TacacsServerProfileServerArrayOutput {
	return o.ApplyT(func(v *TacacsServerProfile) TacacsServerProfileServerArrayOutput { return v.Servers }).(TacacsServerProfileServerArrayOutput)
}

// The Snippet param.
func (o TacacsServerProfileOutput) Snippet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TacacsServerProfile) pulumi.StringPtrOutput { return v.Snippet }).(pulumi.StringPtrOutput)
}

func (o TacacsServerProfileOutput) Tfid() pulumi.StringOutput {
	return o.ApplyT(func(v *TacacsServerProfile) pulumi.StringOutput { return v.Tfid }).(pulumi.StringOutput)
}

// The Timeout param. Value must be between 1 and 30.
func (o TacacsServerProfileOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TacacsServerProfile) pulumi.IntPtrOutput { return v.Timeout }).(pulumi.IntPtrOutput)
}

// The UseSingleConnection param.
func (o TacacsServerProfileOutput) UseSingleConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TacacsServerProfile) pulumi.BoolPtrOutput { return v.UseSingleConnection }).(pulumi.BoolPtrOutput)
}

type TacacsServerProfileArrayOutput struct{ *pulumi.OutputState }

func (TacacsServerProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TacacsServerProfile)(nil)).Elem()
}

func (o TacacsServerProfileArrayOutput) ToTacacsServerProfileArrayOutput() TacacsServerProfileArrayOutput {
	return o
}

func (o TacacsServerProfileArrayOutput) ToTacacsServerProfileArrayOutputWithContext(ctx context.Context) TacacsServerProfileArrayOutput {
	return o
}

func (o TacacsServerProfileArrayOutput) Index(i pulumi.IntInput) TacacsServerProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TacacsServerProfile {
		return vs[0].([]*TacacsServerProfile)[vs[1].(int)]
	}).(TacacsServerProfileOutput)
}

type TacacsServerProfileMapOutput struct{ *pulumi.OutputState }

func (TacacsServerProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TacacsServerProfile)(nil)).Elem()
}

func (o TacacsServerProfileMapOutput) ToTacacsServerProfileMapOutput() TacacsServerProfileMapOutput {
	return o
}

func (o TacacsServerProfileMapOutput) ToTacacsServerProfileMapOutputWithContext(ctx context.Context) TacacsServerProfileMapOutput {
	return o
}

func (o TacacsServerProfileMapOutput) MapIndex(k pulumi.StringInput) TacacsServerProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TacacsServerProfile {
		return vs[0].(map[string]*TacacsServerProfile)[vs[1].(string)]
	}).(TacacsServerProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TacacsServerProfileInput)(nil)).Elem(), &TacacsServerProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*TacacsServerProfileArrayInput)(nil)).Elem(), TacacsServerProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TacacsServerProfileMapInput)(nil)).Elem(), TacacsServerProfileMap{})
	pulumi.RegisterOutputType(TacacsServerProfileOutput{})
	pulumi.RegisterOutputType(TacacsServerProfileArrayOutput{})
	pulumi.RegisterOutputType(TacacsServerProfileMapOutput{})
}
