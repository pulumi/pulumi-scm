// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-scm/sdk/go/scm/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves a config item.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-scm/sdk/go/scm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scm.LookupMfaServer(ctx, &scm.LookupMfaServerArgs{
//				Id: "1234-56-789",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupMfaServer(ctx *pulumi.Context, args *LookupMfaServerArgs, opts ...pulumi.InvokeOption) (*LookupMfaServerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMfaServerResult
	err := ctx.Invoke("scm:index/getMfaServer:getMfaServer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMfaServer.
type LookupMfaServerArgs struct {
	// The Id param.
	Id string `pulumi:"id"`
}

// A collection of values returned by getMfaServer.
type LookupMfaServerResult struct {
	// The Id param.
	Id string `pulumi:"id"`
	// The MfaCertProfile param.
	MfaCertProfile string `pulumi:"mfaCertProfile"`
	// The MfaVendorType param.
	MfaVendorType GetMfaServerMfaVendorType `pulumi:"mfaVendorType"`
	// The Name param.
	Name string `pulumi:"name"`
	Tfid string `pulumi:"tfid"`
}

func LookupMfaServerOutput(ctx *pulumi.Context, args LookupMfaServerOutputArgs, opts ...pulumi.InvokeOption) LookupMfaServerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupMfaServerResultOutput, error) {
			args := v.(LookupMfaServerArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupMfaServerResult
			secret, err := ctx.InvokePackageRaw("scm:index/getMfaServer:getMfaServer", args, &rv, "", opts...)
			if err != nil {
				return LookupMfaServerResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupMfaServerResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupMfaServerResultOutput), nil
			}
			return output, nil
		}).(LookupMfaServerResultOutput)
}

// A collection of arguments for invoking getMfaServer.
type LookupMfaServerOutputArgs struct {
	// The Id param.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupMfaServerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMfaServerArgs)(nil)).Elem()
}

// A collection of values returned by getMfaServer.
type LookupMfaServerResultOutput struct{ *pulumi.OutputState }

func (LookupMfaServerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMfaServerResult)(nil)).Elem()
}

func (o LookupMfaServerResultOutput) ToLookupMfaServerResultOutput() LookupMfaServerResultOutput {
	return o
}

func (o LookupMfaServerResultOutput) ToLookupMfaServerResultOutputWithContext(ctx context.Context) LookupMfaServerResultOutput {
	return o
}

// The Id param.
func (o LookupMfaServerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMfaServerResult) string { return v.Id }).(pulumi.StringOutput)
}

// The MfaCertProfile param.
func (o LookupMfaServerResultOutput) MfaCertProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMfaServerResult) string { return v.MfaCertProfile }).(pulumi.StringOutput)
}

// The MfaVendorType param.
func (o LookupMfaServerResultOutput) MfaVendorType() GetMfaServerMfaVendorTypeOutput {
	return o.ApplyT(func(v LookupMfaServerResult) GetMfaServerMfaVendorType { return v.MfaVendorType }).(GetMfaServerMfaVendorTypeOutput)
}

// The Name param.
func (o LookupMfaServerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMfaServerResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupMfaServerResultOutput) Tfid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMfaServerResult) string { return v.Tfid }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMfaServerResultOutput{})
}
