// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-scm/sdk/go/scm/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves a config item.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-scm/sdk/go/scm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scm.NewOcspResponder(ctx, "example", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type OcspResponder struct {
	pulumi.CustomResourceState

	// The Device param.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// The Folder param.
	Folder pulumi.StringPtrOutput `pulumi:"folder"`
	// The HostName param. String length must be between 1 and 255 characters.
	HostName pulumi.StringOutput `pulumi:"hostName"`
	// alphanumeric string [:0-9a-zA-Z._-]. String length must not exceed 63 characters. String validation regex: `^[a-zA-Z0-9._-]+$`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Snippet param.
	Snippet pulumi.StringPtrOutput `pulumi:"snippet"`
	Tfid    pulumi.StringOutput    `pulumi:"tfid"`
}

// NewOcspResponder registers a new resource with the given unique name, arguments, and options.
func NewOcspResponder(ctx *pulumi.Context,
	name string, args *OcspResponderArgs, opts ...pulumi.ResourceOption) (*OcspResponder, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HostName == nil {
		return nil, errors.New("invalid value for required argument 'HostName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OcspResponder
	err := ctx.RegisterResource("scm:index/ocspResponder:OcspResponder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOcspResponder gets an existing OcspResponder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOcspResponder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OcspResponderState, opts ...pulumi.ResourceOption) (*OcspResponder, error) {
	var resource OcspResponder
	err := ctx.ReadResource("scm:index/ocspResponder:OcspResponder", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OcspResponder resources.
type ocspResponderState struct {
	// The Device param.
	Device *string `pulumi:"device"`
	// The Folder param.
	Folder *string `pulumi:"folder"`
	// The HostName param. String length must be between 1 and 255 characters.
	HostName *string `pulumi:"hostName"`
	// alphanumeric string [:0-9a-zA-Z._-]. String length must not exceed 63 characters. String validation regex: `^[a-zA-Z0-9._-]+$`.
	Name *string `pulumi:"name"`
	// The Snippet param.
	Snippet *string `pulumi:"snippet"`
	Tfid    *string `pulumi:"tfid"`
}

type OcspResponderState struct {
	// The Device param.
	Device pulumi.StringPtrInput
	// The Folder param.
	Folder pulumi.StringPtrInput
	// The HostName param. String length must be between 1 and 255 characters.
	HostName pulumi.StringPtrInput
	// alphanumeric string [:0-9a-zA-Z._-]. String length must not exceed 63 characters. String validation regex: `^[a-zA-Z0-9._-]+$`.
	Name pulumi.StringPtrInput
	// The Snippet param.
	Snippet pulumi.StringPtrInput
	Tfid    pulumi.StringPtrInput
}

func (OcspResponderState) ElementType() reflect.Type {
	return reflect.TypeOf((*ocspResponderState)(nil)).Elem()
}

type ocspResponderArgs struct {
	// The Device param.
	Device *string `pulumi:"device"`
	// The Folder param.
	Folder *string `pulumi:"folder"`
	// The HostName param. String length must be between 1 and 255 characters.
	HostName string `pulumi:"hostName"`
	// alphanumeric string [:0-9a-zA-Z._-]. String length must not exceed 63 characters. String validation regex: `^[a-zA-Z0-9._-]+$`.
	Name *string `pulumi:"name"`
	// The Snippet param.
	Snippet *string `pulumi:"snippet"`
}

// The set of arguments for constructing a OcspResponder resource.
type OcspResponderArgs struct {
	// The Device param.
	Device pulumi.StringPtrInput
	// The Folder param.
	Folder pulumi.StringPtrInput
	// The HostName param. String length must be between 1 and 255 characters.
	HostName pulumi.StringInput
	// alphanumeric string [:0-9a-zA-Z._-]. String length must not exceed 63 characters. String validation regex: `^[a-zA-Z0-9._-]+$`.
	Name pulumi.StringPtrInput
	// The Snippet param.
	Snippet pulumi.StringPtrInput
}

func (OcspResponderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ocspResponderArgs)(nil)).Elem()
}

type OcspResponderInput interface {
	pulumi.Input

	ToOcspResponderOutput() OcspResponderOutput
	ToOcspResponderOutputWithContext(ctx context.Context) OcspResponderOutput
}

func (*OcspResponder) ElementType() reflect.Type {
	return reflect.TypeOf((**OcspResponder)(nil)).Elem()
}

func (i *OcspResponder) ToOcspResponderOutput() OcspResponderOutput {
	return i.ToOcspResponderOutputWithContext(context.Background())
}

func (i *OcspResponder) ToOcspResponderOutputWithContext(ctx context.Context) OcspResponderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OcspResponderOutput)
}

// OcspResponderArrayInput is an input type that accepts OcspResponderArray and OcspResponderArrayOutput values.
// You can construct a concrete instance of `OcspResponderArrayInput` via:
//
//	OcspResponderArray{ OcspResponderArgs{...} }
type OcspResponderArrayInput interface {
	pulumi.Input

	ToOcspResponderArrayOutput() OcspResponderArrayOutput
	ToOcspResponderArrayOutputWithContext(context.Context) OcspResponderArrayOutput
}

type OcspResponderArray []OcspResponderInput

func (OcspResponderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OcspResponder)(nil)).Elem()
}

func (i OcspResponderArray) ToOcspResponderArrayOutput() OcspResponderArrayOutput {
	return i.ToOcspResponderArrayOutputWithContext(context.Background())
}

func (i OcspResponderArray) ToOcspResponderArrayOutputWithContext(ctx context.Context) OcspResponderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OcspResponderArrayOutput)
}

// OcspResponderMapInput is an input type that accepts OcspResponderMap and OcspResponderMapOutput values.
// You can construct a concrete instance of `OcspResponderMapInput` via:
//
//	OcspResponderMap{ "key": OcspResponderArgs{...} }
type OcspResponderMapInput interface {
	pulumi.Input

	ToOcspResponderMapOutput() OcspResponderMapOutput
	ToOcspResponderMapOutputWithContext(context.Context) OcspResponderMapOutput
}

type OcspResponderMap map[string]OcspResponderInput

func (OcspResponderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OcspResponder)(nil)).Elem()
}

func (i OcspResponderMap) ToOcspResponderMapOutput() OcspResponderMapOutput {
	return i.ToOcspResponderMapOutputWithContext(context.Background())
}

func (i OcspResponderMap) ToOcspResponderMapOutputWithContext(ctx context.Context) OcspResponderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OcspResponderMapOutput)
}

type OcspResponderOutput struct{ *pulumi.OutputState }

func (OcspResponderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OcspResponder)(nil)).Elem()
}

func (o OcspResponderOutput) ToOcspResponderOutput() OcspResponderOutput {
	return o
}

func (o OcspResponderOutput) ToOcspResponderOutputWithContext(ctx context.Context) OcspResponderOutput {
	return o
}

// The Device param.
func (o OcspResponderOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OcspResponder) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// The Folder param.
func (o OcspResponderOutput) Folder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OcspResponder) pulumi.StringPtrOutput { return v.Folder }).(pulumi.StringPtrOutput)
}

// The HostName param. String length must be between 1 and 255 characters.
func (o OcspResponderOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v *OcspResponder) pulumi.StringOutput { return v.HostName }).(pulumi.StringOutput)
}

// alphanumeric string [:0-9a-zA-Z._-]. String length must not exceed 63 characters. String validation regex: `^[a-zA-Z0-9._-]+$`.
func (o OcspResponderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OcspResponder) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Snippet param.
func (o OcspResponderOutput) Snippet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OcspResponder) pulumi.StringPtrOutput { return v.Snippet }).(pulumi.StringPtrOutput)
}

func (o OcspResponderOutput) Tfid() pulumi.StringOutput {
	return o.ApplyT(func(v *OcspResponder) pulumi.StringOutput { return v.Tfid }).(pulumi.StringOutput)
}

type OcspResponderArrayOutput struct{ *pulumi.OutputState }

func (OcspResponderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OcspResponder)(nil)).Elem()
}

func (o OcspResponderArrayOutput) ToOcspResponderArrayOutput() OcspResponderArrayOutput {
	return o
}

func (o OcspResponderArrayOutput) ToOcspResponderArrayOutputWithContext(ctx context.Context) OcspResponderArrayOutput {
	return o
}

func (o OcspResponderArrayOutput) Index(i pulumi.IntInput) OcspResponderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OcspResponder {
		return vs[0].([]*OcspResponder)[vs[1].(int)]
	}).(OcspResponderOutput)
}

type OcspResponderMapOutput struct{ *pulumi.OutputState }

func (OcspResponderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OcspResponder)(nil)).Elem()
}

func (o OcspResponderMapOutput) ToOcspResponderMapOutput() OcspResponderMapOutput {
	return o
}

func (o OcspResponderMapOutput) ToOcspResponderMapOutputWithContext(ctx context.Context) OcspResponderMapOutput {
	return o
}

func (o OcspResponderMapOutput) MapIndex(k pulumi.StringInput) OcspResponderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OcspResponder {
		return vs[0].(map[string]*OcspResponder)[vs[1].(string)]
	}).(OcspResponderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OcspResponderInput)(nil)).Elem(), &OcspResponder{})
	pulumi.RegisterInputType(reflect.TypeOf((*OcspResponderArrayInput)(nil)).Elem(), OcspResponderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OcspResponderMapInput)(nil)).Elem(), OcspResponderMap{})
	pulumi.RegisterOutputType(OcspResponderOutput{})
	pulumi.RegisterOutputType(OcspResponderArrayOutput{})
	pulumi.RegisterOutputType(OcspResponderMapOutput{})
}
