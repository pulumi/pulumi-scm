// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-scm/sdk/go/scm/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves a config item.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-scm/sdk/go/scm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scm.LookupLocalUser(ctx, &scm.LookupLocalUserArgs{
//				Id: "1234-56-789",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupLocalUser(ctx *pulumi.Context, args *LookupLocalUserArgs, opts ...pulumi.InvokeOption) (*LookupLocalUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLocalUserResult
	err := ctx.Invoke("scm:index/getLocalUser:getLocalUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLocalUser.
type LookupLocalUserArgs struct {
	// The Id param.
	Id string `pulumi:"id"`
}

// A collection of values returned by getLocalUser.
type LookupLocalUserResult struct {
	// The Disabled param.
	Disabled bool `pulumi:"disabled"`
	// The Id param.
	Id string `pulumi:"id"`
	// The Name param. String length must not exceed 31 characters.
	Name string `pulumi:"name"`
	// The Password param. String length must not exceed 63 characters.
	Password string `pulumi:"password"`
	Tfid     string `pulumi:"tfid"`
}

func LookupLocalUserOutput(ctx *pulumi.Context, args LookupLocalUserOutputArgs, opts ...pulumi.InvokeOption) LookupLocalUserResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupLocalUserResultOutput, error) {
			args := v.(LookupLocalUserArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupLocalUserResult
			secret, err := ctx.InvokePackageRaw("scm:index/getLocalUser:getLocalUser", args, &rv, "", opts...)
			if err != nil {
				return LookupLocalUserResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupLocalUserResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupLocalUserResultOutput), nil
			}
			return output, nil
		}).(LookupLocalUserResultOutput)
}

// A collection of arguments for invoking getLocalUser.
type LookupLocalUserOutputArgs struct {
	// The Id param.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupLocalUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLocalUserArgs)(nil)).Elem()
}

// A collection of values returned by getLocalUser.
type LookupLocalUserResultOutput struct{ *pulumi.OutputState }

func (LookupLocalUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLocalUserResult)(nil)).Elem()
}

func (o LookupLocalUserResultOutput) ToLookupLocalUserResultOutput() LookupLocalUserResultOutput {
	return o
}

func (o LookupLocalUserResultOutput) ToLookupLocalUserResultOutputWithContext(ctx context.Context) LookupLocalUserResultOutput {
	return o
}

// The Disabled param.
func (o LookupLocalUserResultOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLocalUserResult) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// The Id param.
func (o LookupLocalUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLocalUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// The Name param. String length must not exceed 31 characters.
func (o LookupLocalUserResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLocalUserResult) string { return v.Name }).(pulumi.StringOutput)
}

// The Password param. String length must not exceed 63 characters.
func (o LookupLocalUserResultOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLocalUserResult) string { return v.Password }).(pulumi.StringOutput)
}

func (o LookupLocalUserResultOutput) Tfid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLocalUserResult) string { return v.Tfid }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLocalUserResultOutput{})
}
