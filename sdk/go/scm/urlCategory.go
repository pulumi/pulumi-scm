// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-scm/sdk/go/scm/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves a config item.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-scm/sdk/go/scm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scm.NewUrlCategory(ctx, "example", &scm.UrlCategoryArgs{
//				Folder: pulumi.String("Shared"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type UrlCategory struct {
	pulumi.CustomResourceState

	// The Description param.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The Device param.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// The Folder param.
	Folder pulumi.StringPtrOutput `pulumi:"folder"`
	// The List param.
	Lists pulumi.StringArrayOutput `pulumi:"lists"`
	// The Name param.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Snippet param.
	Snippet pulumi.StringPtrOutput `pulumi:"snippet"`
	Tfid    pulumi.StringOutput    `pulumi:"tfid"`
	// The Type param. String must be one of these: `"URL List"`, `"Category Match"`. Default: `"URL List"`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewUrlCategory registers a new resource with the given unique name, arguments, and options.
func NewUrlCategory(ctx *pulumi.Context,
	name string, args *UrlCategoryArgs, opts ...pulumi.ResourceOption) (*UrlCategory, error) {
	if args == nil {
		args = &UrlCategoryArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UrlCategory
	err := ctx.RegisterResource("scm:index/urlCategory:UrlCategory", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUrlCategory gets an existing UrlCategory resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUrlCategory(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UrlCategoryState, opts ...pulumi.ResourceOption) (*UrlCategory, error) {
	var resource UrlCategory
	err := ctx.ReadResource("scm:index/urlCategory:UrlCategory", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UrlCategory resources.
type urlCategoryState struct {
	// The Description param.
	Description *string `pulumi:"description"`
	// The Device param.
	Device *string `pulumi:"device"`
	// The Folder param.
	Folder *string `pulumi:"folder"`
	// The List param.
	Lists []string `pulumi:"lists"`
	// The Name param.
	Name *string `pulumi:"name"`
	// The Snippet param.
	Snippet *string `pulumi:"snippet"`
	Tfid    *string `pulumi:"tfid"`
	// The Type param. String must be one of these: `"URL List"`, `"Category Match"`. Default: `"URL List"`.
	Type *string `pulumi:"type"`
}

type UrlCategoryState struct {
	// The Description param.
	Description pulumi.StringPtrInput
	// The Device param.
	Device pulumi.StringPtrInput
	// The Folder param.
	Folder pulumi.StringPtrInput
	// The List param.
	Lists pulumi.StringArrayInput
	// The Name param.
	Name pulumi.StringPtrInput
	// The Snippet param.
	Snippet pulumi.StringPtrInput
	Tfid    pulumi.StringPtrInput
	// The Type param. String must be one of these: `"URL List"`, `"Category Match"`. Default: `"URL List"`.
	Type pulumi.StringPtrInput
}

func (UrlCategoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*urlCategoryState)(nil)).Elem()
}

type urlCategoryArgs struct {
	// The Description param.
	Description *string `pulumi:"description"`
	// The Device param.
	Device *string `pulumi:"device"`
	// The Folder param.
	Folder *string `pulumi:"folder"`
	// The List param.
	Lists []string `pulumi:"lists"`
	// The Name param.
	Name *string `pulumi:"name"`
	// The Snippet param.
	Snippet *string `pulumi:"snippet"`
	// The Type param. String must be one of these: `"URL List"`, `"Category Match"`. Default: `"URL List"`.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a UrlCategory resource.
type UrlCategoryArgs struct {
	// The Description param.
	Description pulumi.StringPtrInput
	// The Device param.
	Device pulumi.StringPtrInput
	// The Folder param.
	Folder pulumi.StringPtrInput
	// The List param.
	Lists pulumi.StringArrayInput
	// The Name param.
	Name pulumi.StringPtrInput
	// The Snippet param.
	Snippet pulumi.StringPtrInput
	// The Type param. String must be one of these: `"URL List"`, `"Category Match"`. Default: `"URL List"`.
	Type pulumi.StringPtrInput
}

func (UrlCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*urlCategoryArgs)(nil)).Elem()
}

type UrlCategoryInput interface {
	pulumi.Input

	ToUrlCategoryOutput() UrlCategoryOutput
	ToUrlCategoryOutputWithContext(ctx context.Context) UrlCategoryOutput
}

func (*UrlCategory) ElementType() reflect.Type {
	return reflect.TypeOf((**UrlCategory)(nil)).Elem()
}

func (i *UrlCategory) ToUrlCategoryOutput() UrlCategoryOutput {
	return i.ToUrlCategoryOutputWithContext(context.Background())
}

func (i *UrlCategory) ToUrlCategoryOutputWithContext(ctx context.Context) UrlCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlCategoryOutput)
}

// UrlCategoryArrayInput is an input type that accepts UrlCategoryArray and UrlCategoryArrayOutput values.
// You can construct a concrete instance of `UrlCategoryArrayInput` via:
//
//	UrlCategoryArray{ UrlCategoryArgs{...} }
type UrlCategoryArrayInput interface {
	pulumi.Input

	ToUrlCategoryArrayOutput() UrlCategoryArrayOutput
	ToUrlCategoryArrayOutputWithContext(context.Context) UrlCategoryArrayOutput
}

type UrlCategoryArray []UrlCategoryInput

func (UrlCategoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UrlCategory)(nil)).Elem()
}

func (i UrlCategoryArray) ToUrlCategoryArrayOutput() UrlCategoryArrayOutput {
	return i.ToUrlCategoryArrayOutputWithContext(context.Background())
}

func (i UrlCategoryArray) ToUrlCategoryArrayOutputWithContext(ctx context.Context) UrlCategoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlCategoryArrayOutput)
}

// UrlCategoryMapInput is an input type that accepts UrlCategoryMap and UrlCategoryMapOutput values.
// You can construct a concrete instance of `UrlCategoryMapInput` via:
//
//	UrlCategoryMap{ "key": UrlCategoryArgs{...} }
type UrlCategoryMapInput interface {
	pulumi.Input

	ToUrlCategoryMapOutput() UrlCategoryMapOutput
	ToUrlCategoryMapOutputWithContext(context.Context) UrlCategoryMapOutput
}

type UrlCategoryMap map[string]UrlCategoryInput

func (UrlCategoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UrlCategory)(nil)).Elem()
}

func (i UrlCategoryMap) ToUrlCategoryMapOutput() UrlCategoryMapOutput {
	return i.ToUrlCategoryMapOutputWithContext(context.Background())
}

func (i UrlCategoryMap) ToUrlCategoryMapOutputWithContext(ctx context.Context) UrlCategoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlCategoryMapOutput)
}

type UrlCategoryOutput struct{ *pulumi.OutputState }

func (UrlCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UrlCategory)(nil)).Elem()
}

func (o UrlCategoryOutput) ToUrlCategoryOutput() UrlCategoryOutput {
	return o
}

func (o UrlCategoryOutput) ToUrlCategoryOutputWithContext(ctx context.Context) UrlCategoryOutput {
	return o
}

// The Description param.
func (o UrlCategoryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UrlCategory) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The Device param.
func (o UrlCategoryOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UrlCategory) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// The Folder param.
func (o UrlCategoryOutput) Folder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UrlCategory) pulumi.StringPtrOutput { return v.Folder }).(pulumi.StringPtrOutput)
}

// The List param.
func (o UrlCategoryOutput) Lists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UrlCategory) pulumi.StringArrayOutput { return v.Lists }).(pulumi.StringArrayOutput)
}

// The Name param.
func (o UrlCategoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UrlCategory) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Snippet param.
func (o UrlCategoryOutput) Snippet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UrlCategory) pulumi.StringPtrOutput { return v.Snippet }).(pulumi.StringPtrOutput)
}

func (o UrlCategoryOutput) Tfid() pulumi.StringOutput {
	return o.ApplyT(func(v *UrlCategory) pulumi.StringOutput { return v.Tfid }).(pulumi.StringOutput)
}

// The Type param. String must be one of these: `"URL List"`, `"Category Match"`. Default: `"URL List"`.
func (o UrlCategoryOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *UrlCategory) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type UrlCategoryArrayOutput struct{ *pulumi.OutputState }

func (UrlCategoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UrlCategory)(nil)).Elem()
}

func (o UrlCategoryArrayOutput) ToUrlCategoryArrayOutput() UrlCategoryArrayOutput {
	return o
}

func (o UrlCategoryArrayOutput) ToUrlCategoryArrayOutputWithContext(ctx context.Context) UrlCategoryArrayOutput {
	return o
}

func (o UrlCategoryArrayOutput) Index(i pulumi.IntInput) UrlCategoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UrlCategory {
		return vs[0].([]*UrlCategory)[vs[1].(int)]
	}).(UrlCategoryOutput)
}

type UrlCategoryMapOutput struct{ *pulumi.OutputState }

func (UrlCategoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UrlCategory)(nil)).Elem()
}

func (o UrlCategoryMapOutput) ToUrlCategoryMapOutput() UrlCategoryMapOutput {
	return o
}

func (o UrlCategoryMapOutput) ToUrlCategoryMapOutputWithContext(ctx context.Context) UrlCategoryMapOutput {
	return o
}

func (o UrlCategoryMapOutput) MapIndex(k pulumi.StringInput) UrlCategoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UrlCategory {
		return vs[0].(map[string]*UrlCategory)[vs[1].(string)]
	}).(UrlCategoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UrlCategoryInput)(nil)).Elem(), &UrlCategory{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlCategoryArrayInput)(nil)).Elem(), UrlCategoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlCategoryMapInput)(nil)).Elem(), UrlCategoryMap{})
	pulumi.RegisterOutputType(UrlCategoryOutput{})
	pulumi.RegisterOutputType(UrlCategoryArrayOutput{})
	pulumi.RegisterOutputType(UrlCategoryMapOutput{})
}
