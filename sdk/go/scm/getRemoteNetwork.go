// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-scm/sdk/go/scm/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves a config item.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-scm/sdk/go/scm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scm.LookupRemoteNetwork(ctx, &scm.LookupRemoteNetworkArgs{
//				Id: "1234-56-789",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupRemoteNetwork(ctx *pulumi.Context, args *LookupRemoteNetworkArgs, opts ...pulumi.InvokeOption) (*LookupRemoteNetworkResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRemoteNetworkResult
	err := ctx.Invoke("scm:index/getRemoteNetwork:getRemoteNetwork", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRemoteNetwork.
type LookupRemoteNetworkArgs struct {
	// The Folder param. String can either be a specific string(`"Remote Networks"`) or match this regex: `^[\s0-9a-zA-Z._-]{1,}$`. Default: `"Remote Networks"`.
	Folder *string `pulumi:"folder"`
	// The Id param.
	Id string `pulumi:"id"`
}

// A collection of values returned by getRemoteNetwork.
type LookupRemoteNetworkResult struct {
	// The EcmpLoadBalancing param. String must be one of these: `"enable"`, `"disable"`. Default: `"disable"`.
	EcmpLoadBalancing string `pulumi:"ecmpLoadBalancing"`
	// ecmp*tunnels is required when ecmp*load*balancing is enable.
	EcmpTunnels []GetRemoteNetworkEcmpTunnel `pulumi:"ecmpTunnels"`
	// The Folder param. String can either be a specific string(`"Remote Networks"`) or match this regex: `^[\s0-9a-zA-Z._-]{1,}$`. Default: `"Remote Networks"`.
	Folder string `pulumi:"folder"`
	// The Id param.
	Id string `pulumi:"id"`
	// ipsec*tunnel is required when ecmp*load_balancing is disable.
	IpsecTunnel string `pulumi:"ipsecTunnel"`
	// New customer will only be on aggregate bandwidth licensing. String length must exceed 1 characters. Default: `"FWAAS-AGGREGATE"`.
	LicenseType string `pulumi:"licenseType"`
	// Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
	Name string `pulumi:"name"`
	// setup the protocol when ecmp*load*balancing is disable.
	Protocol GetRemoteNetworkProtocol `pulumi:"protocol"`
	// The Region param. String length must exceed 1 characters.
	Region string `pulumi:"region"`
	// specify secondary ipsecTunnel if needed.
	SecondaryIpsecTunnel string `pulumi:"secondaryIpsecTunnel"`
	// spn-name is needed when licenseType is FWAAS-AGGREGATE.
	SpnName string `pulumi:"spnName"`
	// The Subnets param.
	Subnets []string `pulumi:"subnets"`
	Tfid    string   `pulumi:"tfid"`
}

func LookupRemoteNetworkOutput(ctx *pulumi.Context, args LookupRemoteNetworkOutputArgs, opts ...pulumi.InvokeOption) LookupRemoteNetworkResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRemoteNetworkResultOutput, error) {
			args := v.(LookupRemoteNetworkArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupRemoteNetworkResult
			secret, err := ctx.InvokePackageRaw("scm:index/getRemoteNetwork:getRemoteNetwork", args, &rv, "", opts...)
			if err != nil {
				return LookupRemoteNetworkResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupRemoteNetworkResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupRemoteNetworkResultOutput), nil
			}
			return output, nil
		}).(LookupRemoteNetworkResultOutput)
}

// A collection of arguments for invoking getRemoteNetwork.
type LookupRemoteNetworkOutputArgs struct {
	// The Folder param. String can either be a specific string(`"Remote Networks"`) or match this regex: `^[\s0-9a-zA-Z._-]{1,}$`. Default: `"Remote Networks"`.
	Folder pulumi.StringPtrInput `pulumi:"folder"`
	// The Id param.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupRemoteNetworkOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRemoteNetworkArgs)(nil)).Elem()
}

// A collection of values returned by getRemoteNetwork.
type LookupRemoteNetworkResultOutput struct{ *pulumi.OutputState }

func (LookupRemoteNetworkResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRemoteNetworkResult)(nil)).Elem()
}

func (o LookupRemoteNetworkResultOutput) ToLookupRemoteNetworkResultOutput() LookupRemoteNetworkResultOutput {
	return o
}

func (o LookupRemoteNetworkResultOutput) ToLookupRemoteNetworkResultOutputWithContext(ctx context.Context) LookupRemoteNetworkResultOutput {
	return o
}

// The EcmpLoadBalancing param. String must be one of these: `"enable"`, `"disable"`. Default: `"disable"`.
func (o LookupRemoteNetworkResultOutput) EcmpLoadBalancing() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRemoteNetworkResult) string { return v.EcmpLoadBalancing }).(pulumi.StringOutput)
}

// ecmp*tunnels is required when ecmp*load*balancing is enable.
func (o LookupRemoteNetworkResultOutput) EcmpTunnels() GetRemoteNetworkEcmpTunnelArrayOutput {
	return o.ApplyT(func(v LookupRemoteNetworkResult) []GetRemoteNetworkEcmpTunnel { return v.EcmpTunnels }).(GetRemoteNetworkEcmpTunnelArrayOutput)
}

// The Folder param. String can either be a specific string(`"Remote Networks"`) or match this regex: `^[\s0-9a-zA-Z._-]{1,}$`. Default: `"Remote Networks"`.
func (o LookupRemoteNetworkResultOutput) Folder() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRemoteNetworkResult) string { return v.Folder }).(pulumi.StringOutput)
}

// The Id param.
func (o LookupRemoteNetworkResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRemoteNetworkResult) string { return v.Id }).(pulumi.StringOutput)
}

// ipsec*tunnel is required when ecmp*load_balancing is disable.
func (o LookupRemoteNetworkResultOutput) IpsecTunnel() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRemoteNetworkResult) string { return v.IpsecTunnel }).(pulumi.StringOutput)
}

// New customer will only be on aggregate bandwidth licensing. String length must exceed 1 characters. Default: `"FWAAS-AGGREGATE"`.
func (o LookupRemoteNetworkResultOutput) LicenseType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRemoteNetworkResult) string { return v.LicenseType }).(pulumi.StringOutput)
}

// Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
func (o LookupRemoteNetworkResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRemoteNetworkResult) string { return v.Name }).(pulumi.StringOutput)
}

// setup the protocol when ecmp*load*balancing is disable.
func (o LookupRemoteNetworkResultOutput) Protocol() GetRemoteNetworkProtocolOutput {
	return o.ApplyT(func(v LookupRemoteNetworkResult) GetRemoteNetworkProtocol { return v.Protocol }).(GetRemoteNetworkProtocolOutput)
}

// The Region param. String length must exceed 1 characters.
func (o LookupRemoteNetworkResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRemoteNetworkResult) string { return v.Region }).(pulumi.StringOutput)
}

// specify secondary ipsecTunnel if needed.
func (o LookupRemoteNetworkResultOutput) SecondaryIpsecTunnel() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRemoteNetworkResult) string { return v.SecondaryIpsecTunnel }).(pulumi.StringOutput)
}

// spn-name is needed when licenseType is FWAAS-AGGREGATE.
func (o LookupRemoteNetworkResultOutput) SpnName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRemoteNetworkResult) string { return v.SpnName }).(pulumi.StringOutput)
}

// The Subnets param.
func (o LookupRemoteNetworkResultOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRemoteNetworkResult) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

func (o LookupRemoteNetworkResultOutput) Tfid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRemoteNetworkResult) string { return v.Tfid }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRemoteNetworkResultOutput{})
}
