// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-scm/sdk/go/scm/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves a config item.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-scm/sdk/go/scm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scm.LookupScepProfile(ctx, &scm.LookupScepProfileArgs{
//				Id: "1234-56-789",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupScepProfile(ctx *pulumi.Context, args *LookupScepProfileArgs, opts ...pulumi.InvokeOption) (*LookupScepProfileResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupScepProfileResult
	err := ctx.Invoke("scm:index/getScepProfile:getScepProfile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getScepProfile.
type LookupScepProfileArgs struct {
	// The Id param.
	Id string `pulumi:"id"`
}

// A collection of values returned by getScepProfile.
type LookupScepProfileResult struct {
	// The Algorithm param.
	Algorithm GetScepProfileAlgorithm `pulumi:"algorithm"`
	// The CaIdentityName param.
	CaIdentityName string `pulumi:"caIdentityName"`
	// The CertificateAttributes param.
	CertificateAttributes GetScepProfileCertificateAttributes `pulumi:"certificateAttributes"`
	// The Digest param.
	Digest string `pulumi:"digest"`
	// The Fingerprint param.
	Fingerprint string `pulumi:"fingerprint"`
	// The Id param.
	Id string `pulumi:"id"`
	// alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
	Name string `pulumi:"name"`
	// The ScepCaCert param.
	ScepCaCert string `pulumi:"scepCaCert"`
	// The ScepChallenge param.
	ScepChallenge GetScepProfileScepChallenge `pulumi:"scepChallenge"`
	// The ScepClientCert param.
	ScepClientCert string `pulumi:"scepClientCert"`
	// The ScepUrl param.
	ScepUrl string `pulumi:"scepUrl"`
	// The Subject param.
	Subject string `pulumi:"subject"`
	Tfid    string `pulumi:"tfid"`
	// The UseAsDigitalSignature param.
	UseAsDigitalSignature bool `pulumi:"useAsDigitalSignature"`
	// The UseForKeyEncipherment param.
	UseForKeyEncipherment bool `pulumi:"useForKeyEncipherment"`
}

func LookupScepProfileOutput(ctx *pulumi.Context, args LookupScepProfileOutputArgs, opts ...pulumi.InvokeOption) LookupScepProfileResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupScepProfileResultOutput, error) {
			args := v.(LookupScepProfileArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupScepProfileResult
			secret, err := ctx.InvokePackageRaw("scm:index/getScepProfile:getScepProfile", args, &rv, "", opts...)
			if err != nil {
				return LookupScepProfileResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupScepProfileResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupScepProfileResultOutput), nil
			}
			return output, nil
		}).(LookupScepProfileResultOutput)
}

// A collection of arguments for invoking getScepProfile.
type LookupScepProfileOutputArgs struct {
	// The Id param.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupScepProfileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScepProfileArgs)(nil)).Elem()
}

// A collection of values returned by getScepProfile.
type LookupScepProfileResultOutput struct{ *pulumi.OutputState }

func (LookupScepProfileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScepProfileResult)(nil)).Elem()
}

func (o LookupScepProfileResultOutput) ToLookupScepProfileResultOutput() LookupScepProfileResultOutput {
	return o
}

func (o LookupScepProfileResultOutput) ToLookupScepProfileResultOutputWithContext(ctx context.Context) LookupScepProfileResultOutput {
	return o
}

// The Algorithm param.
func (o LookupScepProfileResultOutput) Algorithm() GetScepProfileAlgorithmOutput {
	return o.ApplyT(func(v LookupScepProfileResult) GetScepProfileAlgorithm { return v.Algorithm }).(GetScepProfileAlgorithmOutput)
}

// The CaIdentityName param.
func (o LookupScepProfileResultOutput) CaIdentityName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScepProfileResult) string { return v.CaIdentityName }).(pulumi.StringOutput)
}

// The CertificateAttributes param.
func (o LookupScepProfileResultOutput) CertificateAttributes() GetScepProfileCertificateAttributesOutput {
	return o.ApplyT(func(v LookupScepProfileResult) GetScepProfileCertificateAttributes { return v.CertificateAttributes }).(GetScepProfileCertificateAttributesOutput)
}

// The Digest param.
func (o LookupScepProfileResultOutput) Digest() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScepProfileResult) string { return v.Digest }).(pulumi.StringOutput)
}

// The Fingerprint param.
func (o LookupScepProfileResultOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScepProfileResult) string { return v.Fingerprint }).(pulumi.StringOutput)
}

// The Id param.
func (o LookupScepProfileResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScepProfileResult) string { return v.Id }).(pulumi.StringOutput)
}

// alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
func (o LookupScepProfileResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScepProfileResult) string { return v.Name }).(pulumi.StringOutput)
}

// The ScepCaCert param.
func (o LookupScepProfileResultOutput) ScepCaCert() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScepProfileResult) string { return v.ScepCaCert }).(pulumi.StringOutput)
}

// The ScepChallenge param.
func (o LookupScepProfileResultOutput) ScepChallenge() GetScepProfileScepChallengeOutput {
	return o.ApplyT(func(v LookupScepProfileResult) GetScepProfileScepChallenge { return v.ScepChallenge }).(GetScepProfileScepChallengeOutput)
}

// The ScepClientCert param.
func (o LookupScepProfileResultOutput) ScepClientCert() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScepProfileResult) string { return v.ScepClientCert }).(pulumi.StringOutput)
}

// The ScepUrl param.
func (o LookupScepProfileResultOutput) ScepUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScepProfileResult) string { return v.ScepUrl }).(pulumi.StringOutput)
}

// The Subject param.
func (o LookupScepProfileResultOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScepProfileResult) string { return v.Subject }).(pulumi.StringOutput)
}

func (o LookupScepProfileResultOutput) Tfid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScepProfileResult) string { return v.Tfid }).(pulumi.StringOutput)
}

// The UseAsDigitalSignature param.
func (o LookupScepProfileResultOutput) UseAsDigitalSignature() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupScepProfileResult) bool { return v.UseAsDigitalSignature }).(pulumi.BoolOutput)
}

// The UseForKeyEncipherment param.
func (o LookupScepProfileResultOutput) UseForKeyEncipherment() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupScepProfileResult) bool { return v.UseForKeyEncipherment }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupScepProfileResultOutput{})
}
