// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-scm/sdk/go/scm/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves a config item.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-scm/sdk/go/scm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scm.NewMfaServer(ctx, "example", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type MfaServer struct {
	pulumi.CustomResourceState

	// The Device param.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// The Folder param.
	Folder pulumi.StringPtrOutput `pulumi:"folder"`
	// The MfaCertProfile param.
	MfaCertProfile pulumi.StringOutput `pulumi:"mfaCertProfile"`
	// The MfaVendorType param.
	MfaVendorType MfaServerMfaVendorTypePtrOutput `pulumi:"mfaVendorType"`
	// The Name param.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Snippet param.
	Snippet pulumi.StringPtrOutput `pulumi:"snippet"`
	Tfid    pulumi.StringOutput    `pulumi:"tfid"`
}

// NewMfaServer registers a new resource with the given unique name, arguments, and options.
func NewMfaServer(ctx *pulumi.Context,
	name string, args *MfaServerArgs, opts ...pulumi.ResourceOption) (*MfaServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MfaCertProfile == nil {
		return nil, errors.New("invalid value for required argument 'MfaCertProfile'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MfaServer
	err := ctx.RegisterResource("scm:index/mfaServer:MfaServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMfaServer gets an existing MfaServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMfaServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MfaServerState, opts ...pulumi.ResourceOption) (*MfaServer, error) {
	var resource MfaServer
	err := ctx.ReadResource("scm:index/mfaServer:MfaServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MfaServer resources.
type mfaServerState struct {
	// The Device param.
	Device *string `pulumi:"device"`
	// The Folder param.
	Folder *string `pulumi:"folder"`
	// The MfaCertProfile param.
	MfaCertProfile *string `pulumi:"mfaCertProfile"`
	// The MfaVendorType param.
	MfaVendorType *MfaServerMfaVendorType `pulumi:"mfaVendorType"`
	// The Name param.
	Name *string `pulumi:"name"`
	// The Snippet param.
	Snippet *string `pulumi:"snippet"`
	Tfid    *string `pulumi:"tfid"`
}

type MfaServerState struct {
	// The Device param.
	Device pulumi.StringPtrInput
	// The Folder param.
	Folder pulumi.StringPtrInput
	// The MfaCertProfile param.
	MfaCertProfile pulumi.StringPtrInput
	// The MfaVendorType param.
	MfaVendorType MfaServerMfaVendorTypePtrInput
	// The Name param.
	Name pulumi.StringPtrInput
	// The Snippet param.
	Snippet pulumi.StringPtrInput
	Tfid    pulumi.StringPtrInput
}

func (MfaServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*mfaServerState)(nil)).Elem()
}

type mfaServerArgs struct {
	// The Device param.
	Device *string `pulumi:"device"`
	// The Folder param.
	Folder *string `pulumi:"folder"`
	// The MfaCertProfile param.
	MfaCertProfile string `pulumi:"mfaCertProfile"`
	// The MfaVendorType param.
	MfaVendorType *MfaServerMfaVendorType `pulumi:"mfaVendorType"`
	// The Name param.
	Name *string `pulumi:"name"`
	// The Snippet param.
	Snippet *string `pulumi:"snippet"`
}

// The set of arguments for constructing a MfaServer resource.
type MfaServerArgs struct {
	// The Device param.
	Device pulumi.StringPtrInput
	// The Folder param.
	Folder pulumi.StringPtrInput
	// The MfaCertProfile param.
	MfaCertProfile pulumi.StringInput
	// The MfaVendorType param.
	MfaVendorType MfaServerMfaVendorTypePtrInput
	// The Name param.
	Name pulumi.StringPtrInput
	// The Snippet param.
	Snippet pulumi.StringPtrInput
}

func (MfaServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mfaServerArgs)(nil)).Elem()
}

type MfaServerInput interface {
	pulumi.Input

	ToMfaServerOutput() MfaServerOutput
	ToMfaServerOutputWithContext(ctx context.Context) MfaServerOutput
}

func (*MfaServer) ElementType() reflect.Type {
	return reflect.TypeOf((**MfaServer)(nil)).Elem()
}

func (i *MfaServer) ToMfaServerOutput() MfaServerOutput {
	return i.ToMfaServerOutputWithContext(context.Background())
}

func (i *MfaServer) ToMfaServerOutputWithContext(ctx context.Context) MfaServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MfaServerOutput)
}

// MfaServerArrayInput is an input type that accepts MfaServerArray and MfaServerArrayOutput values.
// You can construct a concrete instance of `MfaServerArrayInput` via:
//
//	MfaServerArray{ MfaServerArgs{...} }
type MfaServerArrayInput interface {
	pulumi.Input

	ToMfaServerArrayOutput() MfaServerArrayOutput
	ToMfaServerArrayOutputWithContext(context.Context) MfaServerArrayOutput
}

type MfaServerArray []MfaServerInput

func (MfaServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MfaServer)(nil)).Elem()
}

func (i MfaServerArray) ToMfaServerArrayOutput() MfaServerArrayOutput {
	return i.ToMfaServerArrayOutputWithContext(context.Background())
}

func (i MfaServerArray) ToMfaServerArrayOutputWithContext(ctx context.Context) MfaServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MfaServerArrayOutput)
}

// MfaServerMapInput is an input type that accepts MfaServerMap and MfaServerMapOutput values.
// You can construct a concrete instance of `MfaServerMapInput` via:
//
//	MfaServerMap{ "key": MfaServerArgs{...} }
type MfaServerMapInput interface {
	pulumi.Input

	ToMfaServerMapOutput() MfaServerMapOutput
	ToMfaServerMapOutputWithContext(context.Context) MfaServerMapOutput
}

type MfaServerMap map[string]MfaServerInput

func (MfaServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MfaServer)(nil)).Elem()
}

func (i MfaServerMap) ToMfaServerMapOutput() MfaServerMapOutput {
	return i.ToMfaServerMapOutputWithContext(context.Background())
}

func (i MfaServerMap) ToMfaServerMapOutputWithContext(ctx context.Context) MfaServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MfaServerMapOutput)
}

type MfaServerOutput struct{ *pulumi.OutputState }

func (MfaServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MfaServer)(nil)).Elem()
}

func (o MfaServerOutput) ToMfaServerOutput() MfaServerOutput {
	return o
}

func (o MfaServerOutput) ToMfaServerOutputWithContext(ctx context.Context) MfaServerOutput {
	return o
}

// The Device param.
func (o MfaServerOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MfaServer) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// The Folder param.
func (o MfaServerOutput) Folder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MfaServer) pulumi.StringPtrOutput { return v.Folder }).(pulumi.StringPtrOutput)
}

// The MfaCertProfile param.
func (o MfaServerOutput) MfaCertProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaServer) pulumi.StringOutput { return v.MfaCertProfile }).(pulumi.StringOutput)
}

// The MfaVendorType param.
func (o MfaServerOutput) MfaVendorType() MfaServerMfaVendorTypePtrOutput {
	return o.ApplyT(func(v *MfaServer) MfaServerMfaVendorTypePtrOutput { return v.MfaVendorType }).(MfaServerMfaVendorTypePtrOutput)
}

// The Name param.
func (o MfaServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaServer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Snippet param.
func (o MfaServerOutput) Snippet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MfaServer) pulumi.StringPtrOutput { return v.Snippet }).(pulumi.StringPtrOutput)
}

func (o MfaServerOutput) Tfid() pulumi.StringOutput {
	return o.ApplyT(func(v *MfaServer) pulumi.StringOutput { return v.Tfid }).(pulumi.StringOutput)
}

type MfaServerArrayOutput struct{ *pulumi.OutputState }

func (MfaServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MfaServer)(nil)).Elem()
}

func (o MfaServerArrayOutput) ToMfaServerArrayOutput() MfaServerArrayOutput {
	return o
}

func (o MfaServerArrayOutput) ToMfaServerArrayOutputWithContext(ctx context.Context) MfaServerArrayOutput {
	return o
}

func (o MfaServerArrayOutput) Index(i pulumi.IntInput) MfaServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MfaServer {
		return vs[0].([]*MfaServer)[vs[1].(int)]
	}).(MfaServerOutput)
}

type MfaServerMapOutput struct{ *pulumi.OutputState }

func (MfaServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MfaServer)(nil)).Elem()
}

func (o MfaServerMapOutput) ToMfaServerMapOutput() MfaServerMapOutput {
	return o
}

func (o MfaServerMapOutput) ToMfaServerMapOutputWithContext(ctx context.Context) MfaServerMapOutput {
	return o
}

func (o MfaServerMapOutput) MapIndex(k pulumi.StringInput) MfaServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MfaServer {
		return vs[0].(map[string]*MfaServer)[vs[1].(string)]
	}).(MfaServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MfaServerInput)(nil)).Elem(), &MfaServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*MfaServerArrayInput)(nil)).Elem(), MfaServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MfaServerMapInput)(nil)).Elem(), MfaServerMap{})
	pulumi.RegisterOutputType(MfaServerOutput{})
	pulumi.RegisterOutputType(MfaServerArrayOutput{})
	pulumi.RegisterOutputType(MfaServerMapOutput{})
}
