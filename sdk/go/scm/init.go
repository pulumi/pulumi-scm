// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scm

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-scm/sdk/go/scm/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "scm:index/addressGroup:AddressGroup":
		r = &AddressGroup{}
	case "scm:index/addressObject:AddressObject":
		r = &AddressObject{}
	case "scm:index/antiSpywareProfile:AntiSpywareProfile":
		r = &AntiSpywareProfile{}
	case "scm:index/antiSpywareSignature:AntiSpywareSignature":
		r = &AntiSpywareSignature{}
	case "scm:index/appOverrideRule:AppOverrideRule":
		r = &AppOverrideRule{}
	case "scm:index/application:Application":
		r = &Application{}
	case "scm:index/applicationFilter:ApplicationFilter":
		r = &ApplicationFilter{}
	case "scm:index/applicationGroup:ApplicationGroup":
		r = &ApplicationGroup{}
	case "scm:index/authenticationPortal:AuthenticationPortal":
		r = &AuthenticationPortal{}
	case "scm:index/authenticationProfile:AuthenticationProfile":
		r = &AuthenticationProfile{}
	case "scm:index/authenticationRule:AuthenticationRule":
		r = &AuthenticationRule{}
	case "scm:index/authenticationSequence:AuthenticationSequence":
		r = &AuthenticationSequence{}
	case "scm:index/certificateProfile:CertificateProfile":
		r = &CertificateProfile{}
	case "scm:index/decryptionExclusion:DecryptionExclusion":
		r = &DecryptionExclusion{}
	case "scm:index/decryptionProfile:DecryptionProfile":
		r = &DecryptionProfile{}
	case "scm:index/decryptionRule:DecryptionRule":
		r = &DecryptionRule{}
	case "scm:index/dnsSecurityProfile:DnsSecurityProfile":
		r = &DnsSecurityProfile{}
	case "scm:index/dynamicUserGroup:DynamicUserGroup":
		r = &DynamicUserGroup{}
	case "scm:index/externalDynamicList:ExternalDynamicList":
		r = &ExternalDynamicList{}
	case "scm:index/fileBlockingProfile:FileBlockingProfile":
		r = &FileBlockingProfile{}
	case "scm:index/folder:Folder":
		r = &Folder{}
	case "scm:index/hipObject:HipObject":
		r = &HipObject{}
	case "scm:index/hipProfile:HipProfile":
		r = &HipProfile{}
	case "scm:index/httpHeaderProfile:HttpHeaderProfile":
		r = &HttpHeaderProfile{}
	case "scm:index/ikeCryptoProfile:IkeCryptoProfile":
		r = &IkeCryptoProfile{}
	case "scm:index/ikeGateway:IkeGateway":
		r = &IkeGateway{}
	case "scm:index/internalDnsServer:InternalDnsServer":
		r = &InternalDnsServer{}
	case "scm:index/ipsecCryptoProfile:IpsecCryptoProfile":
		r = &IpsecCryptoProfile{}
	case "scm:index/ipsecTunnel:IpsecTunnel":
		r = &IpsecTunnel{}
	case "scm:index/kerberosServerProfile:KerberosServerProfile":
		r = &KerberosServerProfile{}
	case "scm:index/ldapServerProfile:LdapServerProfile":
		r = &LdapServerProfile{}
	case "scm:index/localUser:LocalUser":
		r = &LocalUser{}
	case "scm:index/mfaServer:MfaServer":
		r = &MfaServer{}
	case "scm:index/natRule:NatRule":
		r = &NatRule{}
	case "scm:index/ocspResponder:OcspResponder":
		r = &OcspResponder{}
	case "scm:index/profileGroup:ProfileGroup":
		r = &ProfileGroup{}
	case "scm:index/qosPolicyRule:QosPolicyRule":
		r = &QosPolicyRule{}
	case "scm:index/qosProfile:QosProfile":
		r = &QosProfile{}
	case "scm:index/radiusServerProfile:RadiusServerProfile":
		r = &RadiusServerProfile{}
	case "scm:index/region:Region":
		r = &Region{}
	case "scm:index/remoteNetwork:RemoteNetwork":
		r = &RemoteNetwork{}
	case "scm:index/samlServerProfile:SamlServerProfile":
		r = &SamlServerProfile{}
	case "scm:index/scepProfile:ScepProfile":
		r = &ScepProfile{}
	case "scm:index/schedule:Schedule":
		r = &Schedule{}
	case "scm:index/securityRule:SecurityRule":
		r = &SecurityRule{}
	case "scm:index/service:Service":
		r = &Service{}
	case "scm:index/serviceConnection:ServiceConnection":
		r = &ServiceConnection{}
	case "scm:index/serviceConnectionGroup:ServiceConnectionGroup":
		r = &ServiceConnectionGroup{}
	case "scm:index/serviceGroup:ServiceGroup":
		r = &ServiceGroup{}
	case "scm:index/snippet:Snippet":
		r = &Snippet{}
	case "scm:index/tacacsServerProfile:TacacsServerProfile":
		r = &TacacsServerProfile{}
	case "scm:index/tag:Tag":
		r = &Tag{}
	case "scm:index/tlsServiceProfile:TlsServiceProfile":
		r = &TlsServiceProfile{}
	case "scm:index/trafficSteeringRule:TrafficSteeringRule":
		r = &TrafficSteeringRule{}
	case "scm:index/urlAccessProfile:UrlAccessProfile":
		r = &UrlAccessProfile{}
	case "scm:index/urlCategory:UrlCategory":
		r = &UrlCategory{}
	case "scm:index/variable:Variable":
		r = &Variable{}
	case "scm:index/vulnerabilityProtectionProfile:VulnerabilityProtectionProfile":
		r = &VulnerabilityProtectionProfile{}
	case "scm:index/vulnerabilityProtectionSignatures:VulnerabilityProtectionSignatures":
		r = &VulnerabilityProtectionSignatures{}
	case "scm:index/wildfireAntiVirusProfile:WildfireAntiVirusProfile":
		r = &WildfireAntiVirusProfile{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:scm" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"scm",
		"index/addressGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/addressObject",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/antiSpywareProfile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/antiSpywareSignature",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/appOverrideRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/application",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/applicationFilter",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/applicationGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/authenticationPortal",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/authenticationProfile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/authenticationRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/authenticationSequence",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/certificateProfile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/decryptionExclusion",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/decryptionProfile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/decryptionRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/dnsSecurityProfile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/dynamicUserGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/externalDynamicList",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/fileBlockingProfile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/folder",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/hipObject",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/hipProfile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/httpHeaderProfile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/ikeCryptoProfile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/ikeGateway",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/internalDnsServer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/ipsecCryptoProfile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/ipsecTunnel",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/kerberosServerProfile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/ldapServerProfile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/localUser",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/mfaServer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/natRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/ocspResponder",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/profileGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/qosPolicyRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/qosProfile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/radiusServerProfile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/region",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/remoteNetwork",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/samlServerProfile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/scepProfile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/schedule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/securityRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/service",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/serviceConnection",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/serviceConnectionGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/serviceGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/snippet",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/tacacsServerProfile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/tag",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/tlsServiceProfile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/trafficSteeringRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/urlAccessProfile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/urlCategory",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/variable",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/vulnerabilityProtectionProfile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/vulnerabilityProtectionSignatures",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"scm",
		"index/wildfireAntiVirusProfile",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"scm",
		&pkg{version},
	)
}
