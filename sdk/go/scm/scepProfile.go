// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-scm/sdk/go/scm/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves a config item.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-scm/sdk/go/scm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scm.NewScepProfile(ctx, "example", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ScepProfile struct {
	pulumi.CustomResourceState

	// The Algorithm param.
	Algorithm ScepProfileAlgorithmPtrOutput `pulumi:"algorithm"`
	// The CaIdentityName param.
	CaIdentityName pulumi.StringOutput `pulumi:"caIdentityName"`
	// The CertificateAttributes param.
	CertificateAttributes ScepProfileCertificateAttributesPtrOutput `pulumi:"certificateAttributes"`
	// The Device param.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// The Digest param.
	Digest pulumi.StringOutput `pulumi:"digest"`
	// (Internal use) Encrypted values returned from the API.
	EncryptedValues pulumi.StringMapOutput `pulumi:"encryptedValues"`
	// The Fingerprint param.
	Fingerprint pulumi.StringPtrOutput `pulumi:"fingerprint"`
	// The Folder param.
	Folder pulumi.StringPtrOutput `pulumi:"folder"`
	// alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ScepCaCert param.
	ScepCaCert pulumi.StringPtrOutput `pulumi:"scepCaCert"`
	// The ScepChallenge param.
	ScepChallenge ScepProfileScepChallengePtrOutput `pulumi:"scepChallenge"`
	// The ScepClientCert param.
	ScepClientCert pulumi.StringPtrOutput `pulumi:"scepClientCert"`
	// The ScepUrl param.
	ScepUrl pulumi.StringOutput `pulumi:"scepUrl"`
	// The Snippet param.
	Snippet pulumi.StringPtrOutput `pulumi:"snippet"`
	// The Subject param.
	Subject pulumi.StringPtrOutput `pulumi:"subject"`
	Tfid    pulumi.StringOutput    `pulumi:"tfid"`
	// The UseAsDigitalSignature param.
	UseAsDigitalSignature pulumi.BoolPtrOutput `pulumi:"useAsDigitalSignature"`
	// The UseForKeyEncipherment param.
	UseForKeyEncipherment pulumi.BoolPtrOutput `pulumi:"useForKeyEncipherment"`
}

// NewScepProfile registers a new resource with the given unique name, arguments, and options.
func NewScepProfile(ctx *pulumi.Context,
	name string, args *ScepProfileArgs, opts ...pulumi.ResourceOption) (*ScepProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CaIdentityName == nil {
		return nil, errors.New("invalid value for required argument 'CaIdentityName'")
	}
	if args.Digest == nil {
		return nil, errors.New("invalid value for required argument 'Digest'")
	}
	if args.ScepUrl == nil {
		return nil, errors.New("invalid value for required argument 'ScepUrl'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"encryptedValues",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ScepProfile
	err := ctx.RegisterResource("scm:index/scepProfile:ScepProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScepProfile gets an existing ScepProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScepProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScepProfileState, opts ...pulumi.ResourceOption) (*ScepProfile, error) {
	var resource ScepProfile
	err := ctx.ReadResource("scm:index/scepProfile:ScepProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScepProfile resources.
type scepProfileState struct {
	// The Algorithm param.
	Algorithm *ScepProfileAlgorithm `pulumi:"algorithm"`
	// The CaIdentityName param.
	CaIdentityName *string `pulumi:"caIdentityName"`
	// The CertificateAttributes param.
	CertificateAttributes *ScepProfileCertificateAttributes `pulumi:"certificateAttributes"`
	// The Device param.
	Device *string `pulumi:"device"`
	// The Digest param.
	Digest *string `pulumi:"digest"`
	// (Internal use) Encrypted values returned from the API.
	EncryptedValues map[string]string `pulumi:"encryptedValues"`
	// The Fingerprint param.
	Fingerprint *string `pulumi:"fingerprint"`
	// The Folder param.
	Folder *string `pulumi:"folder"`
	// alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
	Name *string `pulumi:"name"`
	// The ScepCaCert param.
	ScepCaCert *string `pulumi:"scepCaCert"`
	// The ScepChallenge param.
	ScepChallenge *ScepProfileScepChallenge `pulumi:"scepChallenge"`
	// The ScepClientCert param.
	ScepClientCert *string `pulumi:"scepClientCert"`
	// The ScepUrl param.
	ScepUrl *string `pulumi:"scepUrl"`
	// The Snippet param.
	Snippet *string `pulumi:"snippet"`
	// The Subject param.
	Subject *string `pulumi:"subject"`
	Tfid    *string `pulumi:"tfid"`
	// The UseAsDigitalSignature param.
	UseAsDigitalSignature *bool `pulumi:"useAsDigitalSignature"`
	// The UseForKeyEncipherment param.
	UseForKeyEncipherment *bool `pulumi:"useForKeyEncipherment"`
}

type ScepProfileState struct {
	// The Algorithm param.
	Algorithm ScepProfileAlgorithmPtrInput
	// The CaIdentityName param.
	CaIdentityName pulumi.StringPtrInput
	// The CertificateAttributes param.
	CertificateAttributes ScepProfileCertificateAttributesPtrInput
	// The Device param.
	Device pulumi.StringPtrInput
	// The Digest param.
	Digest pulumi.StringPtrInput
	// (Internal use) Encrypted values returned from the API.
	EncryptedValues pulumi.StringMapInput
	// The Fingerprint param.
	Fingerprint pulumi.StringPtrInput
	// The Folder param.
	Folder pulumi.StringPtrInput
	// alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
	Name pulumi.StringPtrInput
	// The ScepCaCert param.
	ScepCaCert pulumi.StringPtrInput
	// The ScepChallenge param.
	ScepChallenge ScepProfileScepChallengePtrInput
	// The ScepClientCert param.
	ScepClientCert pulumi.StringPtrInput
	// The ScepUrl param.
	ScepUrl pulumi.StringPtrInput
	// The Snippet param.
	Snippet pulumi.StringPtrInput
	// The Subject param.
	Subject pulumi.StringPtrInput
	Tfid    pulumi.StringPtrInput
	// The UseAsDigitalSignature param.
	UseAsDigitalSignature pulumi.BoolPtrInput
	// The UseForKeyEncipherment param.
	UseForKeyEncipherment pulumi.BoolPtrInput
}

func (ScepProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*scepProfileState)(nil)).Elem()
}

type scepProfileArgs struct {
	// The Algorithm param.
	Algorithm *ScepProfileAlgorithm `pulumi:"algorithm"`
	// The CaIdentityName param.
	CaIdentityName string `pulumi:"caIdentityName"`
	// The CertificateAttributes param.
	CertificateAttributes *ScepProfileCertificateAttributes `pulumi:"certificateAttributes"`
	// The Device param.
	Device *string `pulumi:"device"`
	// The Digest param.
	Digest string `pulumi:"digest"`
	// The Fingerprint param.
	Fingerprint *string `pulumi:"fingerprint"`
	// The Folder param.
	Folder *string `pulumi:"folder"`
	// alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
	Name *string `pulumi:"name"`
	// The ScepCaCert param.
	ScepCaCert *string `pulumi:"scepCaCert"`
	// The ScepChallenge param.
	ScepChallenge *ScepProfileScepChallenge `pulumi:"scepChallenge"`
	// The ScepClientCert param.
	ScepClientCert *string `pulumi:"scepClientCert"`
	// The ScepUrl param.
	ScepUrl string `pulumi:"scepUrl"`
	// The Snippet param.
	Snippet *string `pulumi:"snippet"`
	// The Subject param.
	Subject *string `pulumi:"subject"`
	// The UseAsDigitalSignature param.
	UseAsDigitalSignature *bool `pulumi:"useAsDigitalSignature"`
	// The UseForKeyEncipherment param.
	UseForKeyEncipherment *bool `pulumi:"useForKeyEncipherment"`
}

// The set of arguments for constructing a ScepProfile resource.
type ScepProfileArgs struct {
	// The Algorithm param.
	Algorithm ScepProfileAlgorithmPtrInput
	// The CaIdentityName param.
	CaIdentityName pulumi.StringInput
	// The CertificateAttributes param.
	CertificateAttributes ScepProfileCertificateAttributesPtrInput
	// The Device param.
	Device pulumi.StringPtrInput
	// The Digest param.
	Digest pulumi.StringInput
	// The Fingerprint param.
	Fingerprint pulumi.StringPtrInput
	// The Folder param.
	Folder pulumi.StringPtrInput
	// alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
	Name pulumi.StringPtrInput
	// The ScepCaCert param.
	ScepCaCert pulumi.StringPtrInput
	// The ScepChallenge param.
	ScepChallenge ScepProfileScepChallengePtrInput
	// The ScepClientCert param.
	ScepClientCert pulumi.StringPtrInput
	// The ScepUrl param.
	ScepUrl pulumi.StringInput
	// The Snippet param.
	Snippet pulumi.StringPtrInput
	// The Subject param.
	Subject pulumi.StringPtrInput
	// The UseAsDigitalSignature param.
	UseAsDigitalSignature pulumi.BoolPtrInput
	// The UseForKeyEncipherment param.
	UseForKeyEncipherment pulumi.BoolPtrInput
}

func (ScepProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scepProfileArgs)(nil)).Elem()
}

type ScepProfileInput interface {
	pulumi.Input

	ToScepProfileOutput() ScepProfileOutput
	ToScepProfileOutputWithContext(ctx context.Context) ScepProfileOutput
}

func (*ScepProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**ScepProfile)(nil)).Elem()
}

func (i *ScepProfile) ToScepProfileOutput() ScepProfileOutput {
	return i.ToScepProfileOutputWithContext(context.Background())
}

func (i *ScepProfile) ToScepProfileOutputWithContext(ctx context.Context) ScepProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScepProfileOutput)
}

// ScepProfileArrayInput is an input type that accepts ScepProfileArray and ScepProfileArrayOutput values.
// You can construct a concrete instance of `ScepProfileArrayInput` via:
//
//	ScepProfileArray{ ScepProfileArgs{...} }
type ScepProfileArrayInput interface {
	pulumi.Input

	ToScepProfileArrayOutput() ScepProfileArrayOutput
	ToScepProfileArrayOutputWithContext(context.Context) ScepProfileArrayOutput
}

type ScepProfileArray []ScepProfileInput

func (ScepProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScepProfile)(nil)).Elem()
}

func (i ScepProfileArray) ToScepProfileArrayOutput() ScepProfileArrayOutput {
	return i.ToScepProfileArrayOutputWithContext(context.Background())
}

func (i ScepProfileArray) ToScepProfileArrayOutputWithContext(ctx context.Context) ScepProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScepProfileArrayOutput)
}

// ScepProfileMapInput is an input type that accepts ScepProfileMap and ScepProfileMapOutput values.
// You can construct a concrete instance of `ScepProfileMapInput` via:
//
//	ScepProfileMap{ "key": ScepProfileArgs{...} }
type ScepProfileMapInput interface {
	pulumi.Input

	ToScepProfileMapOutput() ScepProfileMapOutput
	ToScepProfileMapOutputWithContext(context.Context) ScepProfileMapOutput
}

type ScepProfileMap map[string]ScepProfileInput

func (ScepProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScepProfile)(nil)).Elem()
}

func (i ScepProfileMap) ToScepProfileMapOutput() ScepProfileMapOutput {
	return i.ToScepProfileMapOutputWithContext(context.Background())
}

func (i ScepProfileMap) ToScepProfileMapOutputWithContext(ctx context.Context) ScepProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScepProfileMapOutput)
}

type ScepProfileOutput struct{ *pulumi.OutputState }

func (ScepProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScepProfile)(nil)).Elem()
}

func (o ScepProfileOutput) ToScepProfileOutput() ScepProfileOutput {
	return o
}

func (o ScepProfileOutput) ToScepProfileOutputWithContext(ctx context.Context) ScepProfileOutput {
	return o
}

// The Algorithm param.
func (o ScepProfileOutput) Algorithm() ScepProfileAlgorithmPtrOutput {
	return o.ApplyT(func(v *ScepProfile) ScepProfileAlgorithmPtrOutput { return v.Algorithm }).(ScepProfileAlgorithmPtrOutput)
}

// The CaIdentityName param.
func (o ScepProfileOutput) CaIdentityName() pulumi.StringOutput {
	return o.ApplyT(func(v *ScepProfile) pulumi.StringOutput { return v.CaIdentityName }).(pulumi.StringOutput)
}

// The CertificateAttributes param.
func (o ScepProfileOutput) CertificateAttributes() ScepProfileCertificateAttributesPtrOutput {
	return o.ApplyT(func(v *ScepProfile) ScepProfileCertificateAttributesPtrOutput { return v.CertificateAttributes }).(ScepProfileCertificateAttributesPtrOutput)
}

// The Device param.
func (o ScepProfileOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScepProfile) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// The Digest param.
func (o ScepProfileOutput) Digest() pulumi.StringOutput {
	return o.ApplyT(func(v *ScepProfile) pulumi.StringOutput { return v.Digest }).(pulumi.StringOutput)
}

// (Internal use) Encrypted values returned from the API.
func (o ScepProfileOutput) EncryptedValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ScepProfile) pulumi.StringMapOutput { return v.EncryptedValues }).(pulumi.StringMapOutput)
}

// The Fingerprint param.
func (o ScepProfileOutput) Fingerprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScepProfile) pulumi.StringPtrOutput { return v.Fingerprint }).(pulumi.StringPtrOutput)
}

// The Folder param.
func (o ScepProfileOutput) Folder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScepProfile) pulumi.StringPtrOutput { return v.Folder }).(pulumi.StringPtrOutput)
}

// alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
func (o ScepProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ScepProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ScepCaCert param.
func (o ScepProfileOutput) ScepCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScepProfile) pulumi.StringPtrOutput { return v.ScepCaCert }).(pulumi.StringPtrOutput)
}

// The ScepChallenge param.
func (o ScepProfileOutput) ScepChallenge() ScepProfileScepChallengePtrOutput {
	return o.ApplyT(func(v *ScepProfile) ScepProfileScepChallengePtrOutput { return v.ScepChallenge }).(ScepProfileScepChallengePtrOutput)
}

// The ScepClientCert param.
func (o ScepProfileOutput) ScepClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScepProfile) pulumi.StringPtrOutput { return v.ScepClientCert }).(pulumi.StringPtrOutput)
}

// The ScepUrl param.
func (o ScepProfileOutput) ScepUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *ScepProfile) pulumi.StringOutput { return v.ScepUrl }).(pulumi.StringOutput)
}

// The Snippet param.
func (o ScepProfileOutput) Snippet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScepProfile) pulumi.StringPtrOutput { return v.Snippet }).(pulumi.StringPtrOutput)
}

// The Subject param.
func (o ScepProfileOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScepProfile) pulumi.StringPtrOutput { return v.Subject }).(pulumi.StringPtrOutput)
}

func (o ScepProfileOutput) Tfid() pulumi.StringOutput {
	return o.ApplyT(func(v *ScepProfile) pulumi.StringOutput { return v.Tfid }).(pulumi.StringOutput)
}

// The UseAsDigitalSignature param.
func (o ScepProfileOutput) UseAsDigitalSignature() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ScepProfile) pulumi.BoolPtrOutput { return v.UseAsDigitalSignature }).(pulumi.BoolPtrOutput)
}

// The UseForKeyEncipherment param.
func (o ScepProfileOutput) UseForKeyEncipherment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ScepProfile) pulumi.BoolPtrOutput { return v.UseForKeyEncipherment }).(pulumi.BoolPtrOutput)
}

type ScepProfileArrayOutput struct{ *pulumi.OutputState }

func (ScepProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScepProfile)(nil)).Elem()
}

func (o ScepProfileArrayOutput) ToScepProfileArrayOutput() ScepProfileArrayOutput {
	return o
}

func (o ScepProfileArrayOutput) ToScepProfileArrayOutputWithContext(ctx context.Context) ScepProfileArrayOutput {
	return o
}

func (o ScepProfileArrayOutput) Index(i pulumi.IntInput) ScepProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ScepProfile {
		return vs[0].([]*ScepProfile)[vs[1].(int)]
	}).(ScepProfileOutput)
}

type ScepProfileMapOutput struct{ *pulumi.OutputState }

func (ScepProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScepProfile)(nil)).Elem()
}

func (o ScepProfileMapOutput) ToScepProfileMapOutput() ScepProfileMapOutput {
	return o
}

func (o ScepProfileMapOutput) ToScepProfileMapOutputWithContext(ctx context.Context) ScepProfileMapOutput {
	return o
}

func (o ScepProfileMapOutput) MapIndex(k pulumi.StringInput) ScepProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ScepProfile {
		return vs[0].(map[string]*ScepProfile)[vs[1].(string)]
	}).(ScepProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScepProfileInput)(nil)).Elem(), &ScepProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScepProfileArrayInput)(nil)).Elem(), ScepProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScepProfileMapInput)(nil)).Elem(), ScepProfileMap{})
	pulumi.RegisterOutputType(ScepProfileOutput{})
	pulumi.RegisterOutputType(ScepProfileArrayOutput{})
	pulumi.RegisterOutputType(ScepProfileMapOutput{})
}
