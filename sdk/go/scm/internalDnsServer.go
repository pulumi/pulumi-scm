// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-scm/sdk/go/scm/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves a config item.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-scm/sdk/go/scm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scm.NewInternalDnsServer(ctx, "example", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type InternalDnsServer struct {
	pulumi.CustomResourceState

	// The DomainNames param.
	DomainNames pulumi.StringArrayOutput `pulumi:"domainNames"`
	// The Name param.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Primary param.
	Primary pulumi.StringOutput `pulumi:"primary"`
	// The Secondary param.
	Secondary pulumi.StringPtrOutput `pulumi:"secondary"`
	Tfid      pulumi.StringOutput    `pulumi:"tfid"`
}

// NewInternalDnsServer registers a new resource with the given unique name, arguments, and options.
func NewInternalDnsServer(ctx *pulumi.Context,
	name string, args *InternalDnsServerArgs, opts ...pulumi.ResourceOption) (*InternalDnsServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainNames == nil {
		return nil, errors.New("invalid value for required argument 'DomainNames'")
	}
	if args.Primary == nil {
		return nil, errors.New("invalid value for required argument 'Primary'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InternalDnsServer
	err := ctx.RegisterResource("scm:index/internalDnsServer:InternalDnsServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInternalDnsServer gets an existing InternalDnsServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInternalDnsServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InternalDnsServerState, opts ...pulumi.ResourceOption) (*InternalDnsServer, error) {
	var resource InternalDnsServer
	err := ctx.ReadResource("scm:index/internalDnsServer:InternalDnsServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InternalDnsServer resources.
type internalDnsServerState struct {
	// The DomainNames param.
	DomainNames []string `pulumi:"domainNames"`
	// The Name param.
	Name *string `pulumi:"name"`
	// The Primary param.
	Primary *string `pulumi:"primary"`
	// The Secondary param.
	Secondary *string `pulumi:"secondary"`
	Tfid      *string `pulumi:"tfid"`
}

type InternalDnsServerState struct {
	// The DomainNames param.
	DomainNames pulumi.StringArrayInput
	// The Name param.
	Name pulumi.StringPtrInput
	// The Primary param.
	Primary pulumi.StringPtrInput
	// The Secondary param.
	Secondary pulumi.StringPtrInput
	Tfid      pulumi.StringPtrInput
}

func (InternalDnsServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*internalDnsServerState)(nil)).Elem()
}

type internalDnsServerArgs struct {
	// The DomainNames param.
	DomainNames []string `pulumi:"domainNames"`
	// The Name param.
	Name *string `pulumi:"name"`
	// The Primary param.
	Primary string `pulumi:"primary"`
	// The Secondary param.
	Secondary *string `pulumi:"secondary"`
}

// The set of arguments for constructing a InternalDnsServer resource.
type InternalDnsServerArgs struct {
	// The DomainNames param.
	DomainNames pulumi.StringArrayInput
	// The Name param.
	Name pulumi.StringPtrInput
	// The Primary param.
	Primary pulumi.StringInput
	// The Secondary param.
	Secondary pulumi.StringPtrInput
}

func (InternalDnsServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*internalDnsServerArgs)(nil)).Elem()
}

type InternalDnsServerInput interface {
	pulumi.Input

	ToInternalDnsServerOutput() InternalDnsServerOutput
	ToInternalDnsServerOutputWithContext(ctx context.Context) InternalDnsServerOutput
}

func (*InternalDnsServer) ElementType() reflect.Type {
	return reflect.TypeOf((**InternalDnsServer)(nil)).Elem()
}

func (i *InternalDnsServer) ToInternalDnsServerOutput() InternalDnsServerOutput {
	return i.ToInternalDnsServerOutputWithContext(context.Background())
}

func (i *InternalDnsServer) ToInternalDnsServerOutputWithContext(ctx context.Context) InternalDnsServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternalDnsServerOutput)
}

// InternalDnsServerArrayInput is an input type that accepts InternalDnsServerArray and InternalDnsServerArrayOutput values.
// You can construct a concrete instance of `InternalDnsServerArrayInput` via:
//
//	InternalDnsServerArray{ InternalDnsServerArgs{...} }
type InternalDnsServerArrayInput interface {
	pulumi.Input

	ToInternalDnsServerArrayOutput() InternalDnsServerArrayOutput
	ToInternalDnsServerArrayOutputWithContext(context.Context) InternalDnsServerArrayOutput
}

type InternalDnsServerArray []InternalDnsServerInput

func (InternalDnsServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InternalDnsServer)(nil)).Elem()
}

func (i InternalDnsServerArray) ToInternalDnsServerArrayOutput() InternalDnsServerArrayOutput {
	return i.ToInternalDnsServerArrayOutputWithContext(context.Background())
}

func (i InternalDnsServerArray) ToInternalDnsServerArrayOutputWithContext(ctx context.Context) InternalDnsServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternalDnsServerArrayOutput)
}

// InternalDnsServerMapInput is an input type that accepts InternalDnsServerMap and InternalDnsServerMapOutput values.
// You can construct a concrete instance of `InternalDnsServerMapInput` via:
//
//	InternalDnsServerMap{ "key": InternalDnsServerArgs{...} }
type InternalDnsServerMapInput interface {
	pulumi.Input

	ToInternalDnsServerMapOutput() InternalDnsServerMapOutput
	ToInternalDnsServerMapOutputWithContext(context.Context) InternalDnsServerMapOutput
}

type InternalDnsServerMap map[string]InternalDnsServerInput

func (InternalDnsServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InternalDnsServer)(nil)).Elem()
}

func (i InternalDnsServerMap) ToInternalDnsServerMapOutput() InternalDnsServerMapOutput {
	return i.ToInternalDnsServerMapOutputWithContext(context.Background())
}

func (i InternalDnsServerMap) ToInternalDnsServerMapOutputWithContext(ctx context.Context) InternalDnsServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternalDnsServerMapOutput)
}

type InternalDnsServerOutput struct{ *pulumi.OutputState }

func (InternalDnsServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InternalDnsServer)(nil)).Elem()
}

func (o InternalDnsServerOutput) ToInternalDnsServerOutput() InternalDnsServerOutput {
	return o
}

func (o InternalDnsServerOutput) ToInternalDnsServerOutputWithContext(ctx context.Context) InternalDnsServerOutput {
	return o
}

// The DomainNames param.
func (o InternalDnsServerOutput) DomainNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InternalDnsServer) pulumi.StringArrayOutput { return v.DomainNames }).(pulumi.StringArrayOutput)
}

// The Name param.
func (o InternalDnsServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InternalDnsServer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Primary param.
func (o InternalDnsServerOutput) Primary() pulumi.StringOutput {
	return o.ApplyT(func(v *InternalDnsServer) pulumi.StringOutput { return v.Primary }).(pulumi.StringOutput)
}

// The Secondary param.
func (o InternalDnsServerOutput) Secondary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InternalDnsServer) pulumi.StringPtrOutput { return v.Secondary }).(pulumi.StringPtrOutput)
}

func (o InternalDnsServerOutput) Tfid() pulumi.StringOutput {
	return o.ApplyT(func(v *InternalDnsServer) pulumi.StringOutput { return v.Tfid }).(pulumi.StringOutput)
}

type InternalDnsServerArrayOutput struct{ *pulumi.OutputState }

func (InternalDnsServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InternalDnsServer)(nil)).Elem()
}

func (o InternalDnsServerArrayOutput) ToInternalDnsServerArrayOutput() InternalDnsServerArrayOutput {
	return o
}

func (o InternalDnsServerArrayOutput) ToInternalDnsServerArrayOutputWithContext(ctx context.Context) InternalDnsServerArrayOutput {
	return o
}

func (o InternalDnsServerArrayOutput) Index(i pulumi.IntInput) InternalDnsServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InternalDnsServer {
		return vs[0].([]*InternalDnsServer)[vs[1].(int)]
	}).(InternalDnsServerOutput)
}

type InternalDnsServerMapOutput struct{ *pulumi.OutputState }

func (InternalDnsServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InternalDnsServer)(nil)).Elem()
}

func (o InternalDnsServerMapOutput) ToInternalDnsServerMapOutput() InternalDnsServerMapOutput {
	return o
}

func (o InternalDnsServerMapOutput) ToInternalDnsServerMapOutputWithContext(ctx context.Context) InternalDnsServerMapOutput {
	return o
}

func (o InternalDnsServerMapOutput) MapIndex(k pulumi.StringInput) InternalDnsServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InternalDnsServer {
		return vs[0].(map[string]*InternalDnsServer)[vs[1].(string)]
	}).(InternalDnsServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InternalDnsServerInput)(nil)).Elem(), &InternalDnsServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*InternalDnsServerArrayInput)(nil)).Elem(), InternalDnsServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InternalDnsServerMapInput)(nil)).Elem(), InternalDnsServerMap{})
	pulumi.RegisterOutputType(InternalDnsServerOutput{})
	pulumi.RegisterOutputType(InternalDnsServerArrayOutput{})
	pulumi.RegisterOutputType(InternalDnsServerMapOutput{})
}
