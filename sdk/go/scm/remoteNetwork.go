// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-scm/sdk/go/scm/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves a config item.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-scm/sdk/go/scm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scm.NewRemoteNetwork(ctx, "example", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type RemoteNetwork struct {
	pulumi.CustomResourceState

	// The EcmpLoadBalancing param. String must be one of these: `"enable"`, `"disable"`. Default: `"disable"`.
	EcmpLoadBalancing pulumi.StringOutput `pulumi:"ecmpLoadBalancing"`
	// ecmp*tunnels is required when ecmp*load*balancing is enable.
	EcmpTunnels RemoteNetworkEcmpTunnelArrayOutput `pulumi:"ecmpTunnels"`
	// (Internal use) Encrypted values returned from the API.
	EncryptedValues pulumi.StringMapOutput `pulumi:"encryptedValues"`
	// The Folder param. String can either be a specific string(`"Remote Networks"`) or match this regex: `^[\s0-9a-zA-Z._-]{1,}$`. Default: `"Remote Networks"`.
	Folder pulumi.StringOutput `pulumi:"folder"`
	// ipsec*tunnel is required when ecmp*load_balancing is disable.
	IpsecTunnel pulumi.StringPtrOutput `pulumi:"ipsecTunnel"`
	// New customer will only be on aggregate bandwidth licensing. String length must exceed 1 characters. Default: `"FWAAS-AGGREGATE"`.
	LicenseType pulumi.StringOutput `pulumi:"licenseType"`
	// Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// setup the protocol when ecmp*load*balancing is disable.
	Protocol RemoteNetworkProtocolPtrOutput `pulumi:"protocol"`
	// The Region param. String length must exceed 1 characters.
	Region pulumi.StringOutput `pulumi:"region"`
	// specify secondary ipsecTunnel if needed.
	SecondaryIpsecTunnel pulumi.StringPtrOutput `pulumi:"secondaryIpsecTunnel"`
	// spn-name is needed when licenseType is FWAAS-AGGREGATE.
	SpnName pulumi.StringPtrOutput `pulumi:"spnName"`
	// The Subnets param.
	Subnets pulumi.StringArrayOutput `pulumi:"subnets"`
	Tfid    pulumi.StringOutput      `pulumi:"tfid"`
}

// NewRemoteNetwork registers a new resource with the given unique name, arguments, and options.
func NewRemoteNetwork(ctx *pulumi.Context,
	name string, args *RemoteNetworkArgs, opts ...pulumi.ResourceOption) (*RemoteNetwork, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"encryptedValues",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RemoteNetwork
	err := ctx.RegisterResource("scm:index/remoteNetwork:RemoteNetwork", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRemoteNetwork gets an existing RemoteNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRemoteNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RemoteNetworkState, opts ...pulumi.ResourceOption) (*RemoteNetwork, error) {
	var resource RemoteNetwork
	err := ctx.ReadResource("scm:index/remoteNetwork:RemoteNetwork", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RemoteNetwork resources.
type remoteNetworkState struct {
	// The EcmpLoadBalancing param. String must be one of these: `"enable"`, `"disable"`. Default: `"disable"`.
	EcmpLoadBalancing *string `pulumi:"ecmpLoadBalancing"`
	// ecmp*tunnels is required when ecmp*load*balancing is enable.
	EcmpTunnels []RemoteNetworkEcmpTunnel `pulumi:"ecmpTunnels"`
	// (Internal use) Encrypted values returned from the API.
	EncryptedValues map[string]string `pulumi:"encryptedValues"`
	// The Folder param. String can either be a specific string(`"Remote Networks"`) or match this regex: `^[\s0-9a-zA-Z._-]{1,}$`. Default: `"Remote Networks"`.
	Folder *string `pulumi:"folder"`
	// ipsec*tunnel is required when ecmp*load_balancing is disable.
	IpsecTunnel *string `pulumi:"ipsecTunnel"`
	// New customer will only be on aggregate bandwidth licensing. String length must exceed 1 characters. Default: `"FWAAS-AGGREGATE"`.
	LicenseType *string `pulumi:"licenseType"`
	// Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
	Name *string `pulumi:"name"`
	// setup the protocol when ecmp*load*balancing is disable.
	Protocol *RemoteNetworkProtocol `pulumi:"protocol"`
	// The Region param. String length must exceed 1 characters.
	Region *string `pulumi:"region"`
	// specify secondary ipsecTunnel if needed.
	SecondaryIpsecTunnel *string `pulumi:"secondaryIpsecTunnel"`
	// spn-name is needed when licenseType is FWAAS-AGGREGATE.
	SpnName *string `pulumi:"spnName"`
	// The Subnets param.
	Subnets []string `pulumi:"subnets"`
	Tfid    *string  `pulumi:"tfid"`
}

type RemoteNetworkState struct {
	// The EcmpLoadBalancing param. String must be one of these: `"enable"`, `"disable"`. Default: `"disable"`.
	EcmpLoadBalancing pulumi.StringPtrInput
	// ecmp*tunnels is required when ecmp*load*balancing is enable.
	EcmpTunnels RemoteNetworkEcmpTunnelArrayInput
	// (Internal use) Encrypted values returned from the API.
	EncryptedValues pulumi.StringMapInput
	// The Folder param. String can either be a specific string(`"Remote Networks"`) or match this regex: `^[\s0-9a-zA-Z._-]{1,}$`. Default: `"Remote Networks"`.
	Folder pulumi.StringPtrInput
	// ipsec*tunnel is required when ecmp*load_balancing is disable.
	IpsecTunnel pulumi.StringPtrInput
	// New customer will only be on aggregate bandwidth licensing. String length must exceed 1 characters. Default: `"FWAAS-AGGREGATE"`.
	LicenseType pulumi.StringPtrInput
	// Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
	Name pulumi.StringPtrInput
	// setup the protocol when ecmp*load*balancing is disable.
	Protocol RemoteNetworkProtocolPtrInput
	// The Region param. String length must exceed 1 characters.
	Region pulumi.StringPtrInput
	// specify secondary ipsecTunnel if needed.
	SecondaryIpsecTunnel pulumi.StringPtrInput
	// spn-name is needed when licenseType is FWAAS-AGGREGATE.
	SpnName pulumi.StringPtrInput
	// The Subnets param.
	Subnets pulumi.StringArrayInput
	Tfid    pulumi.StringPtrInput
}

func (RemoteNetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*remoteNetworkState)(nil)).Elem()
}

type remoteNetworkArgs struct {
	// The EcmpLoadBalancing param. String must be one of these: `"enable"`, `"disable"`. Default: `"disable"`.
	EcmpLoadBalancing *string `pulumi:"ecmpLoadBalancing"`
	// ecmp*tunnels is required when ecmp*load*balancing is enable.
	EcmpTunnels []RemoteNetworkEcmpTunnel `pulumi:"ecmpTunnels"`
	// The Folder param. String can either be a specific string(`"Remote Networks"`) or match this regex: `^[\s0-9a-zA-Z._-]{1,}$`. Default: `"Remote Networks"`.
	Folder *string `pulumi:"folder"`
	// ipsec*tunnel is required when ecmp*load_balancing is disable.
	IpsecTunnel *string `pulumi:"ipsecTunnel"`
	// New customer will only be on aggregate bandwidth licensing. String length must exceed 1 characters. Default: `"FWAAS-AGGREGATE"`.
	LicenseType *string `pulumi:"licenseType"`
	// Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
	Name *string `pulumi:"name"`
	// setup the protocol when ecmp*load*balancing is disable.
	Protocol *RemoteNetworkProtocol `pulumi:"protocol"`
	// The Region param. String length must exceed 1 characters.
	Region string `pulumi:"region"`
	// specify secondary ipsecTunnel if needed.
	SecondaryIpsecTunnel *string `pulumi:"secondaryIpsecTunnel"`
	// spn-name is needed when licenseType is FWAAS-AGGREGATE.
	SpnName *string `pulumi:"spnName"`
	// The Subnets param.
	Subnets []string `pulumi:"subnets"`
}

// The set of arguments for constructing a RemoteNetwork resource.
type RemoteNetworkArgs struct {
	// The EcmpLoadBalancing param. String must be one of these: `"enable"`, `"disable"`. Default: `"disable"`.
	EcmpLoadBalancing pulumi.StringPtrInput
	// ecmp*tunnels is required when ecmp*load*balancing is enable.
	EcmpTunnels RemoteNetworkEcmpTunnelArrayInput
	// The Folder param. String can either be a specific string(`"Remote Networks"`) or match this regex: `^[\s0-9a-zA-Z._-]{1,}$`. Default: `"Remote Networks"`.
	Folder pulumi.StringPtrInput
	// ipsec*tunnel is required when ecmp*load_balancing is disable.
	IpsecTunnel pulumi.StringPtrInput
	// New customer will only be on aggregate bandwidth licensing. String length must exceed 1 characters. Default: `"FWAAS-AGGREGATE"`.
	LicenseType pulumi.StringPtrInput
	// Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
	Name pulumi.StringPtrInput
	// setup the protocol when ecmp*load*balancing is disable.
	Protocol RemoteNetworkProtocolPtrInput
	// The Region param. String length must exceed 1 characters.
	Region pulumi.StringInput
	// specify secondary ipsecTunnel if needed.
	SecondaryIpsecTunnel pulumi.StringPtrInput
	// spn-name is needed when licenseType is FWAAS-AGGREGATE.
	SpnName pulumi.StringPtrInput
	// The Subnets param.
	Subnets pulumi.StringArrayInput
}

func (RemoteNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*remoteNetworkArgs)(nil)).Elem()
}

type RemoteNetworkInput interface {
	pulumi.Input

	ToRemoteNetworkOutput() RemoteNetworkOutput
	ToRemoteNetworkOutputWithContext(ctx context.Context) RemoteNetworkOutput
}

func (*RemoteNetwork) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteNetwork)(nil)).Elem()
}

func (i *RemoteNetwork) ToRemoteNetworkOutput() RemoteNetworkOutput {
	return i.ToRemoteNetworkOutputWithContext(context.Background())
}

func (i *RemoteNetwork) ToRemoteNetworkOutputWithContext(ctx context.Context) RemoteNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteNetworkOutput)
}

// RemoteNetworkArrayInput is an input type that accepts RemoteNetworkArray and RemoteNetworkArrayOutput values.
// You can construct a concrete instance of `RemoteNetworkArrayInput` via:
//
//	RemoteNetworkArray{ RemoteNetworkArgs{...} }
type RemoteNetworkArrayInput interface {
	pulumi.Input

	ToRemoteNetworkArrayOutput() RemoteNetworkArrayOutput
	ToRemoteNetworkArrayOutputWithContext(context.Context) RemoteNetworkArrayOutput
}

type RemoteNetworkArray []RemoteNetworkInput

func (RemoteNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RemoteNetwork)(nil)).Elem()
}

func (i RemoteNetworkArray) ToRemoteNetworkArrayOutput() RemoteNetworkArrayOutput {
	return i.ToRemoteNetworkArrayOutputWithContext(context.Background())
}

func (i RemoteNetworkArray) ToRemoteNetworkArrayOutputWithContext(ctx context.Context) RemoteNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteNetworkArrayOutput)
}

// RemoteNetworkMapInput is an input type that accepts RemoteNetworkMap and RemoteNetworkMapOutput values.
// You can construct a concrete instance of `RemoteNetworkMapInput` via:
//
//	RemoteNetworkMap{ "key": RemoteNetworkArgs{...} }
type RemoteNetworkMapInput interface {
	pulumi.Input

	ToRemoteNetworkMapOutput() RemoteNetworkMapOutput
	ToRemoteNetworkMapOutputWithContext(context.Context) RemoteNetworkMapOutput
}

type RemoteNetworkMap map[string]RemoteNetworkInput

func (RemoteNetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RemoteNetwork)(nil)).Elem()
}

func (i RemoteNetworkMap) ToRemoteNetworkMapOutput() RemoteNetworkMapOutput {
	return i.ToRemoteNetworkMapOutputWithContext(context.Background())
}

func (i RemoteNetworkMap) ToRemoteNetworkMapOutputWithContext(ctx context.Context) RemoteNetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteNetworkMapOutput)
}

type RemoteNetworkOutput struct{ *pulumi.OutputState }

func (RemoteNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteNetwork)(nil)).Elem()
}

func (o RemoteNetworkOutput) ToRemoteNetworkOutput() RemoteNetworkOutput {
	return o
}

func (o RemoteNetworkOutput) ToRemoteNetworkOutputWithContext(ctx context.Context) RemoteNetworkOutput {
	return o
}

// The EcmpLoadBalancing param. String must be one of these: `"enable"`, `"disable"`. Default: `"disable"`.
func (o RemoteNetworkOutput) EcmpLoadBalancing() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteNetwork) pulumi.StringOutput { return v.EcmpLoadBalancing }).(pulumi.StringOutput)
}

// ecmp*tunnels is required when ecmp*load*balancing is enable.
func (o RemoteNetworkOutput) EcmpTunnels() RemoteNetworkEcmpTunnelArrayOutput {
	return o.ApplyT(func(v *RemoteNetwork) RemoteNetworkEcmpTunnelArrayOutput { return v.EcmpTunnels }).(RemoteNetworkEcmpTunnelArrayOutput)
}

// (Internal use) Encrypted values returned from the API.
func (o RemoteNetworkOutput) EncryptedValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RemoteNetwork) pulumi.StringMapOutput { return v.EncryptedValues }).(pulumi.StringMapOutput)
}

// The Folder param. String can either be a specific string(`"Remote Networks"`) or match this regex: `^[\s0-9a-zA-Z._-]{1,}$`. Default: `"Remote Networks"`.
func (o RemoteNetworkOutput) Folder() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteNetwork) pulumi.StringOutput { return v.Folder }).(pulumi.StringOutput)
}

// ipsec*tunnel is required when ecmp*load_balancing is disable.
func (o RemoteNetworkOutput) IpsecTunnel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteNetwork) pulumi.StringPtrOutput { return v.IpsecTunnel }).(pulumi.StringPtrOutput)
}

// New customer will only be on aggregate bandwidth licensing. String length must exceed 1 characters. Default: `"FWAAS-AGGREGATE"`.
func (o RemoteNetworkOutput) LicenseType() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteNetwork) pulumi.StringOutput { return v.LicenseType }).(pulumi.StringOutput)
}

// Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
func (o RemoteNetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteNetwork) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// setup the protocol when ecmp*load*balancing is disable.
func (o RemoteNetworkOutput) Protocol() RemoteNetworkProtocolPtrOutput {
	return o.ApplyT(func(v *RemoteNetwork) RemoteNetworkProtocolPtrOutput { return v.Protocol }).(RemoteNetworkProtocolPtrOutput)
}

// The Region param. String length must exceed 1 characters.
func (o RemoteNetworkOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteNetwork) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// specify secondary ipsecTunnel if needed.
func (o RemoteNetworkOutput) SecondaryIpsecTunnel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteNetwork) pulumi.StringPtrOutput { return v.SecondaryIpsecTunnel }).(pulumi.StringPtrOutput)
}

// spn-name is needed when licenseType is FWAAS-AGGREGATE.
func (o RemoteNetworkOutput) SpnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteNetwork) pulumi.StringPtrOutput { return v.SpnName }).(pulumi.StringPtrOutput)
}

// The Subnets param.
func (o RemoteNetworkOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RemoteNetwork) pulumi.StringArrayOutput { return v.Subnets }).(pulumi.StringArrayOutput)
}

func (o RemoteNetworkOutput) Tfid() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteNetwork) pulumi.StringOutput { return v.Tfid }).(pulumi.StringOutput)
}

type RemoteNetworkArrayOutput struct{ *pulumi.OutputState }

func (RemoteNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RemoteNetwork)(nil)).Elem()
}

func (o RemoteNetworkArrayOutput) ToRemoteNetworkArrayOutput() RemoteNetworkArrayOutput {
	return o
}

func (o RemoteNetworkArrayOutput) ToRemoteNetworkArrayOutputWithContext(ctx context.Context) RemoteNetworkArrayOutput {
	return o
}

func (o RemoteNetworkArrayOutput) Index(i pulumi.IntInput) RemoteNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RemoteNetwork {
		return vs[0].([]*RemoteNetwork)[vs[1].(int)]
	}).(RemoteNetworkOutput)
}

type RemoteNetworkMapOutput struct{ *pulumi.OutputState }

func (RemoteNetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RemoteNetwork)(nil)).Elem()
}

func (o RemoteNetworkMapOutput) ToRemoteNetworkMapOutput() RemoteNetworkMapOutput {
	return o
}

func (o RemoteNetworkMapOutput) ToRemoteNetworkMapOutputWithContext(ctx context.Context) RemoteNetworkMapOutput {
	return o
}

func (o RemoteNetworkMapOutput) MapIndex(k pulumi.StringInput) RemoteNetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RemoteNetwork {
		return vs[0].(map[string]*RemoteNetwork)[vs[1].(string)]
	}).(RemoteNetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteNetworkInput)(nil)).Elem(), &RemoteNetwork{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteNetworkArrayInput)(nil)).Elem(), RemoteNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteNetworkMapInput)(nil)).Elem(), RemoteNetworkMap{})
	pulumi.RegisterOutputType(RemoteNetworkOutput{})
	pulumi.RegisterOutputType(RemoteNetworkArrayOutput{})
	pulumi.RegisterOutputType(RemoteNetworkMapOutput{})
}
