// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-scm/sdk/go/scm/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves a config item.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-scm/sdk/go/scm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := scm.NewDnsSecurityProfile(ctx, "example", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DnsSecurityProfile struct {
	pulumi.CustomResourceState

	// The BotnetDomains param.
	BotnetDomains DnsSecurityProfileBotnetDomainsPtrOutput `pulumi:"botnetDomains"`
	// The Description param.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The Device param.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// The Folder param.
	Folder pulumi.StringPtrOutput `pulumi:"folder"`
	// The Name param.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Snippet param.
	Snippet pulumi.StringPtrOutput `pulumi:"snippet"`
	Tfid    pulumi.StringOutput    `pulumi:"tfid"`
}

// NewDnsSecurityProfile registers a new resource with the given unique name, arguments, and options.
func NewDnsSecurityProfile(ctx *pulumi.Context,
	name string, args *DnsSecurityProfileArgs, opts ...pulumi.ResourceOption) (*DnsSecurityProfile, error) {
	if args == nil {
		args = &DnsSecurityProfileArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DnsSecurityProfile
	err := ctx.RegisterResource("scm:index/dnsSecurityProfile:DnsSecurityProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsSecurityProfile gets an existing DnsSecurityProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsSecurityProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsSecurityProfileState, opts ...pulumi.ResourceOption) (*DnsSecurityProfile, error) {
	var resource DnsSecurityProfile
	err := ctx.ReadResource("scm:index/dnsSecurityProfile:DnsSecurityProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsSecurityProfile resources.
type dnsSecurityProfileState struct {
	// The BotnetDomains param.
	BotnetDomains *DnsSecurityProfileBotnetDomains `pulumi:"botnetDomains"`
	// The Description param.
	Description *string `pulumi:"description"`
	// The Device param.
	Device *string `pulumi:"device"`
	// The Folder param.
	Folder *string `pulumi:"folder"`
	// The Name param.
	Name *string `pulumi:"name"`
	// The Snippet param.
	Snippet *string `pulumi:"snippet"`
	Tfid    *string `pulumi:"tfid"`
}

type DnsSecurityProfileState struct {
	// The BotnetDomains param.
	BotnetDomains DnsSecurityProfileBotnetDomainsPtrInput
	// The Description param.
	Description pulumi.StringPtrInput
	// The Device param.
	Device pulumi.StringPtrInput
	// The Folder param.
	Folder pulumi.StringPtrInput
	// The Name param.
	Name pulumi.StringPtrInput
	// The Snippet param.
	Snippet pulumi.StringPtrInput
	Tfid    pulumi.StringPtrInput
}

func (DnsSecurityProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsSecurityProfileState)(nil)).Elem()
}

type dnsSecurityProfileArgs struct {
	// The BotnetDomains param.
	BotnetDomains *DnsSecurityProfileBotnetDomains `pulumi:"botnetDomains"`
	// The Description param.
	Description *string `pulumi:"description"`
	// The Device param.
	Device *string `pulumi:"device"`
	// The Folder param.
	Folder *string `pulumi:"folder"`
	// The Name param.
	Name *string `pulumi:"name"`
	// The Snippet param.
	Snippet *string `pulumi:"snippet"`
}

// The set of arguments for constructing a DnsSecurityProfile resource.
type DnsSecurityProfileArgs struct {
	// The BotnetDomains param.
	BotnetDomains DnsSecurityProfileBotnetDomainsPtrInput
	// The Description param.
	Description pulumi.StringPtrInput
	// The Device param.
	Device pulumi.StringPtrInput
	// The Folder param.
	Folder pulumi.StringPtrInput
	// The Name param.
	Name pulumi.StringPtrInput
	// The Snippet param.
	Snippet pulumi.StringPtrInput
}

func (DnsSecurityProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsSecurityProfileArgs)(nil)).Elem()
}

type DnsSecurityProfileInput interface {
	pulumi.Input

	ToDnsSecurityProfileOutput() DnsSecurityProfileOutput
	ToDnsSecurityProfileOutputWithContext(ctx context.Context) DnsSecurityProfileOutput
}

func (*DnsSecurityProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsSecurityProfile)(nil)).Elem()
}

func (i *DnsSecurityProfile) ToDnsSecurityProfileOutput() DnsSecurityProfileOutput {
	return i.ToDnsSecurityProfileOutputWithContext(context.Background())
}

func (i *DnsSecurityProfile) ToDnsSecurityProfileOutputWithContext(ctx context.Context) DnsSecurityProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsSecurityProfileOutput)
}

// DnsSecurityProfileArrayInput is an input type that accepts DnsSecurityProfileArray and DnsSecurityProfileArrayOutput values.
// You can construct a concrete instance of `DnsSecurityProfileArrayInput` via:
//
//	DnsSecurityProfileArray{ DnsSecurityProfileArgs{...} }
type DnsSecurityProfileArrayInput interface {
	pulumi.Input

	ToDnsSecurityProfileArrayOutput() DnsSecurityProfileArrayOutput
	ToDnsSecurityProfileArrayOutputWithContext(context.Context) DnsSecurityProfileArrayOutput
}

type DnsSecurityProfileArray []DnsSecurityProfileInput

func (DnsSecurityProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsSecurityProfile)(nil)).Elem()
}

func (i DnsSecurityProfileArray) ToDnsSecurityProfileArrayOutput() DnsSecurityProfileArrayOutput {
	return i.ToDnsSecurityProfileArrayOutputWithContext(context.Background())
}

func (i DnsSecurityProfileArray) ToDnsSecurityProfileArrayOutputWithContext(ctx context.Context) DnsSecurityProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsSecurityProfileArrayOutput)
}

// DnsSecurityProfileMapInput is an input type that accepts DnsSecurityProfileMap and DnsSecurityProfileMapOutput values.
// You can construct a concrete instance of `DnsSecurityProfileMapInput` via:
//
//	DnsSecurityProfileMap{ "key": DnsSecurityProfileArgs{...} }
type DnsSecurityProfileMapInput interface {
	pulumi.Input

	ToDnsSecurityProfileMapOutput() DnsSecurityProfileMapOutput
	ToDnsSecurityProfileMapOutputWithContext(context.Context) DnsSecurityProfileMapOutput
}

type DnsSecurityProfileMap map[string]DnsSecurityProfileInput

func (DnsSecurityProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsSecurityProfile)(nil)).Elem()
}

func (i DnsSecurityProfileMap) ToDnsSecurityProfileMapOutput() DnsSecurityProfileMapOutput {
	return i.ToDnsSecurityProfileMapOutputWithContext(context.Background())
}

func (i DnsSecurityProfileMap) ToDnsSecurityProfileMapOutputWithContext(ctx context.Context) DnsSecurityProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsSecurityProfileMapOutput)
}

type DnsSecurityProfileOutput struct{ *pulumi.OutputState }

func (DnsSecurityProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsSecurityProfile)(nil)).Elem()
}

func (o DnsSecurityProfileOutput) ToDnsSecurityProfileOutput() DnsSecurityProfileOutput {
	return o
}

func (o DnsSecurityProfileOutput) ToDnsSecurityProfileOutputWithContext(ctx context.Context) DnsSecurityProfileOutput {
	return o
}

// The BotnetDomains param.
func (o DnsSecurityProfileOutput) BotnetDomains() DnsSecurityProfileBotnetDomainsPtrOutput {
	return o.ApplyT(func(v *DnsSecurityProfile) DnsSecurityProfileBotnetDomainsPtrOutput { return v.BotnetDomains }).(DnsSecurityProfileBotnetDomainsPtrOutput)
}

// The Description param.
func (o DnsSecurityProfileOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsSecurityProfile) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The Device param.
func (o DnsSecurityProfileOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsSecurityProfile) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// The Folder param.
func (o DnsSecurityProfileOutput) Folder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsSecurityProfile) pulumi.StringPtrOutput { return v.Folder }).(pulumi.StringPtrOutput)
}

// The Name param.
func (o DnsSecurityProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsSecurityProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Snippet param.
func (o DnsSecurityProfileOutput) Snippet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsSecurityProfile) pulumi.StringPtrOutput { return v.Snippet }).(pulumi.StringPtrOutput)
}

func (o DnsSecurityProfileOutput) Tfid() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsSecurityProfile) pulumi.StringOutput { return v.Tfid }).(pulumi.StringOutput)
}

type DnsSecurityProfileArrayOutput struct{ *pulumi.OutputState }

func (DnsSecurityProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsSecurityProfile)(nil)).Elem()
}

func (o DnsSecurityProfileArrayOutput) ToDnsSecurityProfileArrayOutput() DnsSecurityProfileArrayOutput {
	return o
}

func (o DnsSecurityProfileArrayOutput) ToDnsSecurityProfileArrayOutputWithContext(ctx context.Context) DnsSecurityProfileArrayOutput {
	return o
}

func (o DnsSecurityProfileArrayOutput) Index(i pulumi.IntInput) DnsSecurityProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DnsSecurityProfile {
		return vs[0].([]*DnsSecurityProfile)[vs[1].(int)]
	}).(DnsSecurityProfileOutput)
}

type DnsSecurityProfileMapOutput struct{ *pulumi.OutputState }

func (DnsSecurityProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsSecurityProfile)(nil)).Elem()
}

func (o DnsSecurityProfileMapOutput) ToDnsSecurityProfileMapOutput() DnsSecurityProfileMapOutput {
	return o
}

func (o DnsSecurityProfileMapOutput) ToDnsSecurityProfileMapOutputWithContext(ctx context.Context) DnsSecurityProfileMapOutput {
	return o
}

func (o DnsSecurityProfileMapOutput) MapIndex(k pulumi.StringInput) DnsSecurityProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DnsSecurityProfile {
		return vs[0].(map[string]*DnsSecurityProfile)[vs[1].(string)]
	}).(DnsSecurityProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsSecurityProfileInput)(nil)).Elem(), &DnsSecurityProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsSecurityProfileArrayInput)(nil)).Elem(), DnsSecurityProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsSecurityProfileMapInput)(nil)).Elem(), DnsSecurityProfileMap{})
	pulumi.RegisterOutputType(DnsSecurityProfileOutput{})
	pulumi.RegisterOutputType(DnsSecurityProfileArrayOutput{})
	pulumi.RegisterOutputType(DnsSecurityProfileMapOutput{})
}
