// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AddressGroupArgs, AddressGroupState } from "./addressGroup";
export type AddressGroup = import("./addressGroup").AddressGroup;
export const AddressGroup: typeof import("./addressGroup").AddressGroup = null as any;
utilities.lazyLoad(exports, ["AddressGroup"], () => require("./addressGroup"));

export { AddressObjectArgs, AddressObjectState } from "./addressObject";
export type AddressObject = import("./addressObject").AddressObject;
export const AddressObject: typeof import("./addressObject").AddressObject = null as any;
utilities.lazyLoad(exports, ["AddressObject"], () => require("./addressObject"));

export { AntiSpywareProfileArgs, AntiSpywareProfileState } from "./antiSpywareProfile";
export type AntiSpywareProfile = import("./antiSpywareProfile").AntiSpywareProfile;
export const AntiSpywareProfile: typeof import("./antiSpywareProfile").AntiSpywareProfile = null as any;
utilities.lazyLoad(exports, ["AntiSpywareProfile"], () => require("./antiSpywareProfile"));

export { AntiSpywareSignatureArgs, AntiSpywareSignatureState } from "./antiSpywareSignature";
export type AntiSpywareSignature = import("./antiSpywareSignature").AntiSpywareSignature;
export const AntiSpywareSignature: typeof import("./antiSpywareSignature").AntiSpywareSignature = null as any;
utilities.lazyLoad(exports, ["AntiSpywareSignature"], () => require("./antiSpywareSignature"));

export { AppOverrideRuleArgs, AppOverrideRuleState } from "./appOverrideRule";
export type AppOverrideRule = import("./appOverrideRule").AppOverrideRule;
export const AppOverrideRule: typeof import("./appOverrideRule").AppOverrideRule = null as any;
utilities.lazyLoad(exports, ["AppOverrideRule"], () => require("./appOverrideRule"));

export { ApplicationArgs, ApplicationState } from "./application";
export type Application = import("./application").Application;
export const Application: typeof import("./application").Application = null as any;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));

export { ApplicationFilterArgs, ApplicationFilterState } from "./applicationFilter";
export type ApplicationFilter = import("./applicationFilter").ApplicationFilter;
export const ApplicationFilter: typeof import("./applicationFilter").ApplicationFilter = null as any;
utilities.lazyLoad(exports, ["ApplicationFilter"], () => require("./applicationFilter"));

export { ApplicationGroupArgs, ApplicationGroupState } from "./applicationGroup";
export type ApplicationGroup = import("./applicationGroup").ApplicationGroup;
export const ApplicationGroup: typeof import("./applicationGroup").ApplicationGroup = null as any;
utilities.lazyLoad(exports, ["ApplicationGroup"], () => require("./applicationGroup"));

export { AuthenticationPortalArgs, AuthenticationPortalState } from "./authenticationPortal";
export type AuthenticationPortal = import("./authenticationPortal").AuthenticationPortal;
export const AuthenticationPortal: typeof import("./authenticationPortal").AuthenticationPortal = null as any;
utilities.lazyLoad(exports, ["AuthenticationPortal"], () => require("./authenticationPortal"));

export { AuthenticationProfileArgs, AuthenticationProfileState } from "./authenticationProfile";
export type AuthenticationProfile = import("./authenticationProfile").AuthenticationProfile;
export const AuthenticationProfile: typeof import("./authenticationProfile").AuthenticationProfile = null as any;
utilities.lazyLoad(exports, ["AuthenticationProfile"], () => require("./authenticationProfile"));

export { AuthenticationRuleArgs, AuthenticationRuleState } from "./authenticationRule";
export type AuthenticationRule = import("./authenticationRule").AuthenticationRule;
export const AuthenticationRule: typeof import("./authenticationRule").AuthenticationRule = null as any;
utilities.lazyLoad(exports, ["AuthenticationRule"], () => require("./authenticationRule"));

export { AuthenticationSequenceArgs, AuthenticationSequenceState } from "./authenticationSequence";
export type AuthenticationSequence = import("./authenticationSequence").AuthenticationSequence;
export const AuthenticationSequence: typeof import("./authenticationSequence").AuthenticationSequence = null as any;
utilities.lazyLoad(exports, ["AuthenticationSequence"], () => require("./authenticationSequence"));

export { CertificateProfileArgs, CertificateProfileState } from "./certificateProfile";
export type CertificateProfile = import("./certificateProfile").CertificateProfile;
export const CertificateProfile: typeof import("./certificateProfile").CertificateProfile = null as any;
utilities.lazyLoad(exports, ["CertificateProfile"], () => require("./certificateProfile"));

export { DecryptionExclusionArgs, DecryptionExclusionState } from "./decryptionExclusion";
export type DecryptionExclusion = import("./decryptionExclusion").DecryptionExclusion;
export const DecryptionExclusion: typeof import("./decryptionExclusion").DecryptionExclusion = null as any;
utilities.lazyLoad(exports, ["DecryptionExclusion"], () => require("./decryptionExclusion"));

export { DecryptionProfileArgs, DecryptionProfileState } from "./decryptionProfile";
export type DecryptionProfile = import("./decryptionProfile").DecryptionProfile;
export const DecryptionProfile: typeof import("./decryptionProfile").DecryptionProfile = null as any;
utilities.lazyLoad(exports, ["DecryptionProfile"], () => require("./decryptionProfile"));

export { DecryptionRuleArgs, DecryptionRuleState } from "./decryptionRule";
export type DecryptionRule = import("./decryptionRule").DecryptionRule;
export const DecryptionRule: typeof import("./decryptionRule").DecryptionRule = null as any;
utilities.lazyLoad(exports, ["DecryptionRule"], () => require("./decryptionRule"));

export { DnsSecurityProfileArgs, DnsSecurityProfileState } from "./dnsSecurityProfile";
export type DnsSecurityProfile = import("./dnsSecurityProfile").DnsSecurityProfile;
export const DnsSecurityProfile: typeof import("./dnsSecurityProfile").DnsSecurityProfile = null as any;
utilities.lazyLoad(exports, ["DnsSecurityProfile"], () => require("./dnsSecurityProfile"));

export { DynamicUserGroupArgs, DynamicUserGroupState } from "./dynamicUserGroup";
export type DynamicUserGroup = import("./dynamicUserGroup").DynamicUserGroup;
export const DynamicUserGroup: typeof import("./dynamicUserGroup").DynamicUserGroup = null as any;
utilities.lazyLoad(exports, ["DynamicUserGroup"], () => require("./dynamicUserGroup"));

export { ExternalDynamicListArgs, ExternalDynamicListState } from "./externalDynamicList";
export type ExternalDynamicList = import("./externalDynamicList").ExternalDynamicList;
export const ExternalDynamicList: typeof import("./externalDynamicList").ExternalDynamicList = null as any;
utilities.lazyLoad(exports, ["ExternalDynamicList"], () => require("./externalDynamicList"));

export { FileBlockingProfileArgs, FileBlockingProfileState } from "./fileBlockingProfile";
export type FileBlockingProfile = import("./fileBlockingProfile").FileBlockingProfile;
export const FileBlockingProfile: typeof import("./fileBlockingProfile").FileBlockingProfile = null as any;
utilities.lazyLoad(exports, ["FileBlockingProfile"], () => require("./fileBlockingProfile"));

export { GetAddressGroupArgs, GetAddressGroupResult, GetAddressGroupOutputArgs } from "./getAddressGroup";
export const getAddressGroup: typeof import("./getAddressGroup").getAddressGroup = null as any;
export const getAddressGroupOutput: typeof import("./getAddressGroup").getAddressGroupOutput = null as any;
utilities.lazyLoad(exports, ["getAddressGroup","getAddressGroupOutput"], () => require("./getAddressGroup"));

export { GetAddressGroupListArgs, GetAddressGroupListResult, GetAddressGroupListOutputArgs } from "./getAddressGroupList";
export const getAddressGroupList: typeof import("./getAddressGroupList").getAddressGroupList = null as any;
export const getAddressGroupListOutput: typeof import("./getAddressGroupList").getAddressGroupListOutput = null as any;
utilities.lazyLoad(exports, ["getAddressGroupList","getAddressGroupListOutput"], () => require("./getAddressGroupList"));

export { GetAddressObjectArgs, GetAddressObjectResult, GetAddressObjectOutputArgs } from "./getAddressObject";
export const getAddressObject: typeof import("./getAddressObject").getAddressObject = null as any;
export const getAddressObjectOutput: typeof import("./getAddressObject").getAddressObjectOutput = null as any;
utilities.lazyLoad(exports, ["getAddressObject","getAddressObjectOutput"], () => require("./getAddressObject"));

export { GetAddressObjectListArgs, GetAddressObjectListResult, GetAddressObjectListOutputArgs } from "./getAddressObjectList";
export const getAddressObjectList: typeof import("./getAddressObjectList").getAddressObjectList = null as any;
export const getAddressObjectListOutput: typeof import("./getAddressObjectList").getAddressObjectListOutput = null as any;
utilities.lazyLoad(exports, ["getAddressObjectList","getAddressObjectListOutput"], () => require("./getAddressObjectList"));

export { GetAntiSpywareProfileArgs, GetAntiSpywareProfileResult, GetAntiSpywareProfileOutputArgs } from "./getAntiSpywareProfile";
export const getAntiSpywareProfile: typeof import("./getAntiSpywareProfile").getAntiSpywareProfile = null as any;
export const getAntiSpywareProfileOutput: typeof import("./getAntiSpywareProfile").getAntiSpywareProfileOutput = null as any;
utilities.lazyLoad(exports, ["getAntiSpywareProfile","getAntiSpywareProfileOutput"], () => require("./getAntiSpywareProfile"));

export { GetAntiSpywareProfileListArgs, GetAntiSpywareProfileListResult, GetAntiSpywareProfileListOutputArgs } from "./getAntiSpywareProfileList";
export const getAntiSpywareProfileList: typeof import("./getAntiSpywareProfileList").getAntiSpywareProfileList = null as any;
export const getAntiSpywareProfileListOutput: typeof import("./getAntiSpywareProfileList").getAntiSpywareProfileListOutput = null as any;
utilities.lazyLoad(exports, ["getAntiSpywareProfileList","getAntiSpywareProfileListOutput"], () => require("./getAntiSpywareProfileList"));

export { GetAntiSpywareSignatureArgs, GetAntiSpywareSignatureResult, GetAntiSpywareSignatureOutputArgs } from "./getAntiSpywareSignature";
export const getAntiSpywareSignature: typeof import("./getAntiSpywareSignature").getAntiSpywareSignature = null as any;
export const getAntiSpywareSignatureOutput: typeof import("./getAntiSpywareSignature").getAntiSpywareSignatureOutput = null as any;
utilities.lazyLoad(exports, ["getAntiSpywareSignature","getAntiSpywareSignatureOutput"], () => require("./getAntiSpywareSignature"));

export { GetAntiSpywareSignatureListArgs, GetAntiSpywareSignatureListResult, GetAntiSpywareSignatureListOutputArgs } from "./getAntiSpywareSignatureList";
export const getAntiSpywareSignatureList: typeof import("./getAntiSpywareSignatureList").getAntiSpywareSignatureList = null as any;
export const getAntiSpywareSignatureListOutput: typeof import("./getAntiSpywareSignatureList").getAntiSpywareSignatureListOutput = null as any;
utilities.lazyLoad(exports, ["getAntiSpywareSignatureList","getAntiSpywareSignatureListOutput"], () => require("./getAntiSpywareSignatureList"));

export { GetAppOverrideRuleArgs, GetAppOverrideRuleResult, GetAppOverrideRuleOutputArgs } from "./getAppOverrideRule";
export const getAppOverrideRule: typeof import("./getAppOverrideRule").getAppOverrideRule = null as any;
export const getAppOverrideRuleOutput: typeof import("./getAppOverrideRule").getAppOverrideRuleOutput = null as any;
utilities.lazyLoad(exports, ["getAppOverrideRule","getAppOverrideRuleOutput"], () => require("./getAppOverrideRule"));

export { GetAppOverrideRuleListArgs, GetAppOverrideRuleListResult, GetAppOverrideRuleListOutputArgs } from "./getAppOverrideRuleList";
export const getAppOverrideRuleList: typeof import("./getAppOverrideRuleList").getAppOverrideRuleList = null as any;
export const getAppOverrideRuleListOutput: typeof import("./getAppOverrideRuleList").getAppOverrideRuleListOutput = null as any;
utilities.lazyLoad(exports, ["getAppOverrideRuleList","getAppOverrideRuleListOutput"], () => require("./getAppOverrideRuleList"));

export { GetApplicationArgs, GetApplicationResult, GetApplicationOutputArgs } from "./getApplication";
export const getApplication: typeof import("./getApplication").getApplication = null as any;
export const getApplicationOutput: typeof import("./getApplication").getApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getApplication","getApplicationOutput"], () => require("./getApplication"));

export { GetApplicationFilterArgs, GetApplicationFilterResult, GetApplicationFilterOutputArgs } from "./getApplicationFilter";
export const getApplicationFilter: typeof import("./getApplicationFilter").getApplicationFilter = null as any;
export const getApplicationFilterOutput: typeof import("./getApplicationFilter").getApplicationFilterOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationFilter","getApplicationFilterOutput"], () => require("./getApplicationFilter"));

export { GetApplicationFilterListArgs, GetApplicationFilterListResult, GetApplicationFilterListOutputArgs } from "./getApplicationFilterList";
export const getApplicationFilterList: typeof import("./getApplicationFilterList").getApplicationFilterList = null as any;
export const getApplicationFilterListOutput: typeof import("./getApplicationFilterList").getApplicationFilterListOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationFilterList","getApplicationFilterListOutput"], () => require("./getApplicationFilterList"));

export { GetApplicationGroupArgs, GetApplicationGroupResult, GetApplicationGroupOutputArgs } from "./getApplicationGroup";
export const getApplicationGroup: typeof import("./getApplicationGroup").getApplicationGroup = null as any;
export const getApplicationGroupOutput: typeof import("./getApplicationGroup").getApplicationGroupOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationGroup","getApplicationGroupOutput"], () => require("./getApplicationGroup"));

export { GetApplicationGroupListArgs, GetApplicationGroupListResult, GetApplicationGroupListOutputArgs } from "./getApplicationGroupList";
export const getApplicationGroupList: typeof import("./getApplicationGroupList").getApplicationGroupList = null as any;
export const getApplicationGroupListOutput: typeof import("./getApplicationGroupList").getApplicationGroupListOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationGroupList","getApplicationGroupListOutput"], () => require("./getApplicationGroupList"));

export { GetApplicationListArgs, GetApplicationListResult, GetApplicationListOutputArgs } from "./getApplicationList";
export const getApplicationList: typeof import("./getApplicationList").getApplicationList = null as any;
export const getApplicationListOutput: typeof import("./getApplicationList").getApplicationListOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationList","getApplicationListOutput"], () => require("./getApplicationList"));

export { GetAuthenticationPortalArgs, GetAuthenticationPortalResult, GetAuthenticationPortalOutputArgs } from "./getAuthenticationPortal";
export const getAuthenticationPortal: typeof import("./getAuthenticationPortal").getAuthenticationPortal = null as any;
export const getAuthenticationPortalOutput: typeof import("./getAuthenticationPortal").getAuthenticationPortalOutput = null as any;
utilities.lazyLoad(exports, ["getAuthenticationPortal","getAuthenticationPortalOutput"], () => require("./getAuthenticationPortal"));

export { GetAuthenticationPortalListArgs, GetAuthenticationPortalListResult, GetAuthenticationPortalListOutputArgs } from "./getAuthenticationPortalList";
export const getAuthenticationPortalList: typeof import("./getAuthenticationPortalList").getAuthenticationPortalList = null as any;
export const getAuthenticationPortalListOutput: typeof import("./getAuthenticationPortalList").getAuthenticationPortalListOutput = null as any;
utilities.lazyLoad(exports, ["getAuthenticationPortalList","getAuthenticationPortalListOutput"], () => require("./getAuthenticationPortalList"));

export { GetAuthenticationProfileArgs, GetAuthenticationProfileResult, GetAuthenticationProfileOutputArgs } from "./getAuthenticationProfile";
export const getAuthenticationProfile: typeof import("./getAuthenticationProfile").getAuthenticationProfile = null as any;
export const getAuthenticationProfileOutput: typeof import("./getAuthenticationProfile").getAuthenticationProfileOutput = null as any;
utilities.lazyLoad(exports, ["getAuthenticationProfile","getAuthenticationProfileOutput"], () => require("./getAuthenticationProfile"));

export { GetAuthenticationProfileListArgs, GetAuthenticationProfileListResult, GetAuthenticationProfileListOutputArgs } from "./getAuthenticationProfileList";
export const getAuthenticationProfileList: typeof import("./getAuthenticationProfileList").getAuthenticationProfileList = null as any;
export const getAuthenticationProfileListOutput: typeof import("./getAuthenticationProfileList").getAuthenticationProfileListOutput = null as any;
utilities.lazyLoad(exports, ["getAuthenticationProfileList","getAuthenticationProfileListOutput"], () => require("./getAuthenticationProfileList"));

export { GetAuthenticationRuleArgs, GetAuthenticationRuleResult, GetAuthenticationRuleOutputArgs } from "./getAuthenticationRule";
export const getAuthenticationRule: typeof import("./getAuthenticationRule").getAuthenticationRule = null as any;
export const getAuthenticationRuleOutput: typeof import("./getAuthenticationRule").getAuthenticationRuleOutput = null as any;
utilities.lazyLoad(exports, ["getAuthenticationRule","getAuthenticationRuleOutput"], () => require("./getAuthenticationRule"));

export { GetAuthenticationRuleListArgs, GetAuthenticationRuleListResult, GetAuthenticationRuleListOutputArgs } from "./getAuthenticationRuleList";
export const getAuthenticationRuleList: typeof import("./getAuthenticationRuleList").getAuthenticationRuleList = null as any;
export const getAuthenticationRuleListOutput: typeof import("./getAuthenticationRuleList").getAuthenticationRuleListOutput = null as any;
utilities.lazyLoad(exports, ["getAuthenticationRuleList","getAuthenticationRuleListOutput"], () => require("./getAuthenticationRuleList"));

export { GetAuthenticationSequenceArgs, GetAuthenticationSequenceResult, GetAuthenticationSequenceOutputArgs } from "./getAuthenticationSequence";
export const getAuthenticationSequence: typeof import("./getAuthenticationSequence").getAuthenticationSequence = null as any;
export const getAuthenticationSequenceOutput: typeof import("./getAuthenticationSequence").getAuthenticationSequenceOutput = null as any;
utilities.lazyLoad(exports, ["getAuthenticationSequence","getAuthenticationSequenceOutput"], () => require("./getAuthenticationSequence"));

export { GetAuthenticationSequenceListArgs, GetAuthenticationSequenceListResult, GetAuthenticationSequenceListOutputArgs } from "./getAuthenticationSequenceList";
export const getAuthenticationSequenceList: typeof import("./getAuthenticationSequenceList").getAuthenticationSequenceList = null as any;
export const getAuthenticationSequenceListOutput: typeof import("./getAuthenticationSequenceList").getAuthenticationSequenceListOutput = null as any;
utilities.lazyLoad(exports, ["getAuthenticationSequenceList","getAuthenticationSequenceListOutput"], () => require("./getAuthenticationSequenceList"));

export { GetAutoTagActionsListArgs, GetAutoTagActionsListResult, GetAutoTagActionsListOutputArgs } from "./getAutoTagActionsList";
export const getAutoTagActionsList: typeof import("./getAutoTagActionsList").getAutoTagActionsList = null as any;
export const getAutoTagActionsListOutput: typeof import("./getAutoTagActionsList").getAutoTagActionsListOutput = null as any;
utilities.lazyLoad(exports, ["getAutoTagActionsList","getAutoTagActionsListOutput"], () => require("./getAutoTagActionsList"));

export { GetCertificateProfileArgs, GetCertificateProfileResult, GetCertificateProfileOutputArgs } from "./getCertificateProfile";
export const getCertificateProfile: typeof import("./getCertificateProfile").getCertificateProfile = null as any;
export const getCertificateProfileOutput: typeof import("./getCertificateProfile").getCertificateProfileOutput = null as any;
utilities.lazyLoad(exports, ["getCertificateProfile","getCertificateProfileOutput"], () => require("./getCertificateProfile"));

export { GetCertificateProfileListArgs, GetCertificateProfileListResult, GetCertificateProfileListOutputArgs } from "./getCertificateProfileList";
export const getCertificateProfileList: typeof import("./getCertificateProfileList").getCertificateProfileList = null as any;
export const getCertificateProfileListOutput: typeof import("./getCertificateProfileList").getCertificateProfileListOutput = null as any;
utilities.lazyLoad(exports, ["getCertificateProfileList","getCertificateProfileListOutput"], () => require("./getCertificateProfileList"));

export { GetDecryptionExclusionArgs, GetDecryptionExclusionResult, GetDecryptionExclusionOutputArgs } from "./getDecryptionExclusion";
export const getDecryptionExclusion: typeof import("./getDecryptionExclusion").getDecryptionExclusion = null as any;
export const getDecryptionExclusionOutput: typeof import("./getDecryptionExclusion").getDecryptionExclusionOutput = null as any;
utilities.lazyLoad(exports, ["getDecryptionExclusion","getDecryptionExclusionOutput"], () => require("./getDecryptionExclusion"));

export { GetDecryptionProfileArgs, GetDecryptionProfileResult, GetDecryptionProfileOutputArgs } from "./getDecryptionProfile";
export const getDecryptionProfile: typeof import("./getDecryptionProfile").getDecryptionProfile = null as any;
export const getDecryptionProfileOutput: typeof import("./getDecryptionProfile").getDecryptionProfileOutput = null as any;
utilities.lazyLoad(exports, ["getDecryptionProfile","getDecryptionProfileOutput"], () => require("./getDecryptionProfile"));

export { GetDecryptionProfileListArgs, GetDecryptionProfileListResult, GetDecryptionProfileListOutputArgs } from "./getDecryptionProfileList";
export const getDecryptionProfileList: typeof import("./getDecryptionProfileList").getDecryptionProfileList = null as any;
export const getDecryptionProfileListOutput: typeof import("./getDecryptionProfileList").getDecryptionProfileListOutput = null as any;
utilities.lazyLoad(exports, ["getDecryptionProfileList","getDecryptionProfileListOutput"], () => require("./getDecryptionProfileList"));

export { GetDecryptionRuleArgs, GetDecryptionRuleResult, GetDecryptionRuleOutputArgs } from "./getDecryptionRule";
export const getDecryptionRule: typeof import("./getDecryptionRule").getDecryptionRule = null as any;
export const getDecryptionRuleOutput: typeof import("./getDecryptionRule").getDecryptionRuleOutput = null as any;
utilities.lazyLoad(exports, ["getDecryptionRule","getDecryptionRuleOutput"], () => require("./getDecryptionRule"));

export { GetDecryptionRuleListArgs, GetDecryptionRuleListResult, GetDecryptionRuleListOutputArgs } from "./getDecryptionRuleList";
export const getDecryptionRuleList: typeof import("./getDecryptionRuleList").getDecryptionRuleList = null as any;
export const getDecryptionRuleListOutput: typeof import("./getDecryptionRuleList").getDecryptionRuleListOutput = null as any;
utilities.lazyLoad(exports, ["getDecryptionRuleList","getDecryptionRuleListOutput"], () => require("./getDecryptionRuleList"));

export { GetDeviceArgs, GetDeviceResult, GetDeviceOutputArgs } from "./getDevice";
export const getDevice: typeof import("./getDevice").getDevice = null as any;
export const getDeviceOutput: typeof import("./getDevice").getDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getDevice","getDeviceOutput"], () => require("./getDevice"));

export { GetDeviceListArgs, GetDeviceListResult, GetDeviceListOutputArgs } from "./getDeviceList";
export const getDeviceList: typeof import("./getDeviceList").getDeviceList = null as any;
export const getDeviceListOutput: typeof import("./getDeviceList").getDeviceListOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceList","getDeviceListOutput"], () => require("./getDeviceList"));

export { GetDnsSecurityProfileArgs, GetDnsSecurityProfileResult, GetDnsSecurityProfileOutputArgs } from "./getDnsSecurityProfile";
export const getDnsSecurityProfile: typeof import("./getDnsSecurityProfile").getDnsSecurityProfile = null as any;
export const getDnsSecurityProfileOutput: typeof import("./getDnsSecurityProfile").getDnsSecurityProfileOutput = null as any;
utilities.lazyLoad(exports, ["getDnsSecurityProfile","getDnsSecurityProfileOutput"], () => require("./getDnsSecurityProfile"));

export { GetDnsSecurityProfileListArgs, GetDnsSecurityProfileListResult, GetDnsSecurityProfileListOutputArgs } from "./getDnsSecurityProfileList";
export const getDnsSecurityProfileList: typeof import("./getDnsSecurityProfileList").getDnsSecurityProfileList = null as any;
export const getDnsSecurityProfileListOutput: typeof import("./getDnsSecurityProfileList").getDnsSecurityProfileListOutput = null as any;
utilities.lazyLoad(exports, ["getDnsSecurityProfileList","getDnsSecurityProfileListOutput"], () => require("./getDnsSecurityProfileList"));

export { GetDynamicUserGroupArgs, GetDynamicUserGroupResult, GetDynamicUserGroupOutputArgs } from "./getDynamicUserGroup";
export const getDynamicUserGroup: typeof import("./getDynamicUserGroup").getDynamicUserGroup = null as any;
export const getDynamicUserGroupOutput: typeof import("./getDynamicUserGroup").getDynamicUserGroupOutput = null as any;
utilities.lazyLoad(exports, ["getDynamicUserGroup","getDynamicUserGroupOutput"], () => require("./getDynamicUserGroup"));

export { GetDynamicUserGroupListArgs, GetDynamicUserGroupListResult, GetDynamicUserGroupListOutputArgs } from "./getDynamicUserGroupList";
export const getDynamicUserGroupList: typeof import("./getDynamicUserGroupList").getDynamicUserGroupList = null as any;
export const getDynamicUserGroupListOutput: typeof import("./getDynamicUserGroupList").getDynamicUserGroupListOutput = null as any;
utilities.lazyLoad(exports, ["getDynamicUserGroupList","getDynamicUserGroupListOutput"], () => require("./getDynamicUserGroupList"));

export { GetExternalDynamicListArgs, GetExternalDynamicListResult, GetExternalDynamicListOutputArgs } from "./getExternalDynamicList";
export const getExternalDynamicList: typeof import("./getExternalDynamicList").getExternalDynamicList = null as any;
export const getExternalDynamicListOutput: typeof import("./getExternalDynamicList").getExternalDynamicListOutput = null as any;
utilities.lazyLoad(exports, ["getExternalDynamicList","getExternalDynamicListOutput"], () => require("./getExternalDynamicList"));

export { GetExternalDynamicListListArgs, GetExternalDynamicListListResult, GetExternalDynamicListListOutputArgs } from "./getExternalDynamicListList";
export const getExternalDynamicListList: typeof import("./getExternalDynamicListList").getExternalDynamicListList = null as any;
export const getExternalDynamicListListOutput: typeof import("./getExternalDynamicListList").getExternalDynamicListListOutput = null as any;
utilities.lazyLoad(exports, ["getExternalDynamicListList","getExternalDynamicListListOutput"], () => require("./getExternalDynamicListList"));

export { GetFileBlockingProfileArgs, GetFileBlockingProfileResult, GetFileBlockingProfileOutputArgs } from "./getFileBlockingProfile";
export const getFileBlockingProfile: typeof import("./getFileBlockingProfile").getFileBlockingProfile = null as any;
export const getFileBlockingProfileOutput: typeof import("./getFileBlockingProfile").getFileBlockingProfileOutput = null as any;
utilities.lazyLoad(exports, ["getFileBlockingProfile","getFileBlockingProfileOutput"], () => require("./getFileBlockingProfile"));

export { GetFileBlockingProfileListArgs, GetFileBlockingProfileListResult, GetFileBlockingProfileListOutputArgs } from "./getFileBlockingProfileList";
export const getFileBlockingProfileList: typeof import("./getFileBlockingProfileList").getFileBlockingProfileList = null as any;
export const getFileBlockingProfileListOutput: typeof import("./getFileBlockingProfileList").getFileBlockingProfileListOutput = null as any;
utilities.lazyLoad(exports, ["getFileBlockingProfileList","getFileBlockingProfileListOutput"], () => require("./getFileBlockingProfileList"));

export { GetHipObjectArgs, GetHipObjectResult, GetHipObjectOutputArgs } from "./getHipObject";
export const getHipObject: typeof import("./getHipObject").getHipObject = null as any;
export const getHipObjectOutput: typeof import("./getHipObject").getHipObjectOutput = null as any;
utilities.lazyLoad(exports, ["getHipObject","getHipObjectOutput"], () => require("./getHipObject"));

export { GetHipObjectListArgs, GetHipObjectListResult, GetHipObjectListOutputArgs } from "./getHipObjectList";
export const getHipObjectList: typeof import("./getHipObjectList").getHipObjectList = null as any;
export const getHipObjectListOutput: typeof import("./getHipObjectList").getHipObjectListOutput = null as any;
utilities.lazyLoad(exports, ["getHipObjectList","getHipObjectListOutput"], () => require("./getHipObjectList"));

export { GetHipProfileArgs, GetHipProfileResult, GetHipProfileOutputArgs } from "./getHipProfile";
export const getHipProfile: typeof import("./getHipProfile").getHipProfile = null as any;
export const getHipProfileOutput: typeof import("./getHipProfile").getHipProfileOutput = null as any;
utilities.lazyLoad(exports, ["getHipProfile","getHipProfileOutput"], () => require("./getHipProfile"));

export { GetHipProfileListArgs, GetHipProfileListResult, GetHipProfileListOutputArgs } from "./getHipProfileList";
export const getHipProfileList: typeof import("./getHipProfileList").getHipProfileList = null as any;
export const getHipProfileListOutput: typeof import("./getHipProfileList").getHipProfileListOutput = null as any;
utilities.lazyLoad(exports, ["getHipProfileList","getHipProfileListOutput"], () => require("./getHipProfileList"));

export { GetHttpHeaderProfileArgs, GetHttpHeaderProfileResult, GetHttpHeaderProfileOutputArgs } from "./getHttpHeaderProfile";
export const getHttpHeaderProfile: typeof import("./getHttpHeaderProfile").getHttpHeaderProfile = null as any;
export const getHttpHeaderProfileOutput: typeof import("./getHttpHeaderProfile").getHttpHeaderProfileOutput = null as any;
utilities.lazyLoad(exports, ["getHttpHeaderProfile","getHttpHeaderProfileOutput"], () => require("./getHttpHeaderProfile"));

export { GetHttpHeaderProfileListArgs, GetHttpHeaderProfileListResult, GetHttpHeaderProfileListOutputArgs } from "./getHttpHeaderProfileList";
export const getHttpHeaderProfileList: typeof import("./getHttpHeaderProfileList").getHttpHeaderProfileList = null as any;
export const getHttpHeaderProfileListOutput: typeof import("./getHttpHeaderProfileList").getHttpHeaderProfileListOutput = null as any;
utilities.lazyLoad(exports, ["getHttpHeaderProfileList","getHttpHeaderProfileListOutput"], () => require("./getHttpHeaderProfileList"));

export { GetIkeCryptoProfileArgs, GetIkeCryptoProfileResult, GetIkeCryptoProfileOutputArgs } from "./getIkeCryptoProfile";
export const getIkeCryptoProfile: typeof import("./getIkeCryptoProfile").getIkeCryptoProfile = null as any;
export const getIkeCryptoProfileOutput: typeof import("./getIkeCryptoProfile").getIkeCryptoProfileOutput = null as any;
utilities.lazyLoad(exports, ["getIkeCryptoProfile","getIkeCryptoProfileOutput"], () => require("./getIkeCryptoProfile"));

export { GetIkeCryptoProfileListArgs, GetIkeCryptoProfileListResult, GetIkeCryptoProfileListOutputArgs } from "./getIkeCryptoProfileList";
export const getIkeCryptoProfileList: typeof import("./getIkeCryptoProfileList").getIkeCryptoProfileList = null as any;
export const getIkeCryptoProfileListOutput: typeof import("./getIkeCryptoProfileList").getIkeCryptoProfileListOutput = null as any;
utilities.lazyLoad(exports, ["getIkeCryptoProfileList","getIkeCryptoProfileListOutput"], () => require("./getIkeCryptoProfileList"));

export { GetIkeGatewayArgs, GetIkeGatewayResult, GetIkeGatewayOutputArgs } from "./getIkeGateway";
export const getIkeGateway: typeof import("./getIkeGateway").getIkeGateway = null as any;
export const getIkeGatewayOutput: typeof import("./getIkeGateway").getIkeGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getIkeGateway","getIkeGatewayOutput"], () => require("./getIkeGateway"));

export { GetIkeGatewayListArgs, GetIkeGatewayListResult, GetIkeGatewayListOutputArgs } from "./getIkeGatewayList";
export const getIkeGatewayList: typeof import("./getIkeGatewayList").getIkeGatewayList = null as any;
export const getIkeGatewayListOutput: typeof import("./getIkeGatewayList").getIkeGatewayListOutput = null as any;
utilities.lazyLoad(exports, ["getIkeGatewayList","getIkeGatewayListOutput"], () => require("./getIkeGatewayList"));

export { GetInternalDnsServerArgs, GetInternalDnsServerResult, GetInternalDnsServerOutputArgs } from "./getInternalDnsServer";
export const getInternalDnsServer: typeof import("./getInternalDnsServer").getInternalDnsServer = null as any;
export const getInternalDnsServerOutput: typeof import("./getInternalDnsServer").getInternalDnsServerOutput = null as any;
utilities.lazyLoad(exports, ["getInternalDnsServer","getInternalDnsServerOutput"], () => require("./getInternalDnsServer"));

export { GetInternalDnsServerListArgs, GetInternalDnsServerListResult, GetInternalDnsServerListOutputArgs } from "./getInternalDnsServerList";
export const getInternalDnsServerList: typeof import("./getInternalDnsServerList").getInternalDnsServerList = null as any;
export const getInternalDnsServerListOutput: typeof import("./getInternalDnsServerList").getInternalDnsServerListOutput = null as any;
utilities.lazyLoad(exports, ["getInternalDnsServerList","getInternalDnsServerListOutput"], () => require("./getInternalDnsServerList"));

export { GetIpsecCryptoProfileArgs, GetIpsecCryptoProfileResult, GetIpsecCryptoProfileOutputArgs } from "./getIpsecCryptoProfile";
export const getIpsecCryptoProfile: typeof import("./getIpsecCryptoProfile").getIpsecCryptoProfile = null as any;
export const getIpsecCryptoProfileOutput: typeof import("./getIpsecCryptoProfile").getIpsecCryptoProfileOutput = null as any;
utilities.lazyLoad(exports, ["getIpsecCryptoProfile","getIpsecCryptoProfileOutput"], () => require("./getIpsecCryptoProfile"));

export { GetIpsecCryptoProfileListArgs, GetIpsecCryptoProfileListResult, GetIpsecCryptoProfileListOutputArgs } from "./getIpsecCryptoProfileList";
export const getIpsecCryptoProfileList: typeof import("./getIpsecCryptoProfileList").getIpsecCryptoProfileList = null as any;
export const getIpsecCryptoProfileListOutput: typeof import("./getIpsecCryptoProfileList").getIpsecCryptoProfileListOutput = null as any;
utilities.lazyLoad(exports, ["getIpsecCryptoProfileList","getIpsecCryptoProfileListOutput"], () => require("./getIpsecCryptoProfileList"));

export { GetIpsecTunnelArgs, GetIpsecTunnelResult, GetIpsecTunnelOutputArgs } from "./getIpsecTunnel";
export const getIpsecTunnel: typeof import("./getIpsecTunnel").getIpsecTunnel = null as any;
export const getIpsecTunnelOutput: typeof import("./getIpsecTunnel").getIpsecTunnelOutput = null as any;
utilities.lazyLoad(exports, ["getIpsecTunnel","getIpsecTunnelOutput"], () => require("./getIpsecTunnel"));

export { GetIpsecTunnelListArgs, GetIpsecTunnelListResult, GetIpsecTunnelListOutputArgs } from "./getIpsecTunnelList";
export const getIpsecTunnelList: typeof import("./getIpsecTunnelList").getIpsecTunnelList = null as any;
export const getIpsecTunnelListOutput: typeof import("./getIpsecTunnelList").getIpsecTunnelListOutput = null as any;
utilities.lazyLoad(exports, ["getIpsecTunnelList","getIpsecTunnelListOutput"], () => require("./getIpsecTunnelList"));

export { GetJobsArgs, GetJobsResult, GetJobsOutputArgs } from "./getJobs";
export const getJobs: typeof import("./getJobs").getJobs = null as any;
export const getJobsOutput: typeof import("./getJobs").getJobsOutput = null as any;
utilities.lazyLoad(exports, ["getJobs","getJobsOutput"], () => require("./getJobs"));

export { GetJobsListResult } from "./getJobsList";
export const getJobsList: typeof import("./getJobsList").getJobsList = null as any;
export const getJobsListOutput: typeof import("./getJobsList").getJobsListOutput = null as any;
utilities.lazyLoad(exports, ["getJobsList","getJobsListOutput"], () => require("./getJobsList"));

export { GetKerberosServerProfileArgs, GetKerberosServerProfileResult, GetKerberosServerProfileOutputArgs } from "./getKerberosServerProfile";
export const getKerberosServerProfile: typeof import("./getKerberosServerProfile").getKerberosServerProfile = null as any;
export const getKerberosServerProfileOutput: typeof import("./getKerberosServerProfile").getKerberosServerProfileOutput = null as any;
utilities.lazyLoad(exports, ["getKerberosServerProfile","getKerberosServerProfileOutput"], () => require("./getKerberosServerProfile"));

export { GetKerberosServerProfileListArgs, GetKerberosServerProfileListResult, GetKerberosServerProfileListOutputArgs } from "./getKerberosServerProfileList";
export const getKerberosServerProfileList: typeof import("./getKerberosServerProfileList").getKerberosServerProfileList = null as any;
export const getKerberosServerProfileListOutput: typeof import("./getKerberosServerProfileList").getKerberosServerProfileListOutput = null as any;
utilities.lazyLoad(exports, ["getKerberosServerProfileList","getKerberosServerProfileListOutput"], () => require("./getKerberosServerProfileList"));

export { GetLabelListArgs, GetLabelListResult, GetLabelListOutputArgs } from "./getLabelList";
export const getLabelList: typeof import("./getLabelList").getLabelList = null as any;
export const getLabelListOutput: typeof import("./getLabelList").getLabelListOutput = null as any;
utilities.lazyLoad(exports, ["getLabelList","getLabelListOutput"], () => require("./getLabelList"));

export { GetLabelsGetbyidResponseArgs, GetLabelsGetbyidResponseResult, GetLabelsGetbyidResponseOutputArgs } from "./getLabelsGetbyidResponse";
export const getLabelsGetbyidResponse: typeof import("./getLabelsGetbyidResponse").getLabelsGetbyidResponse = null as any;
export const getLabelsGetbyidResponseOutput: typeof import("./getLabelsGetbyidResponse").getLabelsGetbyidResponseOutput = null as any;
utilities.lazyLoad(exports, ["getLabelsGetbyidResponse","getLabelsGetbyidResponseOutput"], () => require("./getLabelsGetbyidResponse"));

export { GetLdapServerProfileArgs, GetLdapServerProfileResult, GetLdapServerProfileOutputArgs } from "./getLdapServerProfile";
export const getLdapServerProfile: typeof import("./getLdapServerProfile").getLdapServerProfile = null as any;
export const getLdapServerProfileOutput: typeof import("./getLdapServerProfile").getLdapServerProfileOutput = null as any;
utilities.lazyLoad(exports, ["getLdapServerProfile","getLdapServerProfileOutput"], () => require("./getLdapServerProfile"));

export { GetLdapServerProfileListArgs, GetLdapServerProfileListResult, GetLdapServerProfileListOutputArgs } from "./getLdapServerProfileList";
export const getLdapServerProfileList: typeof import("./getLdapServerProfileList").getLdapServerProfileList = null as any;
export const getLdapServerProfileListOutput: typeof import("./getLdapServerProfileList").getLdapServerProfileListOutput = null as any;
utilities.lazyLoad(exports, ["getLdapServerProfileList","getLdapServerProfileListOutput"], () => require("./getLdapServerProfileList"));

export { GetLocalUserArgs, GetLocalUserResult, GetLocalUserOutputArgs } from "./getLocalUser";
export const getLocalUser: typeof import("./getLocalUser").getLocalUser = null as any;
export const getLocalUserOutput: typeof import("./getLocalUser").getLocalUserOutput = null as any;
utilities.lazyLoad(exports, ["getLocalUser","getLocalUserOutput"], () => require("./getLocalUser"));

export { GetLocalUserGroupListArgs, GetLocalUserGroupListResult, GetLocalUserGroupListOutputArgs } from "./getLocalUserGroupList";
export const getLocalUserGroupList: typeof import("./getLocalUserGroupList").getLocalUserGroupList = null as any;
export const getLocalUserGroupListOutput: typeof import("./getLocalUserGroupList").getLocalUserGroupListOutput = null as any;
utilities.lazyLoad(exports, ["getLocalUserGroupList","getLocalUserGroupListOutput"], () => require("./getLocalUserGroupList"));

export { GetLocalUserListArgs, GetLocalUserListResult, GetLocalUserListOutputArgs } from "./getLocalUserList";
export const getLocalUserList: typeof import("./getLocalUserList").getLocalUserList = null as any;
export const getLocalUserListOutput: typeof import("./getLocalUserList").getLocalUserListOutput = null as any;
utilities.lazyLoad(exports, ["getLocalUserList","getLocalUserListOutput"], () => require("./getLocalUserList"));

export { GetMfaServerArgs, GetMfaServerResult, GetMfaServerOutputArgs } from "./getMfaServer";
export const getMfaServer: typeof import("./getMfaServer").getMfaServer = null as any;
export const getMfaServerOutput: typeof import("./getMfaServer").getMfaServerOutput = null as any;
utilities.lazyLoad(exports, ["getMfaServer","getMfaServerOutput"], () => require("./getMfaServer"));

export { GetNatRuleArgs, GetNatRuleResult, GetNatRuleOutputArgs } from "./getNatRule";
export const getNatRule: typeof import("./getNatRule").getNatRule = null as any;
export const getNatRuleOutput: typeof import("./getNatRule").getNatRuleOutput = null as any;
utilities.lazyLoad(exports, ["getNatRule","getNatRuleOutput"], () => require("./getNatRule"));

export { GetNatRuleListArgs, GetNatRuleListResult, GetNatRuleListOutputArgs } from "./getNatRuleList";
export const getNatRuleList: typeof import("./getNatRuleList").getNatRuleList = null as any;
export const getNatRuleListOutput: typeof import("./getNatRuleList").getNatRuleListOutput = null as any;
utilities.lazyLoad(exports, ["getNatRuleList","getNatRuleListOutput"], () => require("./getNatRuleList"));

export { GetOcspResponderArgs, GetOcspResponderResult, GetOcspResponderOutputArgs } from "./getOcspResponder";
export const getOcspResponder: typeof import("./getOcspResponder").getOcspResponder = null as any;
export const getOcspResponderOutput: typeof import("./getOcspResponder").getOcspResponderOutput = null as any;
utilities.lazyLoad(exports, ["getOcspResponder","getOcspResponderOutput"], () => require("./getOcspResponder"));

export { GetOcspResponderListArgs, GetOcspResponderListResult, GetOcspResponderListOutputArgs } from "./getOcspResponderList";
export const getOcspResponderList: typeof import("./getOcspResponderList").getOcspResponderList = null as any;
export const getOcspResponderListOutput: typeof import("./getOcspResponderList").getOcspResponderListOutput = null as any;
utilities.lazyLoad(exports, ["getOcspResponderList","getOcspResponderListOutput"], () => require("./getOcspResponderList"));

export { GetProfileGroupArgs, GetProfileGroupResult, GetProfileGroupOutputArgs } from "./getProfileGroup";
export const getProfileGroup: typeof import("./getProfileGroup").getProfileGroup = null as any;
export const getProfileGroupOutput: typeof import("./getProfileGroup").getProfileGroupOutput = null as any;
utilities.lazyLoad(exports, ["getProfileGroup","getProfileGroupOutput"], () => require("./getProfileGroup"));

export { GetProfileGroupListArgs, GetProfileGroupListResult, GetProfileGroupListOutputArgs } from "./getProfileGroupList";
export const getProfileGroupList: typeof import("./getProfileGroupList").getProfileGroupList = null as any;
export const getProfileGroupListOutput: typeof import("./getProfileGroupList").getProfileGroupListOutput = null as any;
utilities.lazyLoad(exports, ["getProfileGroupList","getProfileGroupListOutput"], () => require("./getProfileGroupList"));

export { GetQosPolicyRuleArgs, GetQosPolicyRuleResult, GetQosPolicyRuleOutputArgs } from "./getQosPolicyRule";
export const getQosPolicyRule: typeof import("./getQosPolicyRule").getQosPolicyRule = null as any;
export const getQosPolicyRuleOutput: typeof import("./getQosPolicyRule").getQosPolicyRuleOutput = null as any;
utilities.lazyLoad(exports, ["getQosPolicyRule","getQosPolicyRuleOutput"], () => require("./getQosPolicyRule"));

export { GetQosPolicyRuleListArgs, GetQosPolicyRuleListResult, GetQosPolicyRuleListOutputArgs } from "./getQosPolicyRuleList";
export const getQosPolicyRuleList: typeof import("./getQosPolicyRuleList").getQosPolicyRuleList = null as any;
export const getQosPolicyRuleListOutput: typeof import("./getQosPolicyRuleList").getQosPolicyRuleListOutput = null as any;
utilities.lazyLoad(exports, ["getQosPolicyRuleList","getQosPolicyRuleListOutput"], () => require("./getQosPolicyRuleList"));

export { GetQosProfileArgs, GetQosProfileResult, GetQosProfileOutputArgs } from "./getQosProfile";
export const getQosProfile: typeof import("./getQosProfile").getQosProfile = null as any;
export const getQosProfileOutput: typeof import("./getQosProfile").getQosProfileOutput = null as any;
utilities.lazyLoad(exports, ["getQosProfile","getQosProfileOutput"], () => require("./getQosProfile"));

export { GetQosProfileListArgs, GetQosProfileListResult, GetQosProfileListOutputArgs } from "./getQosProfileList";
export const getQosProfileList: typeof import("./getQosProfileList").getQosProfileList = null as any;
export const getQosProfileListOutput: typeof import("./getQosProfileList").getQosProfileListOutput = null as any;
utilities.lazyLoad(exports, ["getQosProfileList","getQosProfileListOutput"], () => require("./getQosProfileList"));

export { GetRadiusServerProfileArgs, GetRadiusServerProfileResult, GetRadiusServerProfileOutputArgs } from "./getRadiusServerProfile";
export const getRadiusServerProfile: typeof import("./getRadiusServerProfile").getRadiusServerProfile = null as any;
export const getRadiusServerProfileOutput: typeof import("./getRadiusServerProfile").getRadiusServerProfileOutput = null as any;
utilities.lazyLoad(exports, ["getRadiusServerProfile","getRadiusServerProfileOutput"], () => require("./getRadiusServerProfile"));

export { GetRadiusServerProfileListArgs, GetRadiusServerProfileListResult, GetRadiusServerProfileListOutputArgs } from "./getRadiusServerProfileList";
export const getRadiusServerProfileList: typeof import("./getRadiusServerProfileList").getRadiusServerProfileList = null as any;
export const getRadiusServerProfileListOutput: typeof import("./getRadiusServerProfileList").getRadiusServerProfileListOutput = null as any;
utilities.lazyLoad(exports, ["getRadiusServerProfileList","getRadiusServerProfileListOutput"], () => require("./getRadiusServerProfileList"));

export { GetRegionArgs, GetRegionResult, GetRegionOutputArgs } from "./getRegion";
export const getRegion: typeof import("./getRegion").getRegion = null as any;
export const getRegionOutput: typeof import("./getRegion").getRegionOutput = null as any;
utilities.lazyLoad(exports, ["getRegion","getRegionOutput"], () => require("./getRegion"));

export { GetRegionListArgs, GetRegionListResult, GetRegionListOutputArgs } from "./getRegionList";
export const getRegionList: typeof import("./getRegionList").getRegionList = null as any;
export const getRegionListOutput: typeof import("./getRegionList").getRegionListOutput = null as any;
utilities.lazyLoad(exports, ["getRegionList","getRegionListOutput"], () => require("./getRegionList"));

export { GetRemoteNetworkArgs, GetRemoteNetworkResult, GetRemoteNetworkOutputArgs } from "./getRemoteNetwork";
export const getRemoteNetwork: typeof import("./getRemoteNetwork").getRemoteNetwork = null as any;
export const getRemoteNetworkOutput: typeof import("./getRemoteNetwork").getRemoteNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteNetwork","getRemoteNetworkOutput"], () => require("./getRemoteNetwork"));

export { GetRemoteNetworkListArgs, GetRemoteNetworkListResult, GetRemoteNetworkListOutputArgs } from "./getRemoteNetworkList";
export const getRemoteNetworkList: typeof import("./getRemoteNetworkList").getRemoteNetworkList = null as any;
export const getRemoteNetworkListOutput: typeof import("./getRemoteNetworkList").getRemoteNetworkListOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteNetworkList","getRemoteNetworkListOutput"], () => require("./getRemoteNetworkList"));

export { GetSamlServerProfileArgs, GetSamlServerProfileResult, GetSamlServerProfileOutputArgs } from "./getSamlServerProfile";
export const getSamlServerProfile: typeof import("./getSamlServerProfile").getSamlServerProfile = null as any;
export const getSamlServerProfileOutput: typeof import("./getSamlServerProfile").getSamlServerProfileOutput = null as any;
utilities.lazyLoad(exports, ["getSamlServerProfile","getSamlServerProfileOutput"], () => require("./getSamlServerProfile"));

export { GetSamlServerProfileListArgs, GetSamlServerProfileListResult, GetSamlServerProfileListOutputArgs } from "./getSamlServerProfileList";
export const getSamlServerProfileList: typeof import("./getSamlServerProfileList").getSamlServerProfileList = null as any;
export const getSamlServerProfileListOutput: typeof import("./getSamlServerProfileList").getSamlServerProfileListOutput = null as any;
utilities.lazyLoad(exports, ["getSamlServerProfileList","getSamlServerProfileListOutput"], () => require("./getSamlServerProfileList"));

export { GetScepProfileArgs, GetScepProfileResult, GetScepProfileOutputArgs } from "./getScepProfile";
export const getScepProfile: typeof import("./getScepProfile").getScepProfile = null as any;
export const getScepProfileOutput: typeof import("./getScepProfile").getScepProfileOutput = null as any;
utilities.lazyLoad(exports, ["getScepProfile","getScepProfileOutput"], () => require("./getScepProfile"));

export { GetScepProfileListArgs, GetScepProfileListResult, GetScepProfileListOutputArgs } from "./getScepProfileList";
export const getScepProfileList: typeof import("./getScepProfileList").getScepProfileList = null as any;
export const getScepProfileListOutput: typeof import("./getScepProfileList").getScepProfileListOutput = null as any;
utilities.lazyLoad(exports, ["getScepProfileList","getScepProfileListOutput"], () => require("./getScepProfileList"));

export { GetScheduleArgs, GetScheduleResult, GetScheduleOutputArgs } from "./getSchedule";
export const getSchedule: typeof import("./getSchedule").getSchedule = null as any;
export const getScheduleOutput: typeof import("./getSchedule").getScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getSchedule","getScheduleOutput"], () => require("./getSchedule"));

export { GetScheduleListArgs, GetScheduleListResult, GetScheduleListOutputArgs } from "./getScheduleList";
export const getScheduleList: typeof import("./getScheduleList").getScheduleList = null as any;
export const getScheduleListOutput: typeof import("./getScheduleList").getScheduleListOutput = null as any;
utilities.lazyLoad(exports, ["getScheduleList","getScheduleListOutput"], () => require("./getScheduleList"));

export { GetSecurityRuleArgs, GetSecurityRuleResult, GetSecurityRuleOutputArgs } from "./getSecurityRule";
export const getSecurityRule: typeof import("./getSecurityRule").getSecurityRule = null as any;
export const getSecurityRuleOutput: typeof import("./getSecurityRule").getSecurityRuleOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityRule","getSecurityRuleOutput"], () => require("./getSecurityRule"));

export { GetSecurityRuleListArgs, GetSecurityRuleListResult, GetSecurityRuleListOutputArgs } from "./getSecurityRuleList";
export const getSecurityRuleList: typeof import("./getSecurityRuleList").getSecurityRuleList = null as any;
export const getSecurityRuleListOutput: typeof import("./getSecurityRuleList").getSecurityRuleListOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityRuleList","getSecurityRuleListOutput"], () => require("./getSecurityRuleList"));

export { GetServiceArgs, GetServiceResult, GetServiceOutputArgs } from "./getService";
export const getService: typeof import("./getService").getService = null as any;
export const getServiceOutput: typeof import("./getService").getServiceOutput = null as any;
utilities.lazyLoad(exports, ["getService","getServiceOutput"], () => require("./getService"));

export { GetServiceConnectionArgs, GetServiceConnectionResult, GetServiceConnectionOutputArgs } from "./getServiceConnection";
export const getServiceConnection: typeof import("./getServiceConnection").getServiceConnection = null as any;
export const getServiceConnectionOutput: typeof import("./getServiceConnection").getServiceConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getServiceConnection","getServiceConnectionOutput"], () => require("./getServiceConnection"));

export { GetServiceConnectionGroupArgs, GetServiceConnectionGroupResult, GetServiceConnectionGroupOutputArgs } from "./getServiceConnectionGroup";
export const getServiceConnectionGroup: typeof import("./getServiceConnectionGroup").getServiceConnectionGroup = null as any;
export const getServiceConnectionGroupOutput: typeof import("./getServiceConnectionGroup").getServiceConnectionGroupOutput = null as any;
utilities.lazyLoad(exports, ["getServiceConnectionGroup","getServiceConnectionGroupOutput"], () => require("./getServiceConnectionGroup"));

export { GetServiceConnectionGroupListArgs, GetServiceConnectionGroupListResult, GetServiceConnectionGroupListOutputArgs } from "./getServiceConnectionGroupList";
export const getServiceConnectionGroupList: typeof import("./getServiceConnectionGroupList").getServiceConnectionGroupList = null as any;
export const getServiceConnectionGroupListOutput: typeof import("./getServiceConnectionGroupList").getServiceConnectionGroupListOutput = null as any;
utilities.lazyLoad(exports, ["getServiceConnectionGroupList","getServiceConnectionGroupListOutput"], () => require("./getServiceConnectionGroupList"));

export { GetServiceConnectionListArgs, GetServiceConnectionListResult, GetServiceConnectionListOutputArgs } from "./getServiceConnectionList";
export const getServiceConnectionList: typeof import("./getServiceConnectionList").getServiceConnectionList = null as any;
export const getServiceConnectionListOutput: typeof import("./getServiceConnectionList").getServiceConnectionListOutput = null as any;
utilities.lazyLoad(exports, ["getServiceConnectionList","getServiceConnectionListOutput"], () => require("./getServiceConnectionList"));

export { GetServiceGroupArgs, GetServiceGroupResult, GetServiceGroupOutputArgs } from "./getServiceGroup";
export const getServiceGroup: typeof import("./getServiceGroup").getServiceGroup = null as any;
export const getServiceGroupOutput: typeof import("./getServiceGroup").getServiceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getServiceGroup","getServiceGroupOutput"], () => require("./getServiceGroup"));

export { GetServiceGroupListArgs, GetServiceGroupListResult, GetServiceGroupListOutputArgs } from "./getServiceGroupList";
export const getServiceGroupList: typeof import("./getServiceGroupList").getServiceGroupList = null as any;
export const getServiceGroupListOutput: typeof import("./getServiceGroupList").getServiceGroupListOutput = null as any;
utilities.lazyLoad(exports, ["getServiceGroupList","getServiceGroupListOutput"], () => require("./getServiceGroupList"));

export { GetServiceListArgs, GetServiceListResult, GetServiceListOutputArgs } from "./getServiceList";
export const getServiceList: typeof import("./getServiceList").getServiceList = null as any;
export const getServiceListOutput: typeof import("./getServiceList").getServiceListOutput = null as any;
utilities.lazyLoad(exports, ["getServiceList","getServiceListOutput"], () => require("./getServiceList"));

export { GetSharedInfrastructureSettingsListArgs, GetSharedInfrastructureSettingsListResult, GetSharedInfrastructureSettingsListOutputArgs } from "./getSharedInfrastructureSettingsList";
export const getSharedInfrastructureSettingsList: typeof import("./getSharedInfrastructureSettingsList").getSharedInfrastructureSettingsList = null as any;
export const getSharedInfrastructureSettingsListOutput: typeof import("./getSharedInfrastructureSettingsList").getSharedInfrastructureSettingsListOutput = null as any;
utilities.lazyLoad(exports, ["getSharedInfrastructureSettingsList","getSharedInfrastructureSettingsListOutput"], () => require("./getSharedInfrastructureSettingsList"));

export { GetSnippetArgs, GetSnippetResult, GetSnippetOutputArgs } from "./getSnippet";
export const getSnippet: typeof import("./getSnippet").getSnippet = null as any;
export const getSnippetOutput: typeof import("./getSnippet").getSnippetOutput = null as any;
utilities.lazyLoad(exports, ["getSnippet","getSnippetOutput"], () => require("./getSnippet"));

export { GetSnippetListArgs, GetSnippetListResult, GetSnippetListOutputArgs } from "./getSnippetList";
export const getSnippetList: typeof import("./getSnippetList").getSnippetList = null as any;
export const getSnippetListOutput: typeof import("./getSnippetList").getSnippetListOutput = null as any;
utilities.lazyLoad(exports, ["getSnippetList","getSnippetListOutput"], () => require("./getSnippetList"));

export { GetTacacsServerProfileArgs, GetTacacsServerProfileResult, GetTacacsServerProfileOutputArgs } from "./getTacacsServerProfile";
export const getTacacsServerProfile: typeof import("./getTacacsServerProfile").getTacacsServerProfile = null as any;
export const getTacacsServerProfileOutput: typeof import("./getTacacsServerProfile").getTacacsServerProfileOutput = null as any;
utilities.lazyLoad(exports, ["getTacacsServerProfile","getTacacsServerProfileOutput"], () => require("./getTacacsServerProfile"));

export { GetTacacsServerProfileListArgs, GetTacacsServerProfileListResult, GetTacacsServerProfileListOutputArgs } from "./getTacacsServerProfileList";
export const getTacacsServerProfileList: typeof import("./getTacacsServerProfileList").getTacacsServerProfileList = null as any;
export const getTacacsServerProfileListOutput: typeof import("./getTacacsServerProfileList").getTacacsServerProfileListOutput = null as any;
utilities.lazyLoad(exports, ["getTacacsServerProfileList","getTacacsServerProfileListOutput"], () => require("./getTacacsServerProfileList"));

export { GetTagArgs, GetTagResult, GetTagOutputArgs } from "./getTag";
export const getTag: typeof import("./getTag").getTag = null as any;
export const getTagOutput: typeof import("./getTag").getTagOutput = null as any;
utilities.lazyLoad(exports, ["getTag","getTagOutput"], () => require("./getTag"));

export { GetTagListArgs, GetTagListResult, GetTagListOutputArgs } from "./getTagList";
export const getTagList: typeof import("./getTagList").getTagList = null as any;
export const getTagListOutput: typeof import("./getTagList").getTagListOutput = null as any;
utilities.lazyLoad(exports, ["getTagList","getTagListOutput"], () => require("./getTagList"));

export { GetTlsServiceProfileArgs, GetTlsServiceProfileResult, GetTlsServiceProfileOutputArgs } from "./getTlsServiceProfile";
export const getTlsServiceProfile: typeof import("./getTlsServiceProfile").getTlsServiceProfile = null as any;
export const getTlsServiceProfileOutput: typeof import("./getTlsServiceProfile").getTlsServiceProfileOutput = null as any;
utilities.lazyLoad(exports, ["getTlsServiceProfile","getTlsServiceProfileOutput"], () => require("./getTlsServiceProfile"));

export { GetTlsServiceProfileListArgs, GetTlsServiceProfileListResult, GetTlsServiceProfileListOutputArgs } from "./getTlsServiceProfileList";
export const getTlsServiceProfileList: typeof import("./getTlsServiceProfileList").getTlsServiceProfileList = null as any;
export const getTlsServiceProfileListOutput: typeof import("./getTlsServiceProfileList").getTlsServiceProfileListOutput = null as any;
utilities.lazyLoad(exports, ["getTlsServiceProfileList","getTlsServiceProfileListOutput"], () => require("./getTlsServiceProfileList"));

export { GetTrafficSteeringRuleArgs, GetTrafficSteeringRuleResult, GetTrafficSteeringRuleOutputArgs } from "./getTrafficSteeringRule";
export const getTrafficSteeringRule: typeof import("./getTrafficSteeringRule").getTrafficSteeringRule = null as any;
export const getTrafficSteeringRuleOutput: typeof import("./getTrafficSteeringRule").getTrafficSteeringRuleOutput = null as any;
utilities.lazyLoad(exports, ["getTrafficSteeringRule","getTrafficSteeringRuleOutput"], () => require("./getTrafficSteeringRule"));

export { GetTrafficSteeringRuleListArgs, GetTrafficSteeringRuleListResult, GetTrafficSteeringRuleListOutputArgs } from "./getTrafficSteeringRuleList";
export const getTrafficSteeringRuleList: typeof import("./getTrafficSteeringRuleList").getTrafficSteeringRuleList = null as any;
export const getTrafficSteeringRuleListOutput: typeof import("./getTrafficSteeringRuleList").getTrafficSteeringRuleListOutput = null as any;
utilities.lazyLoad(exports, ["getTrafficSteeringRuleList","getTrafficSteeringRuleListOutput"], () => require("./getTrafficSteeringRuleList"));

export { GetTrustedCertificateAuthorityListArgs, GetTrustedCertificateAuthorityListResult, GetTrustedCertificateAuthorityListOutputArgs } from "./getTrustedCertificateAuthorityList";
export const getTrustedCertificateAuthorityList: typeof import("./getTrustedCertificateAuthorityList").getTrustedCertificateAuthorityList = null as any;
export const getTrustedCertificateAuthorityListOutput: typeof import("./getTrustedCertificateAuthorityList").getTrustedCertificateAuthorityListOutput = null as any;
utilities.lazyLoad(exports, ["getTrustedCertificateAuthorityList","getTrustedCertificateAuthorityListOutput"], () => require("./getTrustedCertificateAuthorityList"));

export { GetUrlAccessProfileArgs, GetUrlAccessProfileResult, GetUrlAccessProfileOutputArgs } from "./getUrlAccessProfile";
export const getUrlAccessProfile: typeof import("./getUrlAccessProfile").getUrlAccessProfile = null as any;
export const getUrlAccessProfileOutput: typeof import("./getUrlAccessProfile").getUrlAccessProfileOutput = null as any;
utilities.lazyLoad(exports, ["getUrlAccessProfile","getUrlAccessProfileOutput"], () => require("./getUrlAccessProfile"));

export { GetUrlAccessProfileListArgs, GetUrlAccessProfileListResult, GetUrlAccessProfileListOutputArgs } from "./getUrlAccessProfileList";
export const getUrlAccessProfileList: typeof import("./getUrlAccessProfileList").getUrlAccessProfileList = null as any;
export const getUrlAccessProfileListOutput: typeof import("./getUrlAccessProfileList").getUrlAccessProfileListOutput = null as any;
utilities.lazyLoad(exports, ["getUrlAccessProfileList","getUrlAccessProfileListOutput"], () => require("./getUrlAccessProfileList"));

export { GetUrlCategoryArgs, GetUrlCategoryResult, GetUrlCategoryOutputArgs } from "./getUrlCategory";
export const getUrlCategory: typeof import("./getUrlCategory").getUrlCategory = null as any;
export const getUrlCategoryOutput: typeof import("./getUrlCategory").getUrlCategoryOutput = null as any;
utilities.lazyLoad(exports, ["getUrlCategory","getUrlCategoryOutput"], () => require("./getUrlCategory"));

export { GetUrlCategoryListArgs, GetUrlCategoryListResult, GetUrlCategoryListOutputArgs } from "./getUrlCategoryList";
export const getUrlCategoryList: typeof import("./getUrlCategoryList").getUrlCategoryList = null as any;
export const getUrlCategoryListOutput: typeof import("./getUrlCategoryList").getUrlCategoryListOutput = null as any;
utilities.lazyLoad(exports, ["getUrlCategoryList","getUrlCategoryListOutput"], () => require("./getUrlCategoryList"));

export { GetUrlFilteringCategoryListArgs, GetUrlFilteringCategoryListResult, GetUrlFilteringCategoryListOutputArgs } from "./getUrlFilteringCategoryList";
export const getUrlFilteringCategoryList: typeof import("./getUrlFilteringCategoryList").getUrlFilteringCategoryList = null as any;
export const getUrlFilteringCategoryListOutput: typeof import("./getUrlFilteringCategoryList").getUrlFilteringCategoryListOutput = null as any;
utilities.lazyLoad(exports, ["getUrlFilteringCategoryList","getUrlFilteringCategoryListOutput"], () => require("./getUrlFilteringCategoryList"));

export { GetVariableArgs, GetVariableResult, GetVariableOutputArgs } from "./getVariable";
export const getVariable: typeof import("./getVariable").getVariable = null as any;
export const getVariableOutput: typeof import("./getVariable").getVariableOutput = null as any;
utilities.lazyLoad(exports, ["getVariable","getVariableOutput"], () => require("./getVariable"));

export { GetVariableListArgs, GetVariableListResult, GetVariableListOutputArgs } from "./getVariableList";
export const getVariableList: typeof import("./getVariableList").getVariableList = null as any;
export const getVariableListOutput: typeof import("./getVariableList").getVariableListOutput = null as any;
utilities.lazyLoad(exports, ["getVariableList","getVariableListOutput"], () => require("./getVariableList"));

export { GetVulnerabilityProtectionProfileArgs, GetVulnerabilityProtectionProfileResult, GetVulnerabilityProtectionProfileOutputArgs } from "./getVulnerabilityProtectionProfile";
export const getVulnerabilityProtectionProfile: typeof import("./getVulnerabilityProtectionProfile").getVulnerabilityProtectionProfile = null as any;
export const getVulnerabilityProtectionProfileOutput: typeof import("./getVulnerabilityProtectionProfile").getVulnerabilityProtectionProfileOutput = null as any;
utilities.lazyLoad(exports, ["getVulnerabilityProtectionProfile","getVulnerabilityProtectionProfileOutput"], () => require("./getVulnerabilityProtectionProfile"));

export { GetVulnerabilityProtectionProfileListArgs, GetVulnerabilityProtectionProfileListResult, GetVulnerabilityProtectionProfileListOutputArgs } from "./getVulnerabilityProtectionProfileList";
export const getVulnerabilityProtectionProfileList: typeof import("./getVulnerabilityProtectionProfileList").getVulnerabilityProtectionProfileList = null as any;
export const getVulnerabilityProtectionProfileListOutput: typeof import("./getVulnerabilityProtectionProfileList").getVulnerabilityProtectionProfileListOutput = null as any;
utilities.lazyLoad(exports, ["getVulnerabilityProtectionProfileList","getVulnerabilityProtectionProfileListOutput"], () => require("./getVulnerabilityProtectionProfileList"));

export { GetVulnerabilityProtectionSignaturesArgs, GetVulnerabilityProtectionSignaturesResult, GetVulnerabilityProtectionSignaturesOutputArgs } from "./getVulnerabilityProtectionSignatures";
export const getVulnerabilityProtectionSignatures: typeof import("./getVulnerabilityProtectionSignatures").getVulnerabilityProtectionSignatures = null as any;
export const getVulnerabilityProtectionSignaturesOutput: typeof import("./getVulnerabilityProtectionSignatures").getVulnerabilityProtectionSignaturesOutput = null as any;
utilities.lazyLoad(exports, ["getVulnerabilityProtectionSignatures","getVulnerabilityProtectionSignaturesOutput"], () => require("./getVulnerabilityProtectionSignatures"));

export { GetVulnerabilityProtectionSignaturesListArgs, GetVulnerabilityProtectionSignaturesListResult, GetVulnerabilityProtectionSignaturesListOutputArgs } from "./getVulnerabilityProtectionSignaturesList";
export const getVulnerabilityProtectionSignaturesList: typeof import("./getVulnerabilityProtectionSignaturesList").getVulnerabilityProtectionSignaturesList = null as any;
export const getVulnerabilityProtectionSignaturesListOutput: typeof import("./getVulnerabilityProtectionSignaturesList").getVulnerabilityProtectionSignaturesListOutput = null as any;
utilities.lazyLoad(exports, ["getVulnerabilityProtectionSignaturesList","getVulnerabilityProtectionSignaturesListOutput"], () => require("./getVulnerabilityProtectionSignaturesList"));

export { GetWildfireAntiVirusProfileArgs, GetWildfireAntiVirusProfileResult, GetWildfireAntiVirusProfileOutputArgs } from "./getWildfireAntiVirusProfile";
export const getWildfireAntiVirusProfile: typeof import("./getWildfireAntiVirusProfile").getWildfireAntiVirusProfile = null as any;
export const getWildfireAntiVirusProfileOutput: typeof import("./getWildfireAntiVirusProfile").getWildfireAntiVirusProfileOutput = null as any;
utilities.lazyLoad(exports, ["getWildfireAntiVirusProfile","getWildfireAntiVirusProfileOutput"], () => require("./getWildfireAntiVirusProfile"));

export { GetWildfireAntiVirusProfileListArgs, GetWildfireAntiVirusProfileListResult, GetWildfireAntiVirusProfileListOutputArgs } from "./getWildfireAntiVirusProfileList";
export const getWildfireAntiVirusProfileList: typeof import("./getWildfireAntiVirusProfileList").getWildfireAntiVirusProfileList = null as any;
export const getWildfireAntiVirusProfileListOutput: typeof import("./getWildfireAntiVirusProfileList").getWildfireAntiVirusProfileListOutput = null as any;
utilities.lazyLoad(exports, ["getWildfireAntiVirusProfileList","getWildfireAntiVirusProfileListOutput"], () => require("./getWildfireAntiVirusProfileList"));

export { HipObjectArgs, HipObjectState } from "./hipObject";
export type HipObject = import("./hipObject").HipObject;
export const HipObject: typeof import("./hipObject").HipObject = null as any;
utilities.lazyLoad(exports, ["HipObject"], () => require("./hipObject"));

export { HipProfileArgs, HipProfileState } from "./hipProfile";
export type HipProfile = import("./hipProfile").HipProfile;
export const HipProfile: typeof import("./hipProfile").HipProfile = null as any;
utilities.lazyLoad(exports, ["HipProfile"], () => require("./hipProfile"));

export { HttpHeaderProfileArgs, HttpHeaderProfileState } from "./httpHeaderProfile";
export type HttpHeaderProfile = import("./httpHeaderProfile").HttpHeaderProfile;
export const HttpHeaderProfile: typeof import("./httpHeaderProfile").HttpHeaderProfile = null as any;
utilities.lazyLoad(exports, ["HttpHeaderProfile"], () => require("./httpHeaderProfile"));

export { IkeCryptoProfileArgs, IkeCryptoProfileState } from "./ikeCryptoProfile";
export type IkeCryptoProfile = import("./ikeCryptoProfile").IkeCryptoProfile;
export const IkeCryptoProfile: typeof import("./ikeCryptoProfile").IkeCryptoProfile = null as any;
utilities.lazyLoad(exports, ["IkeCryptoProfile"], () => require("./ikeCryptoProfile"));

export { IkeGatewayArgs, IkeGatewayState } from "./ikeGateway";
export type IkeGateway = import("./ikeGateway").IkeGateway;
export const IkeGateway: typeof import("./ikeGateway").IkeGateway = null as any;
utilities.lazyLoad(exports, ["IkeGateway"], () => require("./ikeGateway"));

export { InternalDnsServerArgs, InternalDnsServerState } from "./internalDnsServer";
export type InternalDnsServer = import("./internalDnsServer").InternalDnsServer;
export const InternalDnsServer: typeof import("./internalDnsServer").InternalDnsServer = null as any;
utilities.lazyLoad(exports, ["InternalDnsServer"], () => require("./internalDnsServer"));

export { IpsecCryptoProfileArgs, IpsecCryptoProfileState } from "./ipsecCryptoProfile";
export type IpsecCryptoProfile = import("./ipsecCryptoProfile").IpsecCryptoProfile;
export const IpsecCryptoProfile: typeof import("./ipsecCryptoProfile").IpsecCryptoProfile = null as any;
utilities.lazyLoad(exports, ["IpsecCryptoProfile"], () => require("./ipsecCryptoProfile"));

export { IpsecTunnelArgs, IpsecTunnelState } from "./ipsecTunnel";
export type IpsecTunnel = import("./ipsecTunnel").IpsecTunnel;
export const IpsecTunnel: typeof import("./ipsecTunnel").IpsecTunnel = null as any;
utilities.lazyLoad(exports, ["IpsecTunnel"], () => require("./ipsecTunnel"));

export { KerberosServerProfileArgs, KerberosServerProfileState } from "./kerberosServerProfile";
export type KerberosServerProfile = import("./kerberosServerProfile").KerberosServerProfile;
export const KerberosServerProfile: typeof import("./kerberosServerProfile").KerberosServerProfile = null as any;
utilities.lazyLoad(exports, ["KerberosServerProfile"], () => require("./kerberosServerProfile"));

export { LdapServerProfileArgs, LdapServerProfileState } from "./ldapServerProfile";
export type LdapServerProfile = import("./ldapServerProfile").LdapServerProfile;
export const LdapServerProfile: typeof import("./ldapServerProfile").LdapServerProfile = null as any;
utilities.lazyLoad(exports, ["LdapServerProfile"], () => require("./ldapServerProfile"));

export { LocalUserArgs, LocalUserState } from "./localUser";
export type LocalUser = import("./localUser").LocalUser;
export const LocalUser: typeof import("./localUser").LocalUser = null as any;
utilities.lazyLoad(exports, ["LocalUser"], () => require("./localUser"));

export { MfaServerArgs, MfaServerState } from "./mfaServer";
export type MfaServer = import("./mfaServer").MfaServer;
export const MfaServer: typeof import("./mfaServer").MfaServer = null as any;
utilities.lazyLoad(exports, ["MfaServer"], () => require("./mfaServer"));

export { NatRuleArgs, NatRuleState } from "./natRule";
export type NatRule = import("./natRule").NatRule;
export const NatRule: typeof import("./natRule").NatRule = null as any;
utilities.lazyLoad(exports, ["NatRule"], () => require("./natRule"));

export { OcspResponderArgs, OcspResponderState } from "./ocspResponder";
export type OcspResponder = import("./ocspResponder").OcspResponder;
export const OcspResponder: typeof import("./ocspResponder").OcspResponder = null as any;
utilities.lazyLoad(exports, ["OcspResponder"], () => require("./ocspResponder"));

export { ProfileGroupArgs, ProfileGroupState } from "./profileGroup";
export type ProfileGroup = import("./profileGroup").ProfileGroup;
export const ProfileGroup: typeof import("./profileGroup").ProfileGroup = null as any;
utilities.lazyLoad(exports, ["ProfileGroup"], () => require("./profileGroup"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { QosPolicyRuleArgs, QosPolicyRuleState } from "./qosPolicyRule";
export type QosPolicyRule = import("./qosPolicyRule").QosPolicyRule;
export const QosPolicyRule: typeof import("./qosPolicyRule").QosPolicyRule = null as any;
utilities.lazyLoad(exports, ["QosPolicyRule"], () => require("./qosPolicyRule"));

export { QosProfileArgs, QosProfileState } from "./qosProfile";
export type QosProfile = import("./qosProfile").QosProfile;
export const QosProfile: typeof import("./qosProfile").QosProfile = null as any;
utilities.lazyLoad(exports, ["QosProfile"], () => require("./qosProfile"));

export { RadiusServerProfileArgs, RadiusServerProfileState } from "./radiusServerProfile";
export type RadiusServerProfile = import("./radiusServerProfile").RadiusServerProfile;
export const RadiusServerProfile: typeof import("./radiusServerProfile").RadiusServerProfile = null as any;
utilities.lazyLoad(exports, ["RadiusServerProfile"], () => require("./radiusServerProfile"));

export { RegionArgs, RegionState } from "./region";
export type Region = import("./region").Region;
export const Region: typeof import("./region").Region = null as any;
utilities.lazyLoad(exports, ["Region"], () => require("./region"));

export { RemoteNetworkArgs, RemoteNetworkState } from "./remoteNetwork";
export type RemoteNetwork = import("./remoteNetwork").RemoteNetwork;
export const RemoteNetwork: typeof import("./remoteNetwork").RemoteNetwork = null as any;
utilities.lazyLoad(exports, ["RemoteNetwork"], () => require("./remoteNetwork"));

export { SamlServerProfileArgs, SamlServerProfileState } from "./samlServerProfile";
export type SamlServerProfile = import("./samlServerProfile").SamlServerProfile;
export const SamlServerProfile: typeof import("./samlServerProfile").SamlServerProfile = null as any;
utilities.lazyLoad(exports, ["SamlServerProfile"], () => require("./samlServerProfile"));

export { ScepProfileArgs, ScepProfileState } from "./scepProfile";
export type ScepProfile = import("./scepProfile").ScepProfile;
export const ScepProfile: typeof import("./scepProfile").ScepProfile = null as any;
utilities.lazyLoad(exports, ["ScepProfile"], () => require("./scepProfile"));

export { ScheduleArgs, ScheduleState } from "./schedule";
export type Schedule = import("./schedule").Schedule;
export const Schedule: typeof import("./schedule").Schedule = null as any;
utilities.lazyLoad(exports, ["Schedule"], () => require("./schedule"));

export { SecurityRuleArgs, SecurityRuleState } from "./securityRule";
export type SecurityRule = import("./securityRule").SecurityRule;
export const SecurityRule: typeof import("./securityRule").SecurityRule = null as any;
utilities.lazyLoad(exports, ["SecurityRule"], () => require("./securityRule"));

export { ServiceArgs, ServiceState } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));

export { ServiceConnectionArgs, ServiceConnectionState } from "./serviceConnection";
export type ServiceConnection = import("./serviceConnection").ServiceConnection;
export const ServiceConnection: typeof import("./serviceConnection").ServiceConnection = null as any;
utilities.lazyLoad(exports, ["ServiceConnection"], () => require("./serviceConnection"));

export { ServiceConnectionGroupArgs, ServiceConnectionGroupState } from "./serviceConnectionGroup";
export type ServiceConnectionGroup = import("./serviceConnectionGroup").ServiceConnectionGroup;
export const ServiceConnectionGroup: typeof import("./serviceConnectionGroup").ServiceConnectionGroup = null as any;
utilities.lazyLoad(exports, ["ServiceConnectionGroup"], () => require("./serviceConnectionGroup"));

export { ServiceGroupArgs, ServiceGroupState } from "./serviceGroup";
export type ServiceGroup = import("./serviceGroup").ServiceGroup;
export const ServiceGroup: typeof import("./serviceGroup").ServiceGroup = null as any;
utilities.lazyLoad(exports, ["ServiceGroup"], () => require("./serviceGroup"));

export { SnippetArgs, SnippetState } from "./snippet";
export type Snippet = import("./snippet").Snippet;
export const Snippet: typeof import("./snippet").Snippet = null as any;
utilities.lazyLoad(exports, ["Snippet"], () => require("./snippet"));

export { TacacsServerProfileArgs, TacacsServerProfileState } from "./tacacsServerProfile";
export type TacacsServerProfile = import("./tacacsServerProfile").TacacsServerProfile;
export const TacacsServerProfile: typeof import("./tacacsServerProfile").TacacsServerProfile = null as any;
utilities.lazyLoad(exports, ["TacacsServerProfile"], () => require("./tacacsServerProfile"));

export { TagArgs, TagState } from "./tag";
export type Tag = import("./tag").Tag;
export const Tag: typeof import("./tag").Tag = null as any;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));

export { TlsServiceProfileArgs, TlsServiceProfileState } from "./tlsServiceProfile";
export type TlsServiceProfile = import("./tlsServiceProfile").TlsServiceProfile;
export const TlsServiceProfile: typeof import("./tlsServiceProfile").TlsServiceProfile = null as any;
utilities.lazyLoad(exports, ["TlsServiceProfile"], () => require("./tlsServiceProfile"));

export { TrafficSteeringRuleArgs, TrafficSteeringRuleState } from "./trafficSteeringRule";
export type TrafficSteeringRule = import("./trafficSteeringRule").TrafficSteeringRule;
export const TrafficSteeringRule: typeof import("./trafficSteeringRule").TrafficSteeringRule = null as any;
utilities.lazyLoad(exports, ["TrafficSteeringRule"], () => require("./trafficSteeringRule"));

export { UrlAccessProfileArgs, UrlAccessProfileState } from "./urlAccessProfile";
export type UrlAccessProfile = import("./urlAccessProfile").UrlAccessProfile;
export const UrlAccessProfile: typeof import("./urlAccessProfile").UrlAccessProfile = null as any;
utilities.lazyLoad(exports, ["UrlAccessProfile"], () => require("./urlAccessProfile"));

export { UrlCategoryArgs, UrlCategoryState } from "./urlCategory";
export type UrlCategory = import("./urlCategory").UrlCategory;
export const UrlCategory: typeof import("./urlCategory").UrlCategory = null as any;
utilities.lazyLoad(exports, ["UrlCategory"], () => require("./urlCategory"));

export { VariableArgs, VariableState } from "./variable";
export type Variable = import("./variable").Variable;
export const Variable: typeof import("./variable").Variable = null as any;
utilities.lazyLoad(exports, ["Variable"], () => require("./variable"));

export { VulnerabilityProtectionProfileArgs, VulnerabilityProtectionProfileState } from "./vulnerabilityProtectionProfile";
export type VulnerabilityProtectionProfile = import("./vulnerabilityProtectionProfile").VulnerabilityProtectionProfile;
export const VulnerabilityProtectionProfile: typeof import("./vulnerabilityProtectionProfile").VulnerabilityProtectionProfile = null as any;
utilities.lazyLoad(exports, ["VulnerabilityProtectionProfile"], () => require("./vulnerabilityProtectionProfile"));

export { VulnerabilityProtectionSignaturesArgs, VulnerabilityProtectionSignaturesState } from "./vulnerabilityProtectionSignatures";
export type VulnerabilityProtectionSignatures = import("./vulnerabilityProtectionSignatures").VulnerabilityProtectionSignatures;
export const VulnerabilityProtectionSignatures: typeof import("./vulnerabilityProtectionSignatures").VulnerabilityProtectionSignatures = null as any;
utilities.lazyLoad(exports, ["VulnerabilityProtectionSignatures"], () => require("./vulnerabilityProtectionSignatures"));

export { WildfireAntiVirusProfileArgs, WildfireAntiVirusProfileState } from "./wildfireAntiVirusProfile";
export type WildfireAntiVirusProfile = import("./wildfireAntiVirusProfile").WildfireAntiVirusProfile;
export const WildfireAntiVirusProfile: typeof import("./wildfireAntiVirusProfile").WildfireAntiVirusProfile = null as any;
utilities.lazyLoad(exports, ["WildfireAntiVirusProfile"], () => require("./wildfireAntiVirusProfile"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "scm:index/addressGroup:AddressGroup":
                return new AddressGroup(name, <any>undefined, { urn })
            case "scm:index/addressObject:AddressObject":
                return new AddressObject(name, <any>undefined, { urn })
            case "scm:index/antiSpywareProfile:AntiSpywareProfile":
                return new AntiSpywareProfile(name, <any>undefined, { urn })
            case "scm:index/antiSpywareSignature:AntiSpywareSignature":
                return new AntiSpywareSignature(name, <any>undefined, { urn })
            case "scm:index/appOverrideRule:AppOverrideRule":
                return new AppOverrideRule(name, <any>undefined, { urn })
            case "scm:index/application:Application":
                return new Application(name, <any>undefined, { urn })
            case "scm:index/applicationFilter:ApplicationFilter":
                return new ApplicationFilter(name, <any>undefined, { urn })
            case "scm:index/applicationGroup:ApplicationGroup":
                return new ApplicationGroup(name, <any>undefined, { urn })
            case "scm:index/authenticationPortal:AuthenticationPortal":
                return new AuthenticationPortal(name, <any>undefined, { urn })
            case "scm:index/authenticationProfile:AuthenticationProfile":
                return new AuthenticationProfile(name, <any>undefined, { urn })
            case "scm:index/authenticationRule:AuthenticationRule":
                return new AuthenticationRule(name, <any>undefined, { urn })
            case "scm:index/authenticationSequence:AuthenticationSequence":
                return new AuthenticationSequence(name, <any>undefined, { urn })
            case "scm:index/certificateProfile:CertificateProfile":
                return new CertificateProfile(name, <any>undefined, { urn })
            case "scm:index/decryptionExclusion:DecryptionExclusion":
                return new DecryptionExclusion(name, <any>undefined, { urn })
            case "scm:index/decryptionProfile:DecryptionProfile":
                return new DecryptionProfile(name, <any>undefined, { urn })
            case "scm:index/decryptionRule:DecryptionRule":
                return new DecryptionRule(name, <any>undefined, { urn })
            case "scm:index/dnsSecurityProfile:DnsSecurityProfile":
                return new DnsSecurityProfile(name, <any>undefined, { urn })
            case "scm:index/dynamicUserGroup:DynamicUserGroup":
                return new DynamicUserGroup(name, <any>undefined, { urn })
            case "scm:index/externalDynamicList:ExternalDynamicList":
                return new ExternalDynamicList(name, <any>undefined, { urn })
            case "scm:index/fileBlockingProfile:FileBlockingProfile":
                return new FileBlockingProfile(name, <any>undefined, { urn })
            case "scm:index/hipObject:HipObject":
                return new HipObject(name, <any>undefined, { urn })
            case "scm:index/hipProfile:HipProfile":
                return new HipProfile(name, <any>undefined, { urn })
            case "scm:index/httpHeaderProfile:HttpHeaderProfile":
                return new HttpHeaderProfile(name, <any>undefined, { urn })
            case "scm:index/ikeCryptoProfile:IkeCryptoProfile":
                return new IkeCryptoProfile(name, <any>undefined, { urn })
            case "scm:index/ikeGateway:IkeGateway":
                return new IkeGateway(name, <any>undefined, { urn })
            case "scm:index/internalDnsServer:InternalDnsServer":
                return new InternalDnsServer(name, <any>undefined, { urn })
            case "scm:index/ipsecCryptoProfile:IpsecCryptoProfile":
                return new IpsecCryptoProfile(name, <any>undefined, { urn })
            case "scm:index/ipsecTunnel:IpsecTunnel":
                return new IpsecTunnel(name, <any>undefined, { urn })
            case "scm:index/kerberosServerProfile:KerberosServerProfile":
                return new KerberosServerProfile(name, <any>undefined, { urn })
            case "scm:index/ldapServerProfile:LdapServerProfile":
                return new LdapServerProfile(name, <any>undefined, { urn })
            case "scm:index/localUser:LocalUser":
                return new LocalUser(name, <any>undefined, { urn })
            case "scm:index/mfaServer:MfaServer":
                return new MfaServer(name, <any>undefined, { urn })
            case "scm:index/natRule:NatRule":
                return new NatRule(name, <any>undefined, { urn })
            case "scm:index/ocspResponder:OcspResponder":
                return new OcspResponder(name, <any>undefined, { urn })
            case "scm:index/profileGroup:ProfileGroup":
                return new ProfileGroup(name, <any>undefined, { urn })
            case "scm:index/qosPolicyRule:QosPolicyRule":
                return new QosPolicyRule(name, <any>undefined, { urn })
            case "scm:index/qosProfile:QosProfile":
                return new QosProfile(name, <any>undefined, { urn })
            case "scm:index/radiusServerProfile:RadiusServerProfile":
                return new RadiusServerProfile(name, <any>undefined, { urn })
            case "scm:index/region:Region":
                return new Region(name, <any>undefined, { urn })
            case "scm:index/remoteNetwork:RemoteNetwork":
                return new RemoteNetwork(name, <any>undefined, { urn })
            case "scm:index/samlServerProfile:SamlServerProfile":
                return new SamlServerProfile(name, <any>undefined, { urn })
            case "scm:index/scepProfile:ScepProfile":
                return new ScepProfile(name, <any>undefined, { urn })
            case "scm:index/schedule:Schedule":
                return new Schedule(name, <any>undefined, { urn })
            case "scm:index/securityRule:SecurityRule":
                return new SecurityRule(name, <any>undefined, { urn })
            case "scm:index/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "scm:index/serviceConnection:ServiceConnection":
                return new ServiceConnection(name, <any>undefined, { urn })
            case "scm:index/serviceConnectionGroup:ServiceConnectionGroup":
                return new ServiceConnectionGroup(name, <any>undefined, { urn })
            case "scm:index/serviceGroup:ServiceGroup":
                return new ServiceGroup(name, <any>undefined, { urn })
            case "scm:index/snippet:Snippet":
                return new Snippet(name, <any>undefined, { urn })
            case "scm:index/tacacsServerProfile:TacacsServerProfile":
                return new TacacsServerProfile(name, <any>undefined, { urn })
            case "scm:index/tag:Tag":
                return new Tag(name, <any>undefined, { urn })
            case "scm:index/tlsServiceProfile:TlsServiceProfile":
                return new TlsServiceProfile(name, <any>undefined, { urn })
            case "scm:index/trafficSteeringRule:TrafficSteeringRule":
                return new TrafficSteeringRule(name, <any>undefined, { urn })
            case "scm:index/urlAccessProfile:UrlAccessProfile":
                return new UrlAccessProfile(name, <any>undefined, { urn })
            case "scm:index/urlCategory:UrlCategory":
                return new UrlCategory(name, <any>undefined, { urn })
            case "scm:index/variable:Variable":
                return new Variable(name, <any>undefined, { urn })
            case "scm:index/vulnerabilityProtectionProfile:VulnerabilityProtectionProfile":
                return new VulnerabilityProtectionProfile(name, <any>undefined, { urn })
            case "scm:index/vulnerabilityProtectionSignatures:VulnerabilityProtectionSignatures":
                return new VulnerabilityProtectionSignatures(name, <any>undefined, { urn })
            case "scm:index/wildfireAntiVirusProfile:WildfireAntiVirusProfile":
                return new WildfireAntiVirusProfile(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("scm", "index/addressGroup", _module)
pulumi.runtime.registerResourceModule("scm", "index/addressObject", _module)
pulumi.runtime.registerResourceModule("scm", "index/antiSpywareProfile", _module)
pulumi.runtime.registerResourceModule("scm", "index/antiSpywareSignature", _module)
pulumi.runtime.registerResourceModule("scm", "index/appOverrideRule", _module)
pulumi.runtime.registerResourceModule("scm", "index/application", _module)
pulumi.runtime.registerResourceModule("scm", "index/applicationFilter", _module)
pulumi.runtime.registerResourceModule("scm", "index/applicationGroup", _module)
pulumi.runtime.registerResourceModule("scm", "index/authenticationPortal", _module)
pulumi.runtime.registerResourceModule("scm", "index/authenticationProfile", _module)
pulumi.runtime.registerResourceModule("scm", "index/authenticationRule", _module)
pulumi.runtime.registerResourceModule("scm", "index/authenticationSequence", _module)
pulumi.runtime.registerResourceModule("scm", "index/certificateProfile", _module)
pulumi.runtime.registerResourceModule("scm", "index/decryptionExclusion", _module)
pulumi.runtime.registerResourceModule("scm", "index/decryptionProfile", _module)
pulumi.runtime.registerResourceModule("scm", "index/decryptionRule", _module)
pulumi.runtime.registerResourceModule("scm", "index/dnsSecurityProfile", _module)
pulumi.runtime.registerResourceModule("scm", "index/dynamicUserGroup", _module)
pulumi.runtime.registerResourceModule("scm", "index/externalDynamicList", _module)
pulumi.runtime.registerResourceModule("scm", "index/fileBlockingProfile", _module)
pulumi.runtime.registerResourceModule("scm", "index/hipObject", _module)
pulumi.runtime.registerResourceModule("scm", "index/hipProfile", _module)
pulumi.runtime.registerResourceModule("scm", "index/httpHeaderProfile", _module)
pulumi.runtime.registerResourceModule("scm", "index/ikeCryptoProfile", _module)
pulumi.runtime.registerResourceModule("scm", "index/ikeGateway", _module)
pulumi.runtime.registerResourceModule("scm", "index/internalDnsServer", _module)
pulumi.runtime.registerResourceModule("scm", "index/ipsecCryptoProfile", _module)
pulumi.runtime.registerResourceModule("scm", "index/ipsecTunnel", _module)
pulumi.runtime.registerResourceModule("scm", "index/kerberosServerProfile", _module)
pulumi.runtime.registerResourceModule("scm", "index/ldapServerProfile", _module)
pulumi.runtime.registerResourceModule("scm", "index/localUser", _module)
pulumi.runtime.registerResourceModule("scm", "index/mfaServer", _module)
pulumi.runtime.registerResourceModule("scm", "index/natRule", _module)
pulumi.runtime.registerResourceModule("scm", "index/ocspResponder", _module)
pulumi.runtime.registerResourceModule("scm", "index/profileGroup", _module)
pulumi.runtime.registerResourceModule("scm", "index/qosPolicyRule", _module)
pulumi.runtime.registerResourceModule("scm", "index/qosProfile", _module)
pulumi.runtime.registerResourceModule("scm", "index/radiusServerProfile", _module)
pulumi.runtime.registerResourceModule("scm", "index/region", _module)
pulumi.runtime.registerResourceModule("scm", "index/remoteNetwork", _module)
pulumi.runtime.registerResourceModule("scm", "index/samlServerProfile", _module)
pulumi.runtime.registerResourceModule("scm", "index/scepProfile", _module)
pulumi.runtime.registerResourceModule("scm", "index/schedule", _module)
pulumi.runtime.registerResourceModule("scm", "index/securityRule", _module)
pulumi.runtime.registerResourceModule("scm", "index/service", _module)
pulumi.runtime.registerResourceModule("scm", "index/serviceConnection", _module)
pulumi.runtime.registerResourceModule("scm", "index/serviceConnectionGroup", _module)
pulumi.runtime.registerResourceModule("scm", "index/serviceGroup", _module)
pulumi.runtime.registerResourceModule("scm", "index/snippet", _module)
pulumi.runtime.registerResourceModule("scm", "index/tacacsServerProfile", _module)
pulumi.runtime.registerResourceModule("scm", "index/tag", _module)
pulumi.runtime.registerResourceModule("scm", "index/tlsServiceProfile", _module)
pulumi.runtime.registerResourceModule("scm", "index/trafficSteeringRule", _module)
pulumi.runtime.registerResourceModule("scm", "index/urlAccessProfile", _module)
pulumi.runtime.registerResourceModule("scm", "index/urlCategory", _module)
pulumi.runtime.registerResourceModule("scm", "index/variable", _module)
pulumi.runtime.registerResourceModule("scm", "index/vulnerabilityProtectionProfile", _module)
pulumi.runtime.registerResourceModule("scm", "index/vulnerabilityProtectionSignatures", _module)
pulumi.runtime.registerResourceModule("scm", "index/wildfireAntiVirusProfile", _module)
pulumi.runtime.registerResourcePackage("scm", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:scm") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
