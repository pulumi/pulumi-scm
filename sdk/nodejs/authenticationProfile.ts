// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Retrieves a config item.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scm from "@pulumi/scm";
 *
 * const example = new scm.AuthenticationProfile("example", {});
 * ```
 */
export class AuthenticationProfile extends pulumi.CustomResource {
    /**
     * Get an existing AuthenticationProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthenticationProfileState, opts?: pulumi.CustomResourceOptions): AuthenticationProfile {
        return new AuthenticationProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scm:index/authenticationProfile:AuthenticationProfile';

    /**
     * Returns true if the given object is an instance of AuthenticationProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthenticationProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthenticationProfile.__pulumiType;
    }

    /**
     * The AllowList param.
     */
    public readonly allowLists!: pulumi.Output<string[] | undefined>;
    /**
     * The Device param.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * The Folder param.
     */
    public readonly folder!: pulumi.Output<string | undefined>;
    /**
     * The Lockout param.
     */
    public readonly lockout!: pulumi.Output<outputs.AuthenticationProfileLockout | undefined>;
    /**
     * The Method param.
     */
    public readonly method!: pulumi.Output<outputs.AuthenticationProfileMethod | undefined>;
    /**
     * The MultiFactorAuth param.
     */
    public readonly multiFactorAuth!: pulumi.Output<outputs.AuthenticationProfileMultiFactorAuth | undefined>;
    /**
     * The Name param.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The SingleSignOn param.
     */
    public readonly singleSignOn!: pulumi.Output<outputs.AuthenticationProfileSingleSignOn | undefined>;
    /**
     * The Snippet param.
     */
    public readonly snippet!: pulumi.Output<string | undefined>;
    public /*out*/ readonly tfid!: pulumi.Output<string>;
    /**
     * The UserDomain param. String length must not exceed 63 characters.
     */
    public readonly userDomain!: pulumi.Output<string | undefined>;
    /**
     * The UsernameModifier param. String must be one of these: `"%USERINPUT%"`, `"%USERINPUT%@%USERDOMAIN%"`, `"%USERDOMAIN%\\%USERINPUT%"`.
     */
    public readonly usernameModifier!: pulumi.Output<string | undefined>;

    /**
     * Create a AuthenticationProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AuthenticationProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthenticationProfileArgs | AuthenticationProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthenticationProfileState | undefined;
            resourceInputs["allowLists"] = state ? state.allowLists : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["folder"] = state ? state.folder : undefined;
            resourceInputs["lockout"] = state ? state.lockout : undefined;
            resourceInputs["method"] = state ? state.method : undefined;
            resourceInputs["multiFactorAuth"] = state ? state.multiFactorAuth : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["singleSignOn"] = state ? state.singleSignOn : undefined;
            resourceInputs["snippet"] = state ? state.snippet : undefined;
            resourceInputs["tfid"] = state ? state.tfid : undefined;
            resourceInputs["userDomain"] = state ? state.userDomain : undefined;
            resourceInputs["usernameModifier"] = state ? state.usernameModifier : undefined;
        } else {
            const args = argsOrState as AuthenticationProfileArgs | undefined;
            resourceInputs["allowLists"] = args ? args.allowLists : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["folder"] = args ? args.folder : undefined;
            resourceInputs["lockout"] = args ? args.lockout : undefined;
            resourceInputs["method"] = args ? args.method : undefined;
            resourceInputs["multiFactorAuth"] = args ? args.multiFactorAuth : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["singleSignOn"] = args ? args.singleSignOn : undefined;
            resourceInputs["snippet"] = args ? args.snippet : undefined;
            resourceInputs["userDomain"] = args ? args.userDomain : undefined;
            resourceInputs["usernameModifier"] = args ? args.usernameModifier : undefined;
            resourceInputs["tfid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AuthenticationProfile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AuthenticationProfile resources.
 */
export interface AuthenticationProfileState {
    /**
     * The AllowList param.
     */
    allowLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Device param.
     */
    device?: pulumi.Input<string>;
    /**
     * The Folder param.
     */
    folder?: pulumi.Input<string>;
    /**
     * The Lockout param.
     */
    lockout?: pulumi.Input<inputs.AuthenticationProfileLockout>;
    /**
     * The Method param.
     */
    method?: pulumi.Input<inputs.AuthenticationProfileMethod>;
    /**
     * The MultiFactorAuth param.
     */
    multiFactorAuth?: pulumi.Input<inputs.AuthenticationProfileMultiFactorAuth>;
    /**
     * The Name param.
     */
    name?: pulumi.Input<string>;
    /**
     * The SingleSignOn param.
     */
    singleSignOn?: pulumi.Input<inputs.AuthenticationProfileSingleSignOn>;
    /**
     * The Snippet param.
     */
    snippet?: pulumi.Input<string>;
    tfid?: pulumi.Input<string>;
    /**
     * The UserDomain param. String length must not exceed 63 characters.
     */
    userDomain?: pulumi.Input<string>;
    /**
     * The UsernameModifier param. String must be one of these: `"%USERINPUT%"`, `"%USERINPUT%@%USERDOMAIN%"`, `"%USERDOMAIN%\\%USERINPUT%"`.
     */
    usernameModifier?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AuthenticationProfile resource.
 */
export interface AuthenticationProfileArgs {
    /**
     * The AllowList param.
     */
    allowLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Device param.
     */
    device?: pulumi.Input<string>;
    /**
     * The Folder param.
     */
    folder?: pulumi.Input<string>;
    /**
     * The Lockout param.
     */
    lockout?: pulumi.Input<inputs.AuthenticationProfileLockout>;
    /**
     * The Method param.
     */
    method?: pulumi.Input<inputs.AuthenticationProfileMethod>;
    /**
     * The MultiFactorAuth param.
     */
    multiFactorAuth?: pulumi.Input<inputs.AuthenticationProfileMultiFactorAuth>;
    /**
     * The Name param.
     */
    name?: pulumi.Input<string>;
    /**
     * The SingleSignOn param.
     */
    singleSignOn?: pulumi.Input<inputs.AuthenticationProfileSingleSignOn>;
    /**
     * The Snippet param.
     */
    snippet?: pulumi.Input<string>;
    /**
     * The UserDomain param. String length must not exceed 63 characters.
     */
    userDomain?: pulumi.Input<string>;
    /**
     * The UsernameModifier param. String must be one of these: `"%USERINPUT%"`, `"%USERINPUT%@%USERDOMAIN%"`, `"%USERDOMAIN%\\%USERINPUT%"`.
     */
    usernameModifier?: pulumi.Input<string>;
}
