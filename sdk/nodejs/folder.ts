// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Retrieves a config item.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scm from "@pulumi/scm";
 *
 * const snip1 = new scm.Snippet("snip1", {name: "foobar"});
 * const example = new scm.Folder("example", {
 *     name: "my folder",
 *     parent: "Shared",
 *     description: "Made by Pulumi",
 *     snippets: [snip1.name],
 * });
 * ```
 */
export class Folder extends pulumi.CustomResource {
    /**
     * Get an existing Folder resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FolderState, opts?: pulumi.CustomResourceOptions): Folder {
        return new Folder(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scm:index/folder:Folder';

    /**
     * Returns true if the given object is an instance of Folder.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Folder {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Folder.__pulumiType;
    }

    /**
     * The Description param.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The Labels param.
     */
    declare public readonly labels: pulumi.Output<string[] | undefined>;
    /**
     * The Name param.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The Parent param.
     */
    declare public readonly parent: pulumi.Output<string>;
    /**
     * The Snippets param.
     */
    declare public readonly snippets: pulumi.Output<string[] | undefined>;
    declare public /*out*/ readonly tfid: pulumi.Output<string>;

    /**
     * Create a Folder resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FolderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FolderArgs | FolderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FolderState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["parent"] = state?.parent;
            resourceInputs["snippets"] = state?.snippets;
            resourceInputs["tfid"] = state?.tfid;
        } else {
            const args = argsOrState as FolderArgs | undefined;
            if (args?.parent === undefined && !opts.urn) {
                throw new Error("Missing required property 'parent'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["parent"] = args?.parent;
            resourceInputs["snippets"] = args?.snippets;
            resourceInputs["tfid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Folder.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Folder resources.
 */
export interface FolderState {
    /**
     * The Description param.
     */
    description?: pulumi.Input<string>;
    /**
     * The Labels param.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Name param.
     */
    name?: pulumi.Input<string>;
    /**
     * The Parent param.
     */
    parent?: pulumi.Input<string>;
    /**
     * The Snippets param.
     */
    snippets?: pulumi.Input<pulumi.Input<string>[]>;
    tfid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Folder resource.
 */
export interface FolderArgs {
    /**
     * The Description param.
     */
    description?: pulumi.Input<string>;
    /**
     * The Labels param.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Name param.
     */
    name?: pulumi.Input<string>;
    /**
     * The Parent param.
     */
    parent: pulumi.Input<string>;
    /**
     * The Snippets param.
     */
    snippets?: pulumi.Input<pulumi.Input<string>[]>;
}
