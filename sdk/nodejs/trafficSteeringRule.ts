// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Retrieves a config item.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scm from "@pulumi/scm";
 *
 * const example = new scm.TrafficSteeringRule("example", {folder: "Shared"});
 * ```
 */
export class TrafficSteeringRule extends pulumi.CustomResource {
    /**
     * Get an existing TrafficSteeringRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TrafficSteeringRuleState, opts?: pulumi.CustomResourceOptions): TrafficSteeringRule {
        return new TrafficSteeringRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scm:index/trafficSteeringRule:TrafficSteeringRule';

    /**
     * Returns true if the given object is an instance of TrafficSteeringRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TrafficSteeringRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrafficSteeringRule.__pulumiType;
    }

    /**
     * The Action param.
     */
    declare public readonly action: pulumi.Output<outputs.TrafficSteeringRuleAction | undefined>;
    /**
     * The Category param.
     */
    declare public readonly categories: pulumi.Output<string[] | undefined>;
    /**
     * The Destination param.
     */
    declare public readonly destinations: pulumi.Output<string[] | undefined>;
    /**
     * The Folder param. String can either be a specific string(`"Service Connections"`) or match this regex: `^[0-9a-zA-Z._\s-]{1,}$`. Default: `"Service Connections"`.
     */
    declare public readonly folder: pulumi.Output<string>;
    /**
     * The Name param.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The Service param.
     */
    declare public readonly services: pulumi.Output<string[]>;
    /**
     * The SourceUser param.
     */
    declare public readonly sourceUsers: pulumi.Output<string[] | undefined>;
    /**
     * The Source param.
     */
    declare public readonly sources: pulumi.Output<string[]>;
    declare public /*out*/ readonly tfid: pulumi.Output<string>;

    /**
     * Create a TrafficSteeringRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TrafficSteeringRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TrafficSteeringRuleArgs | TrafficSteeringRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TrafficSteeringRuleState | undefined;
            resourceInputs["action"] = state?.action;
            resourceInputs["categories"] = state?.categories;
            resourceInputs["destinations"] = state?.destinations;
            resourceInputs["folder"] = state?.folder;
            resourceInputs["name"] = state?.name;
            resourceInputs["services"] = state?.services;
            resourceInputs["sourceUsers"] = state?.sourceUsers;
            resourceInputs["sources"] = state?.sources;
            resourceInputs["tfid"] = state?.tfid;
        } else {
            const args = argsOrState as TrafficSteeringRuleArgs | undefined;
            if (args?.services === undefined && !opts.urn) {
                throw new Error("Missing required property 'services'");
            }
            if (args?.sources === undefined && !opts.urn) {
                throw new Error("Missing required property 'sources'");
            }
            resourceInputs["action"] = args?.action;
            resourceInputs["categories"] = args?.categories;
            resourceInputs["destinations"] = args?.destinations;
            resourceInputs["folder"] = args?.folder;
            resourceInputs["name"] = args?.name;
            resourceInputs["services"] = args?.services;
            resourceInputs["sourceUsers"] = args?.sourceUsers;
            resourceInputs["sources"] = args?.sources;
            resourceInputs["tfid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TrafficSteeringRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TrafficSteeringRule resources.
 */
export interface TrafficSteeringRuleState {
    /**
     * The Action param.
     */
    action?: pulumi.Input<inputs.TrafficSteeringRuleAction>;
    /**
     * The Category param.
     */
    categories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Destination param.
     */
    destinations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Folder param. String can either be a specific string(`"Service Connections"`) or match this regex: `^[0-9a-zA-Z._\s-]{1,}$`. Default: `"Service Connections"`.
     */
    folder?: pulumi.Input<string>;
    /**
     * The Name param.
     */
    name?: pulumi.Input<string>;
    /**
     * The Service param.
     */
    services?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The SourceUser param.
     */
    sourceUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Source param.
     */
    sources?: pulumi.Input<pulumi.Input<string>[]>;
    tfid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TrafficSteeringRule resource.
 */
export interface TrafficSteeringRuleArgs {
    /**
     * The Action param.
     */
    action?: pulumi.Input<inputs.TrafficSteeringRuleAction>;
    /**
     * The Category param.
     */
    categories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Destination param.
     */
    destinations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Folder param. String can either be a specific string(`"Service Connections"`) or match this regex: `^[0-9a-zA-Z._\s-]{1,}$`. Default: `"Service Connections"`.
     */
    folder?: pulumi.Input<string>;
    /**
     * The Name param.
     */
    name?: pulumi.Input<string>;
    /**
     * The Service param.
     */
    services: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The SourceUser param.
     */
    sourceUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Source param.
     */
    sources: pulumi.Input<pulumi.Input<string>[]>;
}
