// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Retrieves a config item.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scm from "@pulumi/scm";
 *
 * const example = new scm.RemoteNetwork("example", {});
 * ```
 */
export class RemoteNetwork extends pulumi.CustomResource {
    /**
     * Get an existing RemoteNetwork resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RemoteNetworkState, opts?: pulumi.CustomResourceOptions): RemoteNetwork {
        return new RemoteNetwork(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scm:index/remoteNetwork:RemoteNetwork';

    /**
     * Returns true if the given object is an instance of RemoteNetwork.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RemoteNetwork {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RemoteNetwork.__pulumiType;
    }

    /**
     * The EcmpLoadBalancing param. String must be one of these: `"enable"`, `"disable"`. Default: `"disable"`.
     */
    declare public readonly ecmpLoadBalancing: pulumi.Output<string>;
    /**
     * ecmp*tunnels is required when ecmp*load*balancing is enable.
     */
    declare public readonly ecmpTunnels: pulumi.Output<outputs.RemoteNetworkEcmpTunnel[] | undefined>;
    /**
     * (Internal use) Encrypted values returned from the API.
     */
    declare public /*out*/ readonly encryptedValues: pulumi.Output<{[key: string]: string}>;
    /**
     * The Folder param. String can either be a specific string(`"Remote Networks"`) or match this regex: `^[\s0-9a-zA-Z._-]{1,}$`. Default: `"Remote Networks"`.
     */
    declare public readonly folder: pulumi.Output<string>;
    /**
     * ipsec*tunnel is required when ecmp*load_balancing is disable.
     */
    declare public readonly ipsecTunnel: pulumi.Output<string | undefined>;
    /**
     * New customer will only be on aggregate bandwidth licensing. String length must exceed 1 characters. Default: `"FWAAS-AGGREGATE"`.
     */
    declare public readonly licenseType: pulumi.Output<string>;
    /**
     * Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * setup the protocol when ecmp*load*balancing is disable.
     */
    declare public readonly protocol: pulumi.Output<outputs.RemoteNetworkProtocol | undefined>;
    /**
     * The Region param. String length must exceed 1 characters.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * specify secondary ipsecTunnel if needed.
     */
    declare public readonly secondaryIpsecTunnel: pulumi.Output<string | undefined>;
    /**
     * spn-name is needed when licenseType is FWAAS-AGGREGATE.
     */
    declare public readonly spnName: pulumi.Output<string | undefined>;
    /**
     * The Subnets param.
     */
    declare public readonly subnets: pulumi.Output<string[] | undefined>;
    declare public /*out*/ readonly tfid: pulumi.Output<string>;

    /**
     * Create a RemoteNetwork resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RemoteNetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RemoteNetworkArgs | RemoteNetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RemoteNetworkState | undefined;
            resourceInputs["ecmpLoadBalancing"] = state?.ecmpLoadBalancing;
            resourceInputs["ecmpTunnels"] = state?.ecmpTunnels;
            resourceInputs["encryptedValues"] = state?.encryptedValues;
            resourceInputs["folder"] = state?.folder;
            resourceInputs["ipsecTunnel"] = state?.ipsecTunnel;
            resourceInputs["licenseType"] = state?.licenseType;
            resourceInputs["name"] = state?.name;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["region"] = state?.region;
            resourceInputs["secondaryIpsecTunnel"] = state?.secondaryIpsecTunnel;
            resourceInputs["spnName"] = state?.spnName;
            resourceInputs["subnets"] = state?.subnets;
            resourceInputs["tfid"] = state?.tfid;
        } else {
            const args = argsOrState as RemoteNetworkArgs | undefined;
            if (args?.region === undefined && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["ecmpLoadBalancing"] = args?.ecmpLoadBalancing;
            resourceInputs["ecmpTunnels"] = args?.ecmpTunnels;
            resourceInputs["folder"] = args?.folder;
            resourceInputs["ipsecTunnel"] = args?.ipsecTunnel;
            resourceInputs["licenseType"] = args?.licenseType;
            resourceInputs["name"] = args?.name;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["region"] = args?.region;
            resourceInputs["secondaryIpsecTunnel"] = args?.secondaryIpsecTunnel;
            resourceInputs["spnName"] = args?.spnName;
            resourceInputs["subnets"] = args?.subnets;
            resourceInputs["encryptedValues"] = undefined /*out*/;
            resourceInputs["tfid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["encryptedValues"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RemoteNetwork.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RemoteNetwork resources.
 */
export interface RemoteNetworkState {
    /**
     * The EcmpLoadBalancing param. String must be one of these: `"enable"`, `"disable"`. Default: `"disable"`.
     */
    ecmpLoadBalancing?: pulumi.Input<string>;
    /**
     * ecmp*tunnels is required when ecmp*load*balancing is enable.
     */
    ecmpTunnels?: pulumi.Input<pulumi.Input<inputs.RemoteNetworkEcmpTunnel>[]>;
    /**
     * (Internal use) Encrypted values returned from the API.
     */
    encryptedValues?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Folder param. String can either be a specific string(`"Remote Networks"`) or match this regex: `^[\s0-9a-zA-Z._-]{1,}$`. Default: `"Remote Networks"`.
     */
    folder?: pulumi.Input<string>;
    /**
     * ipsec*tunnel is required when ecmp*load_balancing is disable.
     */
    ipsecTunnel?: pulumi.Input<string>;
    /**
     * New customer will only be on aggregate bandwidth licensing. String length must exceed 1 characters. Default: `"FWAAS-AGGREGATE"`.
     */
    licenseType?: pulumi.Input<string>;
    /**
     * Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * setup the protocol when ecmp*load*balancing is disable.
     */
    protocol?: pulumi.Input<inputs.RemoteNetworkProtocol>;
    /**
     * The Region param. String length must exceed 1 characters.
     */
    region?: pulumi.Input<string>;
    /**
     * specify secondary ipsecTunnel if needed.
     */
    secondaryIpsecTunnel?: pulumi.Input<string>;
    /**
     * spn-name is needed when licenseType is FWAAS-AGGREGATE.
     */
    spnName?: pulumi.Input<string>;
    /**
     * The Subnets param.
     */
    subnets?: pulumi.Input<pulumi.Input<string>[]>;
    tfid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RemoteNetwork resource.
 */
export interface RemoteNetworkArgs {
    /**
     * The EcmpLoadBalancing param. String must be one of these: `"enable"`, `"disable"`. Default: `"disable"`.
     */
    ecmpLoadBalancing?: pulumi.Input<string>;
    /**
     * ecmp*tunnels is required when ecmp*load*balancing is enable.
     */
    ecmpTunnels?: pulumi.Input<pulumi.Input<inputs.RemoteNetworkEcmpTunnel>[]>;
    /**
     * The Folder param. String can either be a specific string(`"Remote Networks"`) or match this regex: `^[\s0-9a-zA-Z._-]{1,}$`. Default: `"Remote Networks"`.
     */
    folder?: pulumi.Input<string>;
    /**
     * ipsec*tunnel is required when ecmp*load_balancing is disable.
     */
    ipsecTunnel?: pulumi.Input<string>;
    /**
     * New customer will only be on aggregate bandwidth licensing. String length must exceed 1 characters. Default: `"FWAAS-AGGREGATE"`.
     */
    licenseType?: pulumi.Input<string>;
    /**
     * Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * setup the protocol when ecmp*load*balancing is disable.
     */
    protocol?: pulumi.Input<inputs.RemoteNetworkProtocol>;
    /**
     * The Region param. String length must exceed 1 characters.
     */
    region: pulumi.Input<string>;
    /**
     * specify secondary ipsecTunnel if needed.
     */
    secondaryIpsecTunnel?: pulumi.Input<string>;
    /**
     * spn-name is needed when licenseType is FWAAS-AGGREGATE.
     */
    spnName?: pulumi.Input<string>;
    /**
     * The Subnets param.
     */
    subnets?: pulumi.Input<pulumi.Input<string>[]>;
}
