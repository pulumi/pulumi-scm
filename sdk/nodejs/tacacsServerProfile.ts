// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Retrieves a config item.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scm from "@pulumi/scm";
 *
 * const example = new scm.TacacsServerProfile("example", {});
 * ```
 */
export class TacacsServerProfile extends pulumi.CustomResource {
    /**
     * Get an existing TacacsServerProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TacacsServerProfileState, opts?: pulumi.CustomResourceOptions): TacacsServerProfile {
        return new TacacsServerProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scm:index/tacacsServerProfile:TacacsServerProfile';

    /**
     * Returns true if the given object is an instance of TacacsServerProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TacacsServerProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TacacsServerProfile.__pulumiType;
    }

    /**
     * The Device param.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * (Internal use) Encrypted values returned from the API.
     */
    public /*out*/ readonly encryptedValues!: pulumi.Output<{[key: string]: string}>;
    /**
     * The Folder param.
     */
    public readonly folder!: pulumi.Output<string | undefined>;
    /**
     * The Protocol param. String must be one of these: `"CHAP"`, `"PAP"`.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * The Servers param.
     */
    public readonly servers!: pulumi.Output<outputs.TacacsServerProfileServer[]>;
    /**
     * The Snippet param.
     */
    public readonly snippet!: pulumi.Output<string | undefined>;
    public /*out*/ readonly tfid!: pulumi.Output<string>;
    /**
     * The Timeout param. Value must be between 1 and 30.
     */
    public readonly timeout!: pulumi.Output<number | undefined>;
    /**
     * The UseSingleConnection param.
     */
    public readonly useSingleConnection!: pulumi.Output<boolean | undefined>;

    /**
     * Create a TacacsServerProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TacacsServerProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TacacsServerProfileArgs | TacacsServerProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TacacsServerProfileState | undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["encryptedValues"] = state ? state.encryptedValues : undefined;
            resourceInputs["folder"] = state ? state.folder : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["servers"] = state ? state.servers : undefined;
            resourceInputs["snippet"] = state ? state.snippet : undefined;
            resourceInputs["tfid"] = state ? state.tfid : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["useSingleConnection"] = state ? state.useSingleConnection : undefined;
        } else {
            const args = argsOrState as TacacsServerProfileArgs | undefined;
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.servers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servers'");
            }
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["folder"] = args ? args.folder : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["servers"] = args ? args.servers : undefined;
            resourceInputs["snippet"] = args ? args.snippet : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["useSingleConnection"] = args ? args.useSingleConnection : undefined;
            resourceInputs["encryptedValues"] = undefined /*out*/;
            resourceInputs["tfid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["encryptedValues"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(TacacsServerProfile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TacacsServerProfile resources.
 */
export interface TacacsServerProfileState {
    /**
     * The Device param.
     */
    device?: pulumi.Input<string>;
    /**
     * (Internal use) Encrypted values returned from the API.
     */
    encryptedValues?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Folder param.
     */
    folder?: pulumi.Input<string>;
    /**
     * The Protocol param. String must be one of these: `"CHAP"`, `"PAP"`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * The Servers param.
     */
    servers?: pulumi.Input<pulumi.Input<inputs.TacacsServerProfileServer>[]>;
    /**
     * The Snippet param.
     */
    snippet?: pulumi.Input<string>;
    tfid?: pulumi.Input<string>;
    /**
     * The Timeout param. Value must be between 1 and 30.
     */
    timeout?: pulumi.Input<number>;
    /**
     * The UseSingleConnection param.
     */
    useSingleConnection?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a TacacsServerProfile resource.
 */
export interface TacacsServerProfileArgs {
    /**
     * The Device param.
     */
    device?: pulumi.Input<string>;
    /**
     * The Folder param.
     */
    folder?: pulumi.Input<string>;
    /**
     * The Protocol param. String must be one of these: `"CHAP"`, `"PAP"`.
     */
    protocol: pulumi.Input<string>;
    /**
     * The Servers param.
     */
    servers: pulumi.Input<pulumi.Input<inputs.TacacsServerProfileServer>[]>;
    /**
     * The Snippet param.
     */
    snippet?: pulumi.Input<string>;
    /**
     * The Timeout param. Value must be between 1 and 30.
     */
    timeout?: pulumi.Input<number>;
    /**
     * The UseSingleConnection param.
     */
    useSingleConnection?: pulumi.Input<boolean>;
}
