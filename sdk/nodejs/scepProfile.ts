// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Retrieves a config item.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scm from "@pulumi/scm";
 *
 * const example = new scm.ScepProfile("example", {});
 * ```
 */
export class ScepProfile extends pulumi.CustomResource {
    /**
     * Get an existing ScepProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScepProfileState, opts?: pulumi.CustomResourceOptions): ScepProfile {
        return new ScepProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scm:index/scepProfile:ScepProfile';

    /**
     * Returns true if the given object is an instance of ScepProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScepProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScepProfile.__pulumiType;
    }

    /**
     * The Algorithm param.
     */
    declare public readonly algorithm: pulumi.Output<outputs.ScepProfileAlgorithm | undefined>;
    /**
     * The CaIdentityName param.
     */
    declare public readonly caIdentityName: pulumi.Output<string>;
    /**
     * The CertificateAttributes param.
     */
    declare public readonly certificateAttributes: pulumi.Output<outputs.ScepProfileCertificateAttributes | undefined>;
    /**
     * The Device param.
     */
    declare public readonly device: pulumi.Output<string | undefined>;
    /**
     * The Digest param.
     */
    declare public readonly digest: pulumi.Output<string>;
    /**
     * (Internal use) Encrypted values returned from the API.
     */
    declare public /*out*/ readonly encryptedValues: pulumi.Output<{[key: string]: string}>;
    /**
     * The Fingerprint param.
     */
    declare public readonly fingerprint: pulumi.Output<string | undefined>;
    /**
     * The Folder param.
     */
    declare public readonly folder: pulumi.Output<string | undefined>;
    /**
     * alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ScepCaCert param.
     */
    declare public readonly scepCaCert: pulumi.Output<string | undefined>;
    /**
     * The ScepChallenge param.
     */
    declare public readonly scepChallenge: pulumi.Output<outputs.ScepProfileScepChallenge | undefined>;
    /**
     * The ScepClientCert param.
     */
    declare public readonly scepClientCert: pulumi.Output<string | undefined>;
    /**
     * The ScepUrl param.
     */
    declare public readonly scepUrl: pulumi.Output<string>;
    /**
     * The Snippet param.
     */
    declare public readonly snippet: pulumi.Output<string | undefined>;
    /**
     * The Subject param.
     */
    declare public readonly subject: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly tfid: pulumi.Output<string>;
    /**
     * The UseAsDigitalSignature param.
     */
    declare public readonly useAsDigitalSignature: pulumi.Output<boolean | undefined>;
    /**
     * The UseForKeyEncipherment param.
     */
    declare public readonly useForKeyEncipherment: pulumi.Output<boolean | undefined>;

    /**
     * Create a ScepProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScepProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScepProfileArgs | ScepProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScepProfileState | undefined;
            resourceInputs["algorithm"] = state?.algorithm;
            resourceInputs["caIdentityName"] = state?.caIdentityName;
            resourceInputs["certificateAttributes"] = state?.certificateAttributes;
            resourceInputs["device"] = state?.device;
            resourceInputs["digest"] = state?.digest;
            resourceInputs["encryptedValues"] = state?.encryptedValues;
            resourceInputs["fingerprint"] = state?.fingerprint;
            resourceInputs["folder"] = state?.folder;
            resourceInputs["name"] = state?.name;
            resourceInputs["scepCaCert"] = state?.scepCaCert;
            resourceInputs["scepChallenge"] = state?.scepChallenge;
            resourceInputs["scepClientCert"] = state?.scepClientCert;
            resourceInputs["scepUrl"] = state?.scepUrl;
            resourceInputs["snippet"] = state?.snippet;
            resourceInputs["subject"] = state?.subject;
            resourceInputs["tfid"] = state?.tfid;
            resourceInputs["useAsDigitalSignature"] = state?.useAsDigitalSignature;
            resourceInputs["useForKeyEncipherment"] = state?.useForKeyEncipherment;
        } else {
            const args = argsOrState as ScepProfileArgs | undefined;
            if (args?.caIdentityName === undefined && !opts.urn) {
                throw new Error("Missing required property 'caIdentityName'");
            }
            if (args?.digest === undefined && !opts.urn) {
                throw new Error("Missing required property 'digest'");
            }
            if (args?.scepUrl === undefined && !opts.urn) {
                throw new Error("Missing required property 'scepUrl'");
            }
            resourceInputs["algorithm"] = args?.algorithm;
            resourceInputs["caIdentityName"] = args?.caIdentityName;
            resourceInputs["certificateAttributes"] = args?.certificateAttributes;
            resourceInputs["device"] = args?.device;
            resourceInputs["digest"] = args?.digest;
            resourceInputs["fingerprint"] = args?.fingerprint;
            resourceInputs["folder"] = args?.folder;
            resourceInputs["name"] = args?.name;
            resourceInputs["scepCaCert"] = args?.scepCaCert;
            resourceInputs["scepChallenge"] = args?.scepChallenge;
            resourceInputs["scepClientCert"] = args?.scepClientCert;
            resourceInputs["scepUrl"] = args?.scepUrl;
            resourceInputs["snippet"] = args?.snippet;
            resourceInputs["subject"] = args?.subject;
            resourceInputs["useAsDigitalSignature"] = args?.useAsDigitalSignature;
            resourceInputs["useForKeyEncipherment"] = args?.useForKeyEncipherment;
            resourceInputs["encryptedValues"] = undefined /*out*/;
            resourceInputs["tfid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["encryptedValues"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ScepProfile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ScepProfile resources.
 */
export interface ScepProfileState {
    /**
     * The Algorithm param.
     */
    algorithm?: pulumi.Input<inputs.ScepProfileAlgorithm>;
    /**
     * The CaIdentityName param.
     */
    caIdentityName?: pulumi.Input<string>;
    /**
     * The CertificateAttributes param.
     */
    certificateAttributes?: pulumi.Input<inputs.ScepProfileCertificateAttributes>;
    /**
     * The Device param.
     */
    device?: pulumi.Input<string>;
    /**
     * The Digest param.
     */
    digest?: pulumi.Input<string>;
    /**
     * (Internal use) Encrypted values returned from the API.
     */
    encryptedValues?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Fingerprint param.
     */
    fingerprint?: pulumi.Input<string>;
    /**
     * The Folder param.
     */
    folder?: pulumi.Input<string>;
    /**
     * alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * The ScepCaCert param.
     */
    scepCaCert?: pulumi.Input<string>;
    /**
     * The ScepChallenge param.
     */
    scepChallenge?: pulumi.Input<inputs.ScepProfileScepChallenge>;
    /**
     * The ScepClientCert param.
     */
    scepClientCert?: pulumi.Input<string>;
    /**
     * The ScepUrl param.
     */
    scepUrl?: pulumi.Input<string>;
    /**
     * The Snippet param.
     */
    snippet?: pulumi.Input<string>;
    /**
     * The Subject param.
     */
    subject?: pulumi.Input<string>;
    tfid?: pulumi.Input<string>;
    /**
     * The UseAsDigitalSignature param.
     */
    useAsDigitalSignature?: pulumi.Input<boolean>;
    /**
     * The UseForKeyEncipherment param.
     */
    useForKeyEncipherment?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ScepProfile resource.
 */
export interface ScepProfileArgs {
    /**
     * The Algorithm param.
     */
    algorithm?: pulumi.Input<inputs.ScepProfileAlgorithm>;
    /**
     * The CaIdentityName param.
     */
    caIdentityName: pulumi.Input<string>;
    /**
     * The CertificateAttributes param.
     */
    certificateAttributes?: pulumi.Input<inputs.ScepProfileCertificateAttributes>;
    /**
     * The Device param.
     */
    device?: pulumi.Input<string>;
    /**
     * The Digest param.
     */
    digest: pulumi.Input<string>;
    /**
     * The Fingerprint param.
     */
    fingerprint?: pulumi.Input<string>;
    /**
     * The Folder param.
     */
    folder?: pulumi.Input<string>;
    /**
     * alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * The ScepCaCert param.
     */
    scepCaCert?: pulumi.Input<string>;
    /**
     * The ScepChallenge param.
     */
    scepChallenge?: pulumi.Input<inputs.ScepProfileScepChallenge>;
    /**
     * The ScepClientCert param.
     */
    scepClientCert?: pulumi.Input<string>;
    /**
     * The ScepUrl param.
     */
    scepUrl: pulumi.Input<string>;
    /**
     * The Snippet param.
     */
    snippet?: pulumi.Input<string>;
    /**
     * The Subject param.
     */
    subject?: pulumi.Input<string>;
    /**
     * The UseAsDigitalSignature param.
     */
    useAsDigitalSignature?: pulumi.Input<boolean>;
    /**
     * The UseForKeyEncipherment param.
     */
    useForKeyEncipherment?: pulumi.Input<boolean>;
}
