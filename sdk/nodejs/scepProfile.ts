// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Retrieves a config item.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scm from "@pulumi/scm";
 *
 * const example = new scm.ScepProfile("example", {});
 * ```
 */
export class ScepProfile extends pulumi.CustomResource {
    /**
     * Get an existing ScepProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScepProfileState, opts?: pulumi.CustomResourceOptions): ScepProfile {
        return new ScepProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scm:index/scepProfile:ScepProfile';

    /**
     * Returns true if the given object is an instance of ScepProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScepProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScepProfile.__pulumiType;
    }

    /**
     * The Algorithm param.
     */
    public readonly algorithm!: pulumi.Output<outputs.ScepProfileAlgorithm | undefined>;
    /**
     * The CaIdentityName param.
     */
    public readonly caIdentityName!: pulumi.Output<string>;
    /**
     * The CertificateAttributes param.
     */
    public readonly certificateAttributes!: pulumi.Output<outputs.ScepProfileCertificateAttributes | undefined>;
    /**
     * The Device param.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * The Digest param.
     */
    public readonly digest!: pulumi.Output<string>;
    /**
     * (Internal use) Encrypted values returned from the API.
     */
    public /*out*/ readonly encryptedValues!: pulumi.Output<{[key: string]: string}>;
    /**
     * The Fingerprint param.
     */
    public readonly fingerprint!: pulumi.Output<string | undefined>;
    /**
     * The Folder param.
     */
    public readonly folder!: pulumi.Output<string | undefined>;
    /**
     * alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ScepCaCert param.
     */
    public readonly scepCaCert!: pulumi.Output<string | undefined>;
    /**
     * The ScepChallenge param.
     */
    public readonly scepChallenge!: pulumi.Output<outputs.ScepProfileScepChallenge | undefined>;
    /**
     * The ScepClientCert param.
     */
    public readonly scepClientCert!: pulumi.Output<string | undefined>;
    /**
     * The ScepUrl param.
     */
    public readonly scepUrl!: pulumi.Output<string>;
    /**
     * The Snippet param.
     */
    public readonly snippet!: pulumi.Output<string | undefined>;
    /**
     * The Subject param.
     */
    public readonly subject!: pulumi.Output<string | undefined>;
    public /*out*/ readonly tfid!: pulumi.Output<string>;
    /**
     * The UseAsDigitalSignature param.
     */
    public readonly useAsDigitalSignature!: pulumi.Output<boolean | undefined>;
    /**
     * The UseForKeyEncipherment param.
     */
    public readonly useForKeyEncipherment!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ScepProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScepProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScepProfileArgs | ScepProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScepProfileState | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["caIdentityName"] = state ? state.caIdentityName : undefined;
            resourceInputs["certificateAttributes"] = state ? state.certificateAttributes : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["digest"] = state ? state.digest : undefined;
            resourceInputs["encryptedValues"] = state ? state.encryptedValues : undefined;
            resourceInputs["fingerprint"] = state ? state.fingerprint : undefined;
            resourceInputs["folder"] = state ? state.folder : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scepCaCert"] = state ? state.scepCaCert : undefined;
            resourceInputs["scepChallenge"] = state ? state.scepChallenge : undefined;
            resourceInputs["scepClientCert"] = state ? state.scepClientCert : undefined;
            resourceInputs["scepUrl"] = state ? state.scepUrl : undefined;
            resourceInputs["snippet"] = state ? state.snippet : undefined;
            resourceInputs["subject"] = state ? state.subject : undefined;
            resourceInputs["tfid"] = state ? state.tfid : undefined;
            resourceInputs["useAsDigitalSignature"] = state ? state.useAsDigitalSignature : undefined;
            resourceInputs["useForKeyEncipherment"] = state ? state.useForKeyEncipherment : undefined;
        } else {
            const args = argsOrState as ScepProfileArgs | undefined;
            if ((!args || args.caIdentityName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'caIdentityName'");
            }
            if ((!args || args.digest === undefined) && !opts.urn) {
                throw new Error("Missing required property 'digest'");
            }
            if ((!args || args.scepUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scepUrl'");
            }
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["caIdentityName"] = args ? args.caIdentityName : undefined;
            resourceInputs["certificateAttributes"] = args ? args.certificateAttributes : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["digest"] = args ? args.digest : undefined;
            resourceInputs["fingerprint"] = args ? args.fingerprint : undefined;
            resourceInputs["folder"] = args ? args.folder : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scepCaCert"] = args ? args.scepCaCert : undefined;
            resourceInputs["scepChallenge"] = args ? args.scepChallenge : undefined;
            resourceInputs["scepClientCert"] = args ? args.scepClientCert : undefined;
            resourceInputs["scepUrl"] = args ? args.scepUrl : undefined;
            resourceInputs["snippet"] = args ? args.snippet : undefined;
            resourceInputs["subject"] = args ? args.subject : undefined;
            resourceInputs["useAsDigitalSignature"] = args ? args.useAsDigitalSignature : undefined;
            resourceInputs["useForKeyEncipherment"] = args ? args.useForKeyEncipherment : undefined;
            resourceInputs["encryptedValues"] = undefined /*out*/;
            resourceInputs["tfid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["encryptedValues"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ScepProfile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ScepProfile resources.
 */
export interface ScepProfileState {
    /**
     * The Algorithm param.
     */
    algorithm?: pulumi.Input<inputs.ScepProfileAlgorithm>;
    /**
     * The CaIdentityName param.
     */
    caIdentityName?: pulumi.Input<string>;
    /**
     * The CertificateAttributes param.
     */
    certificateAttributes?: pulumi.Input<inputs.ScepProfileCertificateAttributes>;
    /**
     * The Device param.
     */
    device?: pulumi.Input<string>;
    /**
     * The Digest param.
     */
    digest?: pulumi.Input<string>;
    /**
     * (Internal use) Encrypted values returned from the API.
     */
    encryptedValues?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Fingerprint param.
     */
    fingerprint?: pulumi.Input<string>;
    /**
     * The Folder param.
     */
    folder?: pulumi.Input<string>;
    /**
     * alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * The ScepCaCert param.
     */
    scepCaCert?: pulumi.Input<string>;
    /**
     * The ScepChallenge param.
     */
    scepChallenge?: pulumi.Input<inputs.ScepProfileScepChallenge>;
    /**
     * The ScepClientCert param.
     */
    scepClientCert?: pulumi.Input<string>;
    /**
     * The ScepUrl param.
     */
    scepUrl?: pulumi.Input<string>;
    /**
     * The Snippet param.
     */
    snippet?: pulumi.Input<string>;
    /**
     * The Subject param.
     */
    subject?: pulumi.Input<string>;
    tfid?: pulumi.Input<string>;
    /**
     * The UseAsDigitalSignature param.
     */
    useAsDigitalSignature?: pulumi.Input<boolean>;
    /**
     * The UseForKeyEncipherment param.
     */
    useForKeyEncipherment?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ScepProfile resource.
 */
export interface ScepProfileArgs {
    /**
     * The Algorithm param.
     */
    algorithm?: pulumi.Input<inputs.ScepProfileAlgorithm>;
    /**
     * The CaIdentityName param.
     */
    caIdentityName: pulumi.Input<string>;
    /**
     * The CertificateAttributes param.
     */
    certificateAttributes?: pulumi.Input<inputs.ScepProfileCertificateAttributes>;
    /**
     * The Device param.
     */
    device?: pulumi.Input<string>;
    /**
     * The Digest param.
     */
    digest: pulumi.Input<string>;
    /**
     * The Fingerprint param.
     */
    fingerprint?: pulumi.Input<string>;
    /**
     * The Folder param.
     */
    folder?: pulumi.Input<string>;
    /**
     * alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * The ScepCaCert param.
     */
    scepCaCert?: pulumi.Input<string>;
    /**
     * The ScepChallenge param.
     */
    scepChallenge?: pulumi.Input<inputs.ScepProfileScepChallenge>;
    /**
     * The ScepClientCert param.
     */
    scepClientCert?: pulumi.Input<string>;
    /**
     * The ScepUrl param.
     */
    scepUrl: pulumi.Input<string>;
    /**
     * The Snippet param.
     */
    snippet?: pulumi.Input<string>;
    /**
     * The Subject param.
     */
    subject?: pulumi.Input<string>;
    /**
     * The UseAsDigitalSignature param.
     */
    useAsDigitalSignature?: pulumi.Input<boolean>;
    /**
     * The UseForKeyEncipherment param.
     */
    useForKeyEncipherment?: pulumi.Input<boolean>;
}
