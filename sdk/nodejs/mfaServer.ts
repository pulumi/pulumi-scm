// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Retrieves a config item.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as scm from "@pulumi/scm";
 *
 * const example = new scm.MfaServer("example", {});
 * ```
 */
export class MfaServer extends pulumi.CustomResource {
    /**
     * Get an existing MfaServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MfaServerState, opts?: pulumi.CustomResourceOptions): MfaServer {
        return new MfaServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scm:index/mfaServer:MfaServer';

    /**
     * Returns true if the given object is an instance of MfaServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MfaServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MfaServer.__pulumiType;
    }

    /**
     * The Device param.
     */
    declare public readonly device: pulumi.Output<string | undefined>;
    /**
     * The Folder param.
     */
    declare public readonly folder: pulumi.Output<string | undefined>;
    /**
     * The MfaCertProfile param.
     */
    declare public readonly mfaCertProfile: pulumi.Output<string>;
    /**
     * The MfaVendorType param.
     */
    declare public readonly mfaVendorType: pulumi.Output<outputs.MfaServerMfaVendorType | undefined>;
    /**
     * The Name param.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The Snippet param.
     */
    declare public readonly snippet: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly tfid: pulumi.Output<string>;

    /**
     * Create a MfaServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MfaServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MfaServerArgs | MfaServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MfaServerState | undefined;
            resourceInputs["device"] = state?.device;
            resourceInputs["folder"] = state?.folder;
            resourceInputs["mfaCertProfile"] = state?.mfaCertProfile;
            resourceInputs["mfaVendorType"] = state?.mfaVendorType;
            resourceInputs["name"] = state?.name;
            resourceInputs["snippet"] = state?.snippet;
            resourceInputs["tfid"] = state?.tfid;
        } else {
            const args = argsOrState as MfaServerArgs | undefined;
            if (args?.mfaCertProfile === undefined && !opts.urn) {
                throw new Error("Missing required property 'mfaCertProfile'");
            }
            resourceInputs["device"] = args?.device;
            resourceInputs["folder"] = args?.folder;
            resourceInputs["mfaCertProfile"] = args?.mfaCertProfile;
            resourceInputs["mfaVendorType"] = args?.mfaVendorType;
            resourceInputs["name"] = args?.name;
            resourceInputs["snippet"] = args?.snippet;
            resourceInputs["tfid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MfaServer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MfaServer resources.
 */
export interface MfaServerState {
    /**
     * The Device param.
     */
    device?: pulumi.Input<string>;
    /**
     * The Folder param.
     */
    folder?: pulumi.Input<string>;
    /**
     * The MfaCertProfile param.
     */
    mfaCertProfile?: pulumi.Input<string>;
    /**
     * The MfaVendorType param.
     */
    mfaVendorType?: pulumi.Input<inputs.MfaServerMfaVendorType>;
    /**
     * The Name param.
     */
    name?: pulumi.Input<string>;
    /**
     * The Snippet param.
     */
    snippet?: pulumi.Input<string>;
    tfid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MfaServer resource.
 */
export interface MfaServerArgs {
    /**
     * The Device param.
     */
    device?: pulumi.Input<string>;
    /**
     * The Folder param.
     */
    folder?: pulumi.Input<string>;
    /**
     * The MfaCertProfile param.
     */
    mfaCertProfile: pulumi.Input<string>;
    /**
     * The MfaVendorType param.
     */
    mfaVendorType?: pulumi.Input<inputs.MfaServerMfaVendorType>;
    /**
     * The Name param.
     */
    name?: pulumi.Input<string>;
    /**
     * The Snippet param.
     */
    snippet?: pulumi.Input<string>;
}
