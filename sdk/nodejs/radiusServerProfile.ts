// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Retrieves a config item.
 */
export class RadiusServerProfile extends pulumi.CustomResource {
    /**
     * Get an existing RadiusServerProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RadiusServerProfileState, opts?: pulumi.CustomResourceOptions): RadiusServerProfile {
        return new RadiusServerProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scm:index/radiusServerProfile:RadiusServerProfile';

    /**
     * Returns true if the given object is an instance of RadiusServerProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RadiusServerProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RadiusServerProfile.__pulumiType;
    }

    /**
     * The Device param.
     */
    declare public readonly device: pulumi.Output<string | undefined>;
    /**
     * (Internal use) Encrypted values returned from the API.
     */
    declare public /*out*/ readonly encryptedValues: pulumi.Output<{[key: string]: string}>;
    /**
     * The Folder param.
     */
    declare public readonly folder: pulumi.Output<string | undefined>;
    /**
     * The Protocol param.
     */
    declare public readonly protocol: pulumi.Output<outputs.RadiusServerProfileProtocol | undefined>;
    /**
     * The Retries param. Value must be between 1 and 5.
     */
    declare public readonly retries: pulumi.Output<number | undefined>;
    /**
     * The Servers param.
     */
    declare public readonly servers: pulumi.Output<outputs.RadiusServerProfileServer[]>;
    /**
     * The Snippet param.
     */
    declare public readonly snippet: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly tfid: pulumi.Output<string>;
    /**
     * The Timeout param. Value must be between 1 and 120.
     */
    declare public readonly timeout: pulumi.Output<number | undefined>;

    /**
     * Create a RadiusServerProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RadiusServerProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RadiusServerProfileArgs | RadiusServerProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RadiusServerProfileState | undefined;
            resourceInputs["device"] = state?.device;
            resourceInputs["encryptedValues"] = state?.encryptedValues;
            resourceInputs["folder"] = state?.folder;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["retries"] = state?.retries;
            resourceInputs["servers"] = state?.servers;
            resourceInputs["snippet"] = state?.snippet;
            resourceInputs["tfid"] = state?.tfid;
            resourceInputs["timeout"] = state?.timeout;
        } else {
            const args = argsOrState as RadiusServerProfileArgs | undefined;
            if (args?.servers === undefined && !opts.urn) {
                throw new Error("Missing required property 'servers'");
            }
            resourceInputs["device"] = args?.device;
            resourceInputs["folder"] = args?.folder;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["retries"] = args?.retries;
            resourceInputs["servers"] = args?.servers;
            resourceInputs["snippet"] = args?.snippet;
            resourceInputs["timeout"] = args?.timeout;
            resourceInputs["encryptedValues"] = undefined /*out*/;
            resourceInputs["tfid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["encryptedValues"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RadiusServerProfile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RadiusServerProfile resources.
 */
export interface RadiusServerProfileState {
    /**
     * The Device param.
     */
    device?: pulumi.Input<string>;
    /**
     * (Internal use) Encrypted values returned from the API.
     */
    encryptedValues?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Folder param.
     */
    folder?: pulumi.Input<string>;
    /**
     * The Protocol param.
     */
    protocol?: pulumi.Input<inputs.RadiusServerProfileProtocol>;
    /**
     * The Retries param. Value must be between 1 and 5.
     */
    retries?: pulumi.Input<number>;
    /**
     * The Servers param.
     */
    servers?: pulumi.Input<pulumi.Input<inputs.RadiusServerProfileServer>[]>;
    /**
     * The Snippet param.
     */
    snippet?: pulumi.Input<string>;
    tfid?: pulumi.Input<string>;
    /**
     * The Timeout param. Value must be between 1 and 120.
     */
    timeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a RadiusServerProfile resource.
 */
export interface RadiusServerProfileArgs {
    /**
     * The Device param.
     */
    device?: pulumi.Input<string>;
    /**
     * The Folder param.
     */
    folder?: pulumi.Input<string>;
    /**
     * The Protocol param.
     */
    protocol?: pulumi.Input<inputs.RadiusServerProfileProtocol>;
    /**
     * The Retries param. Value must be between 1 and 5.
     */
    retries?: pulumi.Input<number>;
    /**
     * The Servers param.
     */
    servers: pulumi.Input<pulumi.Input<inputs.RadiusServerProfileServer>[]>;
    /**
     * The Snippet param.
     */
    snippet?: pulumi.Input<string>;
    /**
     * The Timeout param. Value must be between 1 and 120.
     */
    timeout?: pulumi.Input<number>;
}
